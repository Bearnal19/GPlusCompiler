
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Asintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Asintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Asintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Asintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u015a\000\002\002\004\000\002\002\011\000\002\002" +
    "\006\000\002\002\007\000\002\002\007\000\002\002\010" +
    "\000\002\002\007\000\002\002\007\000\002\002\010\000" +
    "\002\002\010\000\002\002\010\000\002\002\010\000\002" +
    "\002\012\000\002\002\003\000\002\002\012\000\002\002" +
    "\011\000\002\002\012\000\002\002\011\000\002\002\012" +
    "\000\002\002\011\000\002\002\012\000\002\002\011\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\006\000\002\003\005\000\002\003\005\000\002\003" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\006" +
    "\000\002\003\006\000\002\003\005\000\002\003\005\000" +
    "\002\052\004\000\002\052\003\000\002\052\004\000\002" +
    "\052\005\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\052\005\000\002\052\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\005\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\011\005\000\002" +
    "\011\003\000\002\011\005\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\062\003\000" +
    "\002\062\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\003\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\003" +
    "\000\002\061\003\000\002\061\005\000\002\050\003\000" +
    "\002\050\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\020\017" +
    "\000\002\020\017\000\002\020\017\000\002\020\017\000" +
    "\002\020\017\000\002\020\017\000\002\020\017\000\002" +
    "\020\017\000\002\020\017\000\002\020\017\000\002\020" +
    "\017\000\002\020\017\000\002\020\017\000\002\020\017" +
    "\000\002\021\012\000\002\021\011\000\002\021\012\000" +
    "\002\021\012\000\002\021\012\000\002\021\012\000\002" +
    "\021\012\000\002\021\012\000\002\021\012\000\002\021" +
    "\012\000\002\026\003\000\002\026\005\000\002\026\003" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\022\013\000\002\022\013\000\002\022\013\000\002" +
    "\022\013\000\002\022\013\000\002\022\013\000\002\022" +
    "\013\000\002\022\013\000\002\022\013\000\002\027\053" +
    "\000\002\027\053\000\002\027\052\000\002\027\053\000" +
    "\002\027\052\000\002\027\053\000\002\027\052\000\002" +
    "\027\053\000\002\027\052\000\002\027\053\000\002\027" +
    "\052\000\002\027\053\000\002\027\052\000\002\027\053" +
    "\000\002\027\052\000\002\027\053\000\002\027\052\000" +
    "\002\027\053\000\002\027\052\000\002\027\053\000\002" +
    "\027\052\000\002\027\053\000\002\027\052\000\002\027" +
    "\053\000\002\027\052\000\002\027\053\000\002\027\052" +
    "\000\002\027\053\000\002\027\052\000\002\027\053\000" +
    "\002\027\052\000\002\027\053\000\002\027\052\000\002" +
    "\027\053\000\002\027\052\000\002\027\053\000\002\027" +
    "\052\000\002\027\053\000\002\027\052\000\002\027\053" +
    "\000\002\027\052\000\002\027\053\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\017\003\000\002" +
    "\017\004\000\002\017\003\000\002\032\003\000\002\032" +
    "\004\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\024\017\000\002\024\017\000\002\024\017\000\002" +
    "\024\017\000\002\024\017\000\002\024\017\000\002\024" +
    "\017\000\002\024\017\000\002\024\017\000\002\024\017" +
    "\000\002\024\017\000\002\024\017\000\002\024\017\000" +
    "\002\025\003\000\002\025\003\000\002\033\003\000\002" +
    "\033\003\000\002\037\007\000\002\037\007\000\002\037" +
    "\007\000\002\037\007\000\002\037\007\000\002\040\007" +
    "\000\002\040\007\000\002\040\007\000\002\040\007\000" +
    "\002\040\010\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\041\007\000\002\041\007\000\002\041" +
    "\007\000\002\041\007\000\002\041\007\000\002\042\007" +
    "\000\002\042\007\000\002\042\007\000\002\042\007\000" +
    "\002\042\007\000\002\043\007\000\002\043\007\000\002" +
    "\043\007\000\002\043\007\000\002\043\007\000\002\035" +
    "\003\000\002\035\003\000\002\044\011\000\002\044\011" +
    "\000\002\044\011\000\002\044\011\000\002\044\011\000" +
    "\002\044\011\000\002\044\011\000\002\045\007\000\002" +
    "\045\007\000\002\045\007\000\002\045\007\000\002\045" +
    "\007\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\023\003\000\002\023\003" +
    "\000\002\030\010\000\002\030\013\000\002\030\010\000" +
    "\002\030\011\000\002\030\007\000\002\030\010\000\002" +
    "\030\011\000\002\030\012\000\002\030\012\000\002\036" +
    "\010\000\002\036\010\000\002\036\010\000\002\036\010" +
    "\000\002\036\006\000\002\036\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0695\000\010\003\006\004\004\005\005\001\002\000" +
    "\020\003\u066c\005\u066b\006\015\027\024\030\021\031\014" +
    "\107\020\001\002\000\016\003\022\006\015\027\024\030" +
    "\021\031\014\107\020\001\002\000\024\002\ufff4\003\022" +
    "\004\011\005\016\006\015\027\024\030\021\031\014\107" +
    "\020\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\004\005\u0660\001\002\000\006\003\u065c\007" +
    "\u065d\001\002\000\004\010\u0658\001\002\000\006\003\uffce" +
    "\107\uffce\001\002\000\010\003\uffeb\005\uffeb\010\uffeb\001" +
    "\002\000\016\003\022\006\015\027\024\030\021\031\014" +
    "\107\020\001\002\000\006\003\146\107\145\001\002\000" +
    "\006\003\135\011\136\001\002\000\006\003\uffcf\107\uffcf" +
    "\001\002\000\016\003\uffe5\005\uffe5\007\030\010\uffe5\011" +
    "\033\107\144\001\002\000\020\003\027\006\015\007\025" +
    "\027\024\030\021\031\014\107\020\001\002\000\006\003" +
    "\uffd0\107\uffd0\001\002\000\016\003\022\006\015\027\024" +
    "\030\021\031\014\107\020\001\002\000\010\003\uffe9\005" +
    "\uffe9\010\uffe9\001\002\000\026\003\022\005\uffe5\006\015" +
    "\007\030\010\uffe5\011\033\027\024\030\021\031\014\107" +
    "\032\001\002\000\016\003\022\006\015\027\024\030\021" +
    "\031\014\107\020\001\002\000\010\003\uffe3\005\uffe3\010" +
    "\uffe3\001\002\000\022\003\135\006\uff9b\007\uff9b\011\136" +
    "\027\uff9b\030\uff9b\031\uff9b\107\uff9b\001\002\000\020\003" +
    "\050\012\046\047\037\050\044\107\047\110\041\111\034" +
    "\001\002\000\042\003\uffcb\006\uffcb\007\uffcb\013\uffcb\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uffcb\030\uffcb\031\uffcb\107\uffcb\001\002\000" +
    "\062\003\uffab\005\uffab\006\uffab\007\uffab\013\uffab\015\uffab" +
    "\016\uffab\027\uffab\030\uffab\031\uffab\032\uffab\037\uffab\040" +
    "\uffab\043\uffab\045\uffab\046\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\055\uffab\077\uffab\100\uffab\107\uffab\001\002\000" +
    "\022\003\uffc8\006\uffc8\007\uffc8\013\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\107\uffc8\001\002\000\026\003\uffca\006\uffca\007" +
    "\uffca\013\uffca\015\uffbc\016\uffbc\027\uffca\030\uffca\031\uffca" +
    "\107\uffca\001\002\000\104\003\126\005\uffa7\006\uffa7\007" +
    "\uffa7\012\uffa7\013\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\125\026\127\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\034\uffa7\037\uffa7\040\uffa7\043\uffa7\045\uffa7" +
    "\046\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\077" +
    "\uffa7\100\uffa7\107\uffa7\111\uffa7\001\002\000\030\003\uffbf" +
    "\006\uffbf\007\uffbf\013\uffbf\025\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\034\uffbf\042\uffbf\107\uffbf\001\002\000\034\003\uffc7" +
    "\006\uffc7\007\uffc7\017\103\020\104\021\110\022\105\023" +
    "\106\024\111\027\uffc7\030\uffc7\031\uffc7\107\uffc7\001\002" +
    "\000\104\003\uffa0\005\uffa0\006\uffa0\007\uffa0\012\uffa0\013" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\034" +
    "\uffa0\037\uffa0\040\uffa0\043\uffa0\045\uffa0\046\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\077\uffa0\100\uffa0\107" +
    "\uffa0\111\uffa0\001\002\000\026\003\uffc9\006\uffc9\007\uffc9" +
    "\013\uffc9\015\uffbb\016\uffbb\027\uffc9\030\uffc9\031\uffc9\107" +
    "\uffc9\001\002\000\020\003\uffc5\006\uffc5\007\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\107\uffc5\001\002\000\020\003\050\012" +
    "\046\047\037\050\044\107\047\110\041\111\034\001\002" +
    "\000\046\003\uffcc\006\uffcc\007\uffcc\013\uffcc\015\uffba\016" +
    "\uffba\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uffbe\026\uff9d\027\uffcc\030\uffcc\031\uffcc\107\uffcc\001" +
    "\002\000\046\003\uffc4\006\uffc4\007\uffc4\013\uffc4\015\uffb9" +
    "\016\uffb9\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024" +
    "\uffa1\025\067\026\070\027\uffc4\030\uffc4\031\uffc4\107\uffc4" +
    "\001\002\000\030\003\114\006\uffc3\007\uffc3\013\uffc3\025" +
    "\113\027\uffc3\030\uffc3\031\uffc3\034\uffc3\042\uffc3\107\uffc3" +
    "\001\002\000\020\003\uffd3\006\uffd3\007\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\107\uffd3\001\002\000\062\003\uffac\005\uffac" +
    "\006\uffac\007\uffac\013\uffac\015\055\016\054\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\037\uffac\040\uffac\043\uffac\045\uffac" +
    "\046\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\077" +
    "\uffac\100\uffac\107\uffac\001\002\000\016\003\uffb5\012\uffb5" +
    "\047\uffb5\050\uffb5\107\uffb5\111\uffb5\001\002\000\016\003" +
    "\uffb6\012\uffb6\047\uffb6\050\uffb6\107\uffb6\111\uffb6\001\002" +
    "\000\016\003\066\012\064\047\060\050\063\107\065\111" +
    "\057\001\002\000\104\003\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\012\uff9e\013\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\034\uff9e\037\uff9e\040\uff9e\043\uff9e\045\uff9e\046" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\077\uff9e" +
    "\100\uff9e\107\uff9e\111\uff9e\001\002\000\062\003\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\013\uffbc\015\uffbc\016\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\037\uffbc\040\uffbc\043\uffbc\045" +
    "\uffbc\046\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\077\uffbc\100\uffbc\107\uffbc\001\002\000\016\017\103\020" +
    "\104\021\110\022\105\023\106\024\111\001\002\000\056" +
    "\003\uffae\005\uffae\006\uffae\007\uffae\013\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\037\uffae\040\uffae\043\uffae\045\uffae" +
    "\046\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\077" +
    "\uffae\100\uffae\107\uffae\001\002\000\062\003\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\013\uffbb\015\uffbb\016\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\037\uffbb\040\uffbb\043\uffbb\045\uffbb" +
    "\046\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\077" +
    "\uffbb\100\uffbb\107\uffbb\001\002\000\016\003\066\012\064" +
    "\047\060\050\063\107\065\111\057\001\002\000\102\003" +
    "\uffba\005\uffba\006\uffba\007\uffba\013\uffba\015\uffba\016\uffba" +
    "\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uffba\030\uffba\031\uffba\032\uffba\037\uffba" +
    "\040\uffba\043\uffba\045\uffba\046\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\077\uffba\100\uffba\107\uffba\001\002" +
    "\000\102\003\uffb9\005\uffb9\006\uffb9\007\uffb9\013\uffb9\015" +
    "\uffb9\016\uffb9\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\067\026\070\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\037\uffb9\040\uffb9\043\uffb9\045\uffb9\046\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\077\uffb9\100\uffb9\107" +
    "\uffb9\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\104\003\uff9d\005\uff9d\006\uff9d\007\uff9d\012\uff9d" +
    "\013\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\034\uff9d\037\uff9d\040\uff9d\043\uff9d\045\uff9d\046\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\077\uff9d\100\uff9d" +
    "\107\uff9d\111\uff9d\001\002\000\104\003\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\012\uffa1\013\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\067\026\070\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\034\uffa1\037\uffa1\040\uffa1\043\uffa1" +
    "\045\uffa1\046\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\077\uffa1\100\uffa1\107\uffa1\111\uffa1\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\100\003" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\012\uffa3\013\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\037\uffa3\040\uffa3\043\uffa3" +
    "\045\uffa3\046\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\077\uffa3\100\uffa3\107\uffa3\111\uffa3\001\002\000\004" +
    "\013\076\001\002\000\104\003\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\012\uff9f\013\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\034\uff9f\037\uff9f\040\uff9f\043\uff9f\045\uff9f" +
    "\046\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\077" +
    "\uff9f\100\uff9f\107\uff9f\111\uff9f\001\002\000\100\003\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\012\uffa6\013\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\034\uffa6\037\uffa6\040\uffa6\043\uffa6\045" +
    "\uffa6\046\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\077\uffa6\100\uffa6\107\uffa6\111\uffa6\001\002\000\020\013" +
    "\076\017\103\020\104\021\110\022\105\023\106\024\111" +
    "\001\002\000\004\013\102\001\002\000\062\003\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\013\uffaa\015\uffaa\016\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\037\uffaa\040\uffaa\043\uffaa\045" +
    "\uffaa\046\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\077\uffaa\100\uffaa\107\uffaa\001\002\000\012\003\uffb4\012" +
    "\uffb4\107\uffb4\111\uffb4\001\002\000\012\003\uffb3\012\uffb3" +
    "\107\uffb3\111\uffb3\001\002\000\012\003\uffb1\012\uffb1\107" +
    "\uffb1\111\uffb1\001\002\000\012\003\uffb0\012\uffb0\107\uffb0" +
    "\111\uffb0\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\012\003\uffb2\012\uffb2\107\uffb2\111\uffb2" +
    "\001\002\000\012\003\uffaf\012\uffaf\107\uffaf\111\uffaf\001" +
    "\002\000\056\003\uffad\005\uffad\006\uffad\007\uffad\013\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\037\uffad\040\uffad\043" +
    "\uffad\045\uffad\046\uffad\051\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\077\uffad\100\uffad\107\uffad\001\002\000\010\003" +
    "\116\107\115\110\041\001\002\000\010\003\116\107\115" +
    "\110\041\001\002\000\030\003\uffbe\006\uffbe\007\uffbe\013" +
    "\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\034\uffbe\042\uffbe" +
    "\107\uffbe\001\002\000\030\003\uffc1\006\uffc1\007\uffc1\013" +
    "\uffc1\025\uffbd\027\uffc1\030\uffc1\031\uffc1\034\uffc1\042\uffc1" +
    "\107\uffc1\001\002\000\026\003\uffc0\006\uffc0\007\uffc0\013" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\034\uffc0\042\uffc0\107\uffc0" +
    "\001\002\000\026\003\uffc2\006\uffc2\007\uffc2\013\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\034\uffc2\042\uffc2\107\uffc2\001\002" +
    "\000\020\013\076\017\103\020\104\021\110\022\105\023" +
    "\106\024\111\001\002\000\004\013\102\001\002\000\004" +
    "\013\124\001\002\000\022\003\uffc6\006\uffc6\007\uffc6\013" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\107\uffc6\001\002\000\012" +
    "\003\133\012\073\107\071\111\057\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\012\003\130" +
    "\012\073\107\071\111\057\001\002\000\104\003\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\012\uffa2\013\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\067\026\070\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\037\uffa2\040\uffa2" +
    "\043\uffa2\045\uffa2\046\uffa2\051\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\077\uffa2\100\uffa2\107\uffa2\111\uffa2\001\002" +
    "\000\100\003\uffa9\005\uffa9\006\uffa9\007\uffa9\012\uffa9\013" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9\037\uffa9\040" +
    "\uffa9\043\uffa9\045\uffa9\046\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\077\uffa9\100\uffa9\107\uffa9\111\uffa9\001" +
    "\002\000\100\003\uffa5\005\uffa5\006\uffa5\007\uffa5\012\uffa5" +
    "\013\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\037\uffa5" +
    "\040\uffa5\043\uffa5\045\uffa5\046\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\077\uffa5\100\uffa5\107\uffa5\111\uffa5" +
    "\001\002\000\104\003\uffa4\005\uffa4\006\uffa4\007\uffa4\012" +
    "\uffa4\013\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\067\026\070\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\034\uffa4\037\uffa4\040\uffa4\043\uffa4\045\uffa4\046\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\077\uffa4\100" +
    "\uffa4\107\uffa4\111\uffa4\001\002\000\100\003\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\012\uffa8\013\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\034\uffa8\037\uffa8\040\uffa8\043\uffa8\045\uffa8\046" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\077\uffa8" +
    "\100\uffa8\107\uffa8\111\uffa8\001\002\000\020\003\050\012" +
    "\046\047\037\050\044\107\047\110\041\111\034\001\002" +
    "\000\020\003\137\012\046\047\037\050\044\107\047\110" +
    "\041\111\034\001\002\000\044\003\uffd1\006\uffd1\007\uffd1" +
    "\015\uffb9\016\uffb9\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\067\026\070\027\uffd1\030\uffd1\031\uffd1" +
    "\107\uffd1\001\002\000\020\003\uffd4\006\uffd4\007\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\107\uffd4\001\002\000\020\003\uffd2" +
    "\006\uffd2\007\uffd2\027\uffd2\030\uffd2\031\uffd2\107\uffd2\001" +
    "\002\000\010\003\uffe4\005\uffe4\010\uffe4\001\002\000\010" +
    "\003\uffea\005\uffea\010\uffea\001\002\000\020\003\uff9b\006" +
    "\uff9b\007\uff9b\027\uff9b\030\uff9b\031\uff9b\107\uff9b\001\002" +
    "\000\056\002\uff9c\003\135\006\uff9c\007\uff9c\011\136\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\037\uff9c\040\uff9c\043\uff9c" +
    "\045\uff9c\046\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\077\uff9c\100\uff9c\107\uff9c\001\002\000\022\003\uff9a" +
    "\006\uff9a\007\155\011\033\027\uff9a\030\uff9a\031\uff9a\107" +
    "\uff9a\001\002\000\020\003\152\006\015\007\150\027\024" +
    "\030\021\031\014\107\020\001\002\000\016\003\022\006" +
    "\015\027\024\030\021\031\014\107\020\001\002\000\010" +
    "\003\uffe7\005\uffe7\010\uffe7\001\002\000\026\003\022\005" +
    "\uffe5\006\015\007\030\010\uffe5\011\033\027\024\030\021" +
    "\031\014\107\032\001\002\000\010\003\uffe1\005\uffe1\010" +
    "\uffe1\001\002\000\010\003\uffe8\005\uffe8\010\uffe8\001\002" +
    "\000\016\003\022\006\015\027\024\030\021\031\014\107" +
    "\020\001\002\000\010\003\uffe2\005\uffe2\010\uffe2\001\002" +
    "\000\004\010\160\001\002\000\004\005\161\001\002\000" +
    "\046\003\212\027\024\030\021\031\014\032\205\037\226" +
    "\040\177\043\203\045\202\046\216\051\211\052\217\053" +
    "\215\054\167\055\201\077\207\100\176\107\020\001\002" +
    "\000\052\002\uff36\003\uff36\006\uff36\027\uff36\030\uff36\031" +
    "\uff36\032\uff36\037\uff36\040\uff36\043\uff36\045\uff36\046\uff36" +
    "\051\uff36\052\uff36\053\uff36\054\uff36\055\uff36\077\uff36\100" +
    "\uff36\107\uff36\001\002\000\006\003\u0656\007\u0657\001\002" +
    "\000\052\002\uff37\003\uff37\006\uff37\027\uff37\030\uff37\031" +
    "\uff37\032\uff37\037\uff37\040\uff37\043\uff37\045\uff37\046\uff37" +
    "\051\uff37\052\uff37\053\uff37\054\uff37\055\uff37\077\uff37\100" +
    "\uff37\107\uff37\001\002\000\052\002\uff3a\003\uff3a\006\uff3a" +
    "\027\uff3a\030\uff3a\031\uff3a\032\uff3a\037\uff3a\040\uff3a\043" +
    "\uff3a\045\uff3a\046\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a" +
    "\055\uff3a\077\uff3a\100\uff3a\107\uff3a\001\002\000\052\002" +
    "\uff1a\003\uff1a\006\uff1a\027\uff1a\030\uff1a\031\uff1a\032\uff1a" +
    "\037\uff1a\040\uff1a\043\uff1a\045\uff1a\046\uff1a\051\uff1a\052" +
    "\uff1a\053\uff1a\054\uff1a\055\uff1a\077\uff1a\100\uff1a\107\uff1a" +
    "\001\002\000\006\003\u063b\012\u063c\001\002\000\052\002" +
    "\ufeb8\003\ufeb8\006\ufeb8\027\ufeb8\030\ufeb8\031\ufeb8\032\ufeb8" +
    "\037\ufeb8\040\ufeb8\043\ufeb8\045\ufeb8\046\ufeb8\051\ufeb8\052" +
    "\ufeb8\053\ufeb8\054\ufeb8\055\ufeb8\077\ufeb8\100\ufeb8\107\ufeb8" +
    "\001\002\000\006\002\ufff9\006\u063a\001\002\000\052\002" +
    "\uff26\003\uff26\006\uff26\027\uff26\030\uff26\031\uff26\032\uff26" +
    "\037\uff26\040\uff26\043\uff26\045\uff26\046\uff26\051\uff26\052" +
    "\uff26\053\uff26\054\uff26\055\uff26\077\uff26\100\uff26\107\uff26" +
    "\001\002\000\052\002\uff3b\003\uff3b\006\uff3b\027\uff3b\030" +
    "\uff3b\031\uff3b\032\uff3b\037\uff3b\040\uff3b\043\uff3b\045\uff3b" +
    "\046\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\055\uff3b\077" +
    "\uff3b\100\uff3b\107\uff3b\001\002\000\052\002\uff38\003\uff38" +
    "\006\uff38\027\uff38\030\uff38\031\uff38\032\uff38\037\uff38\040" +
    "\uff38\043\uff38\045\uff38\046\uff38\051\uff38\052\uff38\053\uff38" +
    "\054\uff38\055\uff38\077\uff38\100\uff38\107\uff38\001\002\000" +
    "\006\003\u0635\107\145\001\002\000\006\003\u0627\012\u0628" +
    "\001\002\000\006\003\u028a\107\u0289\001\002\000\052\002" +
    "\uff25\003\uff25\006\uff25\027\uff25\030\uff25\031\uff25\032\uff25" +
    "\037\uff25\040\uff25\043\uff25\045\uff25\046\uff25\051\uff25\052" +
    "\uff25\053\uff25\054\uff25\055\uff25\077\uff25\100\uff25\107\uff25" +
    "\001\002\000\006\003\u01fa\012\u01fb\001\002\000\016\003" +
    "\u01e9\012\u01e8\047\060\050\063\107\065\111\057\001\002" +
    "\000\006\003\u01c9\012\u01ca\001\002\000\052\002\uff07\003" +
    "\uff07\006\uff07\027\uff07\030\uff07\031\uff07\032\uff07\037\uff07" +
    "\040\uff07\043\uff07\045\uff07\046\uff07\051\uff07\052\uff07\053" +
    "\uff07\054\uff07\055\uff07\077\uff07\100\uff07\107\uff07\001\002" +
    "\000\006\003\u016e\107\u016d\001\002\000\052\002\uff98\003" +
    "\uff98\006\uff98\027\uff98\030\uff98\031\uff98\032\uff98\037\uff98" +
    "\040\uff98\043\uff98\045\uff98\046\uff98\051\uff98\052\uff98\053" +
    "\uff98\054\uff98\055\uff98\077\uff98\100\uff98\107\uff98\001\002" +
    "\000\006\003\u014a\107\u0149\001\002\000\052\002\uff08\003" +
    "\uff08\006\uff08\027\uff08\030\uff08\031\uff08\032\uff08\037\uff08" +
    "\040\uff08\043\uff08\045\uff08\046\uff08\051\uff08\052\uff08\053" +
    "\uff08\054\uff08\055\uff08\077\uff08\100\uff08\107\uff08\001\002" +
    "\000\006\003\u013a\012\u013b\001\002\000\056\002\uff95\003" +
    "\uffcd\006\uff95\007\365\011\033\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\037\uff95\040\uff95\043\uff95\045\uff95\046\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\055\uff95\077\uff95\100\uff95" +
    "\107\364\001\002\000\052\002\uff99\003\uff99\006\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\037\uff99\040\uff99\043\uff99" +
    "\045\uff99\046\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055" +
    "\uff99\077\uff99\100\uff99\107\uff99\001\002\000\052\002\ufeb7" +
    "\003\ufeb7\006\ufeb7\027\ufeb7\030\ufeb7\031\ufeb7\032\ufeb7\037" +
    "\ufeb7\040\ufeb7\043\ufeb7\045\ufeb7\046\ufeb7\051\ufeb7\052\ufeb7" +
    "\053\ufeb7\054\ufeb7\055\ufeb7\077\ufeb7\100\ufeb7\107\ufeb7\001" +
    "\002\000\006\003\u012c\012\u012d\001\002\000\006\003\u011e" +
    "\012\u011f\001\002\000\006\003\u0110\012\u0111\001\002\000" +
    "\052\002\uff18\003\uff18\006\uff18\027\uff18\030\uff18\031\uff18" +
    "\032\uff18\037\uff18\040\uff18\043\uff18\045\uff18\046\uff18\051" +
    "\uff18\052\uff18\053\uff18\054\uff18\055\uff18\077\uff18\100\uff18" +
    "\107\uff18\001\002\000\054\002\uffdd\003\u010e\006\uffdd\007" +
    "\u010f\027\uffdd\030\uffdd\031\uffdd\032\uffdd\037\uffdd\040\uffdd" +
    "\043\uffdd\045\uffdd\046\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\077\uffdd\100\uffdd\107\uffdd\001\002\000\052" +
    "\002\uff43\003\363\006\uff43\027\024\030\021\031\014\032" +
    "\205\037\226\040\177\043\203\045\202\046\216\051\211" +
    "\052\217\053\215\054\167\055\201\077\207\100\176\107" +
    "\020\001\002\000\052\002\uff19\003\uff19\006\uff19\027\uff19" +
    "\030\uff19\031\uff19\032\uff19\037\uff19\040\uff19\043\uff19\045" +
    "\uff19\046\uff19\051\uff19\052\uff19\053\uff19\054\uff19\055\uff19" +
    "\077\uff19\100\uff19\107\uff19\001\002\000\052\002\uff96\003" +
    "\uff96\006\uff96\027\uff96\030\uff96\031\uff96\032\uff96\037\uff96" +
    "\040\uff96\043\uff96\045\uff96\046\uff96\051\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\077\uff96\100\uff96\107\uff96\001\002" +
    "\000\052\002\uff39\003\uff39\006\uff39\027\uff39\030\uff39\031" +
    "\uff39\032\uff39\037\uff39\040\uff39\043\uff39\045\uff39\046\uff39" +
    "\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\077\uff39\100" +
    "\uff39\107\uff39\001\002\000\006\003\231\107\230\001\002" +
    "\000\052\002\uff97\003\uff97\006\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\037\uff97\040\uff97\043\uff97\045\uff97\046\uff97" +
    "\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\077\uff97\100" +
    "\uff97\107\uff97\001\002\000\006\003\245\011\246\001\002" +
    "\000\004\011\232\001\002\000\004\033\233\001\002\000" +
    "\004\037\234\001\002\000\004\012\235\001\002\000\004" +
    "\107\236\001\002\000\004\034\237\001\002\000\010\003" +
    "\116\107\115\110\041\001\002\000\004\034\241\001\002" +
    "\000\010\003\116\107\115\110\041\001\002\000\004\013" +
    "\243\001\002\000\004\007\244\001\002\000\052\002\uff92" +
    "\003\uff92\006\uff92\027\uff92\030\uff92\031\uff92\032\uff92\037" +
    "\uff92\040\uff92\043\uff92\045\uff92\046\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\077\uff92\100\uff92\107\uff92\001" +
    "\002\000\004\033\350\001\002\000\006\003\250\033\247" +
    "\001\002\000\006\003\263\037\262\001\002\000\004\037" +
    "\251\001\002\000\004\012\252\001\002\000\004\107\253" +
    "\001\002\000\004\034\254\001\002\000\010\003\116\107" +
    "\115\110\041\001\002\000\004\034\256\001\002\000\010" +
    "\003\116\107\115\110\041\001\002\000\004\013\260\001" +
    "\002\000\004\007\261\001\002\000\052\002\uff90\003\uff90" +
    "\006\uff90\027\uff90\030\uff90\031\uff90\032\uff90\037\uff90\040" +
    "\uff90\043\uff90\045\uff90\046\uff90\051\uff90\052\uff90\053\uff90" +
    "\054\uff90\055\uff90\077\uff90\100\uff90\107\uff90\001\002\000" +
    "\006\003\274\012\275\001\002\000\004\012\264\001\002" +
    "\000\004\107\265\001\002\000\004\034\266\001\002\000" +
    "\010\003\116\107\115\110\041\001\002\000\004\034\270" +
    "\001\002\000\010\003\116\107\115\110\041\001\002\000" +
    "\004\013\272\001\002\000\004\007\273\001\002\000\052" +
    "\002\uff8f\003\uff8f\006\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\037\uff8f\040\uff8f\043\uff8f\045\uff8f\046\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\077\uff8f\100\uff8f\107" +
    "\uff8f\001\002\000\004\107\341\001\002\000\006\003\277" +
    "\107\276\001\002\000\006\003\306\034\307\001\002\000" +
    "\004\034\300\001\002\000\010\003\116\107\115\110\041" +
    "\001\002\000\004\034\302\001\002\000\010\003\116\107" +
    "\115\110\041\001\002\000\004\013\304\001\002\000\004" +
    "\007\305\001\002\000\052\002\uff8d\003\uff8d\006\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\037\uff8d\040\uff8d\043\uff8d" +
    "\045\uff8d\046\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055" +
    "\uff8d\077\uff8d\100\uff8d\107\uff8d\001\002\000\010\003\116" +
    "\107\115\110\041\001\002\000\010\003\310\107\115\110" +
    "\041\001\002\000\010\003\uffc1\025\uffbd\034\330\001\002" +
    "\000\006\003\312\034\313\001\002\000\010\003\116\107" +
    "\115\110\041\001\002\000\010\003\314\107\115\110\041" +
    "\001\002\000\010\003\uffc1\013\323\025\uffbd\001\002\000" +
    "\006\003\316\013\317\001\002\000\004\007\322\001\002" +
    "\000\006\003\320\007\321\001\002\000\052\002\uff87\003" +
    "\uff87\006\uff87\027\uff87\030\uff87\031\uff87\032\uff87\037\uff87" +
    "\040\uff87\043\uff87\045\uff87\046\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\077\uff87\100\uff87\107\uff87\001\002" +
    "\000\052\002\uff94\003\uff94\006\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\037\uff94\040\uff94\043\uff94\045\uff94\046\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\077\uff94\100" +
    "\uff94\107\uff94\001\002\000\052\002\uff88\003\uff88\006\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\037\uff88\040\uff88\043" +
    "\uff88\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\055\uff88\077\uff88\100\uff88\107\uff88\001\002\000\004\007" +
    "\324\001\002\000\052\002\uff89\003\uff89\006\uff89\027\uff89" +
    "\030\uff89\031\uff89\032\uff89\037\uff89\040\uff89\043\uff89\045" +
    "\uff89\046\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89" +
    "\077\uff89\100\uff89\107\uff89\001\002\000\004\013\326\001" +
    "\002\000\004\007\327\001\002\000\052\002\uff8a\003\uff8a" +
    "\006\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\037\uff8a\040" +
    "\uff8a\043\uff8a\045\uff8a\046\uff8a\051\uff8a\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\077\uff8a\100\uff8a\107\uff8a\001\002\000" +
    "\010\003\116\107\115\110\041\001\002\000\004\013\332" +
    "\001\002\000\004\007\333\001\002\000\052\002\uff8b\003" +
    "\uff8b\006\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\037\uff8b" +
    "\040\uff8b\043\uff8b\045\uff8b\046\uff8b\051\uff8b\052\uff8b\053" +
    "\uff8b\054\uff8b\055\uff8b\077\uff8b\100\uff8b\107\uff8b\001\002" +
    "\000\004\034\335\001\002\000\010\003\116\107\115\110" +
    "\041\001\002\000\004\013\337\001\002\000\004\007\340" +
    "\001\002\000\052\002\uff8c\003\uff8c\006\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\037\uff8c\040\uff8c\043\uff8c\045\uff8c" +
    "\046\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\077" +
    "\uff8c\100\uff8c\107\uff8c\001\002\000\004\034\342\001\002" +
    "\000\010\003\116\107\115\110\041\001\002\000\004\034" +
    "\344\001\002\000\010\003\116\107\115\110\041\001\002" +
    "\000\004\013\346\001\002\000\004\007\347\001\002\000" +
    "\052\002\uff8e\003\uff8e\006\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\032\uff8e\037\uff8e\040\uff8e\043\uff8e\045\uff8e\046\uff8e\051" +
    "\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\077\uff8e\100\uff8e" +
    "\107\uff8e\001\002\000\004\037\351\001\002\000\004\012" +
    "\352\001\002\000\004\107\353\001\002\000\004\034\354" +
    "\001\002\000\010\003\116\107\115\110\041\001\002\000" +
    "\004\034\356\001\002\000\010\003\116\107\115\110\041" +
    "\001\002\000\004\013\360\001\002\000\004\007\361\001" +
    "\002\000\052\002\uff91\003\uff91\006\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\037\uff91\040\uff91\043\uff91\045\uff91\046" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\077\uff91" +
    "\100\uff91\107\uff91\001\002\000\006\002\uff42\006\uff42\001" +
    "\002\000\056\002\uff95\003\uffcd\006\uff95\007\365\011\033" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\037\uff95\040\uff95\043" +
    "\uff95\045\uff95\046\uff95\051\uff95\052\uff95\053\uff95\054\uff95" +
    "\055\uff95\077\uff95\100\uff95\107\364\001\002\000\056\002" +
    "\uff9b\003\uff9b\006\uff9b\007\uff9b\011\366\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\037\uff9b\040\uff9b\043\uff9b\045\uff9b\046" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\077\uff9b" +
    "\100\uff9b\107\uff9b\001\002\000\052\002\uffda\003\uffda\006" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\037\uffda\040\uffda" +
    "\043\uffda\045\uffda\046\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\077\uffda\100\uffda\107\uffda\001\002\000\004" +
    "\033\367\001\002\000\006\037\370\041\371\001\002\000" +
    "\004\012\u0106\001\002\000\010\003\374\107\115\110\041" +
    "\001\002\000\004\042\u0104\001\002\000\012\003\377\007" +
    "\uff7c\034\u0100\042\uff7c\001\002\000\014\003\uffc1\007\uffc1" +
    "\025\uffbd\034\375\042\uffc1\001\002\000\010\003\374\107" +
    "\115\110\041\001\002\000\010\003\uff79\007\uff79\042\uff79" +
    "\001\002\000\010\003\374\107\115\110\041\001\002\000" +
    "\010\003\u0102\107\115\110\041\001\002\000\010\003\uff7b" +
    "\007\uff7b\042\uff7b\001\002\000\014\003\uffc1\007\uffc1\025" +
    "\uffbd\034\375\042\uffc1\001\002\000\010\003\uff78\007\uff78" +
    "\042\uff78\001\002\000\004\007\u0105\001\002\000\052\002" +
    "\uff84\003\uff84\006\uff84\027\uff84\030\uff84\031\uff84\032\uff84" +
    "\037\uff84\040\uff84\043\uff84\045\uff84\046\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\055\uff84\077\uff84\100\uff84\107\uff84" +
    "\001\002\000\004\107\u0107\001\002\000\004\034\u0108\001" +
    "\002\000\010\003\116\107\115\110\041\001\002\000\004" +
    "\034\u010a\001\002\000\010\003\116\107\115\110\041\001" +
    "\002\000\004\013\u010c\001\002\000\004\007\u010d\001\002" +
    "\000\052\002\uff93\003\uff93\006\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\037\uff93\040\uff93\043\uff93\045\uff93\046\uff93" +
    "\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\077\uff93\100" +
    "\uff93\107\uff93\001\002\000\052\002\uffd9\003\uffd9\006\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\037\uffd9\040\uffd9\043" +
    "\uffd9\045\uffd9\046\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\077\uffd9\100\uffd9\107\uffd9\001\002\000\052\002" +
    "\uffde\003\uffde\006\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\037\uffde\040\uffde\043\uffde\045\uffde\046\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\077\uffde\100\uffde\107\uffde" +
    "\001\002\000\004\107\u011b\001\002\000\006\003\u0113\107" +
    "\u0112\001\002\000\006\003\u0116\013\u0117\001\002\000\004" +
    "\013\u0114\001\002\000\004\007\u0115\001\002\000\052\002" +
    "\uff10\003\uff10\006\uff10\027\uff10\030\uff10\031\uff10\032\uff10" +
    "\037\uff10\040\uff10\043\uff10\045\uff10\046\uff10\051\uff10\052" +
    "\uff10\053\uff10\054\uff10\055\uff10\077\uff10\100\uff10\107\uff10" +
    "\001\002\000\004\007\u011a\001\002\000\006\003\u0118\007" +
    "\u0119\001\002\000\052\002\uff0e\003\uff0e\006\uff0e\027\uff0e" +
    "\030\uff0e\031\uff0e\032\uff0e\037\uff0e\040\uff0e\043\uff0e\045" +
    "\uff0e\046\uff0e\051\uff0e\052\uff0e\053\uff0e\054\uff0e\055\uff0e" +
    "\077\uff0e\100\uff0e\107\uff0e\001\002\000\052\002\uff12\003" +
    "\uff12\006\uff12\027\uff12\030\uff12\031\uff12\032\uff12\037\uff12" +
    "\040\uff12\043\uff12\045\uff12\046\uff12\051\uff12\052\uff12\053" +
    "\uff12\054\uff12\055\uff12\077\uff12\100\uff12\107\uff12\001\002" +
    "\000\052\002\uff0f\003\uff0f\006\uff0f\027\uff0f\030\uff0f\031" +
    "\uff0f\032\uff0f\037\uff0f\040\uff0f\043\uff0f\045\uff0f\046\uff0f" +
    "\051\uff0f\052\uff0f\053\uff0f\054\uff0f\055\uff0f\077\uff0f\100" +
    "\uff0f\107\uff0f\001\002\000\004\013\u011c\001\002\000\004" +
    "\007\u011d\001\002\000\052\002\uff11\003\uff11\006\uff11\027" +
    "\uff11\030\uff11\031\uff11\032\uff11\037\uff11\040\uff11\043\uff11" +
    "\045\uff11\046\uff11\051\uff11\052\uff11\053\uff11\054\uff11\055" +
    "\uff11\077\uff11\100\uff11\107\uff11\001\002\000\004\107\u0129" +
    "\001\002\000\006\003\u0121\107\u0120\001\002\000\006\003" +
    "\u0124\013\u0125\001\002\000\004\013\u0122\001\002\000\004" +
    "\007\u0123\001\002\000\052\002\uff22\003\uff22\006\uff22\027" +
    "\uff22\030\uff22\031\uff22\032\uff22\037\uff22\040\uff22\043\uff22" +
    "\045\uff22\046\uff22\051\uff22\052\uff22\053\uff22\054\uff22\055" +
    "\uff22\077\uff22\100\uff22\107\uff22\001\002\000\004\007\u0128" +
    "\001\002\000\006\003\u0126\007\u0127\001\002\000\052\002" +
    "\uff20\003\uff20\006\uff20\027\uff20\030\uff20\031\uff20\032\uff20" +
    "\037\uff20\040\uff20\043\uff20\045\uff20\046\uff20\051\uff20\052" +
    "\uff20\053\uff20\054\uff20\055\uff20\077\uff20\100\uff20\107\uff20" +
    "\001\002\000\052\002\uff24\003\uff24\006\uff24\027\uff24\030" +
    "\uff24\031\uff24\032\uff24\037\uff24\040\uff24\043\uff24\045\uff24" +
    "\046\uff24\051\uff24\052\uff24\053\uff24\054\uff24\055\uff24\077" +
    "\uff24\100\uff24\107\uff24\001\002\000\052\002\uff21\003\uff21" +
    "\006\uff21\027\uff21\030\uff21\031\uff21\032\uff21\037\uff21\040" +
    "\uff21\043\uff21\045\uff21\046\uff21\051\uff21\052\uff21\053\uff21" +
    "\054\uff21\055\uff21\077\uff21\100\uff21\107\uff21\001\002\000" +
    "\004\013\u012a\001\002\000\004\007\u012b\001\002\000\052" +
    "\002\uff23\003\uff23\006\uff23\027\uff23\030\uff23\031\uff23\032" +
    "\uff23\037\uff23\040\uff23\043\uff23\045\uff23\046\uff23\051\uff23" +
    "\052\uff23\053\uff23\054\uff23\055\uff23\077\uff23\100\uff23\107" +
    "\uff23\001\002\000\004\107\u0137\001\002\000\006\003\u012f" +
    "\107\u012e\001\002\000\006\003\u0132\013\u0133\001\002\000" +
    "\004\013\u0130\001\002\000\004\007\u0131\001\002\000\052" +
    "\002\uff0b\003\uff0b\006\uff0b\027\uff0b\030\uff0b\031\uff0b\032" +
    "\uff0b\037\uff0b\040\uff0b\043\uff0b\045\uff0b\046\uff0b\051\uff0b" +
    "\052\uff0b\053\uff0b\054\uff0b\055\uff0b\077\uff0b\100\uff0b\107" +
    "\uff0b\001\002\000\004\007\u0136\001\002\000\006\003\u0134" +
    "\007\u0135\001\002\000\052\002\uff09\003\uff09\006\uff09\027" +
    "\uff09\030\uff09\031\uff09\032\uff09\037\uff09\040\uff09\043\uff09" +
    "\045\uff09\046\uff09\051\uff09\052\uff09\053\uff09\054\uff09\055" +
    "\uff09\077\uff09\100\uff09\107\uff09\001\002\000\052\002\uff0d" +
    "\003\uff0d\006\uff0d\027\uff0d\030\uff0d\031\uff0d\032\uff0d\037" +
    "\uff0d\040\uff0d\043\uff0d\045\uff0d\046\uff0d\051\uff0d\052\uff0d" +
    "\053\uff0d\054\uff0d\055\uff0d\077\uff0d\100\uff0d\107\uff0d\001" +
    "\002\000\052\002\uff0a\003\uff0a\006\uff0a\027\uff0a\030\uff0a" +
    "\031\uff0a\032\uff0a\037\uff0a\040\uff0a\043\uff0a\045\uff0a\046" +
    "\uff0a\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\077\uff0a" +
    "\100\uff0a\107\uff0a\001\002\000\004\013\u0138\001\002\000" +
    "\004\007\u0139\001\002\000\052\002\uff0c\003\uff0c\006\uff0c" +
    "\027\uff0c\030\uff0c\031\uff0c\032\uff0c\037\uff0c\040\uff0c\043" +
    "\uff0c\045\uff0c\046\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c" +
    "\055\uff0c\077\uff0c\100\uff0c\107\uff0c\001\002\000\004\107" +
    "\u0146\001\002\000\006\003\u013d\107\u013c\001\002\000\006" +
    "\003\u0140\013\u0141\001\002\000\004\013\u013e\001\002\000" +
    "\004\007\u013f\001\002\000\052\002\uff1d\003\uff1d\006\uff1d" +
    "\027\uff1d\030\uff1d\031\uff1d\032\uff1d\037\uff1d\040\uff1d\043" +
    "\uff1d\045\uff1d\046\uff1d\051\uff1d\052\uff1d\053\uff1d\054\uff1d" +
    "\055\uff1d\077\uff1d\100\uff1d\107\uff1d\001\002\000\004\007" +
    "\u0145\001\002\000\006\003\u0142\007\u0143\001\002\000\004" +
    "\007\u0144\001\002\000\052\002\uff1f\003\uff1f\006\uff1f\027" +
    "\uff1f\030\uff1f\031\uff1f\032\uff1f\037\uff1f\040\uff1f\043\uff1f" +
    "\045\uff1f\046\uff1f\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055" +
    "\uff1f\077\uff1f\100\uff1f\107\uff1f\001\002\000\052\002\uff1b" +
    "\003\uff1b\006\uff1b\027\uff1b\030\uff1b\031\uff1b\032\uff1b\037" +
    "\uff1b\040\uff1b\043\uff1b\045\uff1b\046\uff1b\051\uff1b\052\uff1b" +
    "\053\uff1b\054\uff1b\055\uff1b\077\uff1b\100\uff1b\107\uff1b\001" +
    "\002\000\052\002\uff1c\003\uff1c\006\uff1c\027\uff1c\030\uff1c" +
    "\031\uff1c\032\uff1c\037\uff1c\040\uff1c\043\uff1c\045\uff1c\046" +
    "\uff1c\051\uff1c\052\uff1c\053\uff1c\054\uff1c\055\uff1c\077\uff1c" +
    "\100\uff1c\107\uff1c\001\002\000\004\013\u0147\001\002\000" +
    "\004\007\u0148\001\002\000\052\002\uff1e\003\uff1e\006\uff1e" +
    "\027\uff1e\030\uff1e\031\uff1e\032\uff1e\037\uff1e\040\uff1e\043" +
    "\uff1e\045\uff1e\046\uff1e\051\uff1e\052\uff1e\053\uff1e\054\uff1e" +
    "\055\uff1e\077\uff1e\100\uff1e\107\uff1e\001\002\000\006\003" +
    "\u0151\011\u0152\001\002\000\004\011\u014b\001\002\000\004" +
    "\033\u014c\001\002\000\004\041\u014d\001\002\000\010\003" +
    "\374\107\115\110\041\001\002\000\004\042\u014f\001\002" +
    "\000\004\007\u0150\001\002\000\052\002\uff83\003\uff83\006" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\037\uff83\040\uff83" +
    "\043\uff83\045\uff83\046\uff83\051\uff83\052\uff83\053\uff83\054" +
    "\uff83\055\uff83\077\uff83\100\uff83\107\uff83\001\002\000\004" +
    "\033\u0168\001\002\000\006\003\u0154\033\u0153\001\002\000" +
    "\006\003\u0159\041\u015a\001\002\000\004\041\u0155\001\002" +
    "\000\010\003\374\107\115\110\041\001\002\000\004\042" +
    "\u0157\001\002\000\004\007\u0158\001\002\000\052\002\uff81" +
    "\003\uff81\006\uff81\027\uff81\030\uff81\031\uff81\032\uff81\037" +
    "\uff81\040\uff81\043\uff81\045\uff81\046\uff81\051\uff81\052\uff81" +
    "\053\uff81\054\uff81\055\uff81\077\uff81\100\uff81\107\uff81\001" +
    "\002\000\010\003\374\107\115\110\041\001\002\000\010" +
    "\003\u015c\107\115\110\041\001\002\000\010\003\u015f\007" +
    "\u0161\042\u0160\001\002\000\014\003\uffc1\007\uffc1\025\uffbd" +
    "\034\375\042\u015d\001\002\000\004\007\u015e\001\002\000" +
    "\052\002\uff7f\003\uff7f\006\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\037\uff7f\040\uff7f\043\uff7f\045\uff7f\046\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\077\uff7f\100\uff7f" +
    "\107\uff7f\001\002\000\004\007\u0164\001\002\000\006\003" +
    "\u0162\007\u0163\001\002\000\052\002\uff85\003\uff85\006\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\037\uff85\040\uff85\043" +
    "\uff85\045\uff85\046\uff85\051\uff85\052\uff85\053\uff85\054\uff85" +
    "\055\uff85\077\uff85\100\uff85\107\uff85\001\002\000\052\002" +
    "\uff7d\003\uff7d\006\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d" +
    "\037\uff7d\040\uff7d\043\uff7d\045\uff7d\046\uff7d\051\uff7d\052" +
    "\uff7d\053\uff7d\054\uff7d\055\uff7d\077\uff7d\100\uff7d\107\uff7d" +
    "\001\002\000\052\002\uff86\003\uff86\006\uff86\027\uff86\030" +
    "\uff86\031\uff86\032\uff86\037\uff86\040\uff86\043\uff86\045\uff86" +
    "\046\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86\077" +
    "\uff86\100\uff86\107\uff86\001\002\000\052\002\uff7e\003\uff7e" +
    "\006\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\037\uff7e\040" +
    "\uff7e\043\uff7e\045\uff7e\046\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\054\uff7e\055\uff7e\077\uff7e\100\uff7e\107\uff7e\001\002\000" +
    "\004\042\u0166\001\002\000\004\007\u0167\001\002\000\052" +
    "\002\uff80\003\uff80\006\uff80\027\uff80\030\uff80\031\uff80\032" +
    "\uff80\037\uff80\040\uff80\043\uff80\045\uff80\046\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\077\uff80\100\uff80\107" +
    "\uff80\001\002\000\004\041\u0169\001\002\000\010\003\374" +
    "\107\115\110\041\001\002\000\004\042\u016b\001\002\000" +
    "\004\007\u016c\001\002\000\052\002\uff82\003\uff82\006\uff82" +
    "\027\uff82\030\uff82\031\uff82\032\uff82\037\uff82\040\uff82\043" +
    "\uff82\045\uff82\046\uff82\051\uff82\052\uff82\053\uff82\054\uff82" +
    "\055\uff82\077\uff82\100\uff82\107\uff82\001\002\000\006\003" +
    "\u017c\011\u017d\001\002\000\004\011\u016f\001\002\000\004" +
    "\033\u0170\001\002\000\004\032\u0171\001\002\000\004\012" +
    "\u0172\001\002\000\004\107\u0173\001\002\000\004\034\u0174" +
    "\001\002\000\006\035\u0177\036\u0175\001\002\000\006\003" +
    "\uff27\034\uff27\001\002\000\004\034\u0178\001\002\000\006" +
    "\003\uff28\034\uff28\001\002\000\004\107\u0179\001\002\000" +
    "\004\013\u017a\001\002\000\004\007\u017b\001\002\000\052" +
    "\002\uff34\003\uff34\006\uff34\027\uff34\030\uff34\031\uff34\032" +
    "\uff34\037\uff34\040\uff34\043\uff34\045\uff34\046\uff34\051\uff34" +
    "\052\uff34\053\uff34\054\uff34\055\uff34\077\uff34\100\uff34\107" +
    "\uff34\001\002\000\004\033\u01bf\001\002\000\006\003\u017f" +
    "\033\u017e\001\002\000\006\003\u0189\032\u018a\001\002\000" +
    "\004\032\u0180\001\002\000\004\012\u0181\001\002\000\004" +
    "\107\u0182\001\002\000\004\034\u0183\001\002\000\006\035" +
    "\u0177\036\u0175\001\002\000\004\034\u0185\001\002\000\004" +
    "\107\u0186\001\002\000\004\013\u0187\001\002\000\004\007" +
    "\u0188\001\002\000\052\002\uff32\003\uff32\006\uff32\027\uff32" +
    "\030\uff32\031\uff32\032\uff32\037\uff32\040\uff32\043\uff32\045" +
    "\uff32\046\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32" +
    "\077\uff32\100\uff32\107\uff32\001\002\000\004\012\u01b7\001" +
    "\002\000\006\003\u018b\012\u018c\001\002\000\004\107\u01b0" +
    "\001\002\000\006\003\u018e\107\u018d\001\002\000\006\003" +
    "\u0195\034\u0196\001\002\000\004\034\u018f\001\002\000\006" +
    "\035\u0177\036\u0175\001\002\000\004\034\u0191\001\002\000" +
    "\004\107\u0192\001\002\000\004\013\u0193\001\002\000\004" +
    "\007\u0194\001\002\000\052\002\uff2f\003\uff2f\006\uff2f\027" +
    "\uff2f\030\uff2f\031\uff2f\032\uff2f\037\uff2f\040\uff2f\043\uff2f" +
    "\045\uff2f\046\uff2f\051\uff2f\052\uff2f\053\uff2f\054\uff2f\055" +
    "\uff2f\077\uff2f\100\uff2f\107\uff2f\001\002\000\006\035\u0177" +
    "\036\u0175\001\002\000\010\003\u0197\035\u0177\036\u0175\001" +
    "\002\000\004\034\u01a7\001\002\000\006\003\u0199\034\u019a" +
    "\001\002\000\004\107\u01a4\001\002\000\006\003\u019c\107" +
    "\u019b\001\002\000\006\003\u019f\013\u01a0\001\002\000\004" +
    "\013\u019d\001\002\000\004\007\u019e\001\002\000\052\002" +
    "\uff2b\003\uff2b\006\uff2b\027\uff2b\030\uff2b\031\uff2b\032\uff2b" +
    "\037\uff2b\040\uff2b\043\uff2b\045\uff2b\046\uff2b\051\uff2b\052" +
    "\uff2b\053\uff2b\054\uff2b\055\uff2b\077\uff2b\100\uff2b\107\uff2b" +
    "\001\002\000\004\007\u01a3\001\002\000\006\003\u01a1\007" +
    "\u01a2\001\002\000\052\002\uff29\003\uff29\006\uff29\027\uff29" +
    "\030\uff29\031\uff29\032\uff29\037\uff29\040\uff29\043\uff29\045" +
    "\uff29\046\uff29\051\uff29\052\uff29\053\uff29\054\uff29\055\uff29" +
    "\077\uff29\100\uff29\107\uff29\001\002\000\052\002\uff35\003" +
    "\uff35\006\uff35\027\uff35\030\uff35\031\uff35\032\uff35\037\uff35" +
    "\040\uff35\043\uff35\045\uff35\046\uff35\051\uff35\052\uff35\053" +
    "\uff35\054\uff35\055\uff35\077\uff35\100\uff35\107\uff35\001\002" +
    "\000\052\002\uff2a\003\uff2a\006\uff2a\027\uff2a\030\uff2a\031" +
    "\uff2a\032\uff2a\037\uff2a\040\uff2a\043\uff2a\045\uff2a\046\uff2a" +
    "\051\uff2a\052\uff2a\053\uff2a\054\uff2a\055\uff2a\077\uff2a\100" +
    "\uff2a\107\uff2a\001\002\000\004\013\u01a5\001\002\000\004" +
    "\007\u01a6\001\002\000\052\002\uff2c\003\uff2c\006\uff2c\027" +
    "\uff2c\030\uff2c\031\uff2c\032\uff2c\037\uff2c\040\uff2c\043\uff2c" +
    "\045\uff2c\046\uff2c\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055" +
    "\uff2c\077\uff2c\100\uff2c\107\uff2c\001\002\000\004\107\u01a8" +
    "\001\002\000\004\013\u01a9\001\002\000\004\007\u01aa\001" +
    "\002\000\052\002\uff2d\003\uff2d\006\uff2d\027\uff2d\030\uff2d" +
    "\031\uff2d\032\uff2d\037\uff2d\040\uff2d\043\uff2d\045\uff2d\046" +
    "\uff2d\051\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d\077\uff2d" +
    "\100\uff2d\107\uff2d\001\002\000\004\034\u01ac\001\002\000" +
    "\004\107\u01ad\001\002\000\004\013\u01ae\001\002\000\004" +
    "\007\u01af\001\002\000\052\002\uff2e\003\uff2e\006\uff2e\027" +
    "\uff2e\030\uff2e\031\uff2e\032\uff2e\037\uff2e\040\uff2e\043\uff2e" +
    "\045\uff2e\046\uff2e\051\uff2e\052\uff2e\053\uff2e\054\uff2e\055" +
    "\uff2e\077\uff2e\100\uff2e\107\uff2e\001\002\000\004\034\u01b1" +
    "\001\002\000\006\035\u0177\036\u0175\001\002\000\004\034" +
    "\u01b3\001\002\000\004\107\u01b4\001\002\000\004\013\u01b5" +
    "\001\002\000\004\007\u01b6\001\002\000\052\002\uff30\003" +
    "\uff30\006\uff30\027\uff30\030\uff30\031\uff30\032\uff30\037\uff30" +
    "\040\uff30\043\uff30\045\uff30\046\uff30\051\uff30\052\uff30\053" +
    "\uff30\054\uff30\055\uff30\077\uff30\100\uff30\107\uff30\001\002" +
    "\000\004\107\u01b8\001\002\000\004\034\u01b9\001\002\000" +
    "\006\035\u0177\036\u0175\001\002\000\004\034\u01bb\001\002" +
    "\000\004\107\u01bc\001\002\000\004\013\u01bd\001\002\000" +
    "\004\007\u01be\001\002\000\052\002\uff31\003\uff31\006\uff31" +
    "\027\uff31\030\uff31\031\uff31\032\uff31\037\uff31\040\uff31\043" +
    "\uff31\045\uff31\046\uff31\051\uff31\052\uff31\053\uff31\054\uff31" +
    "\055\uff31\077\uff31\100\uff31\107\uff31\001\002\000\004\032" +
    "\u01c0\001\002\000\004\012\u01c1\001\002\000\004\107\u01c2" +
    "\001\002\000\004\034\u01c3\001\002\000\006\035\u0177\036" +
    "\u0175\001\002\000\004\034\u01c5\001\002\000\004\107\u01c6" +
    "\001\002\000\004\013\u01c7\001\002\000\004\007\u01c8\001" +
    "\002\000\052\002\uff33\003\uff33\006\uff33\027\uff33\030\uff33" +
    "\031\uff33\032\uff33\037\uff33\040\uff33\043\uff33\045\uff33\046" +
    "\uff33\051\uff33\052\uff33\053\uff33\054\uff33\055\uff33\077\uff33" +
    "\100\uff33\107\uff33\001\002\000\016\003\066\012\u01df\047" +
    "\060\050\063\107\065\111\057\001\002\000\016\003\066" +
    "\012\064\047\060\050\063\107\065\111\057\001\002\000" +
    "\006\005\u01cc\013\u01cd\001\002\000\050\003\u01d1\006\u01d0" +
    "\027\024\030\021\031\014\032\205\037\226\040\177\043" +
    "\203\045\202\046\216\051\211\052\217\053\215\054\167" +
    "\055\201\077\207\100\176\107\020\001\002\000\006\003" +
    "\u01cf\005\u01ce\001\002\000\050\003\u01d1\006\u01d0\027\024" +
    "\030\021\031\014\032\205\037\226\040\177\043\203\045" +
    "\202\046\216\051\211\052\217\053\215\054\167\055\201" +
    "\077\207\100\176\107\020\001\002\000\050\003\u01d1\006" +
    "\u01d0\027\024\030\021\031\014\032\205\037\226\040\177" +
    "\043\203\045\202\046\216\051\211\052\217\053\215\054" +
    "\167\055\201\077\207\100\176\107\020\001\002\000\056" +
    "\002\uff40\003\uff40\005\uff40\006\uff40\027\uff40\030\uff40\031" +
    "\uff40\032\uff40\037\uff40\040\uff40\043\uff40\044\uff40\045\uff40" +
    "\046\uff40\051\uff40\052\uff40\053\uff40\054\uff40\055\uff40\077" +
    "\uff40\100\uff40\107\uff40\001\002\000\062\002\uff3e\003\uffcd" +
    "\005\uff3e\006\uff95\007\365\011\033\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\037\uff95\040\uff95\043\uff95\044\uff3e\045\uff95" +
    "\046\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\077" +
    "\uff95\100\uff95\107\364\001\002\000\052\002\ufeb1\003\ufeb1" +
    "\006\ufeb1\027\ufeb1\030\ufeb1\031\ufeb1\032\ufeb1\037\ufeb1\040" +
    "\ufeb1\043\ufeb1\045\ufeb1\046\ufeb1\051\ufeb1\052\ufeb1\053\ufeb1" +
    "\054\ufeb1\055\ufeb1\077\ufeb1\100\ufeb1\107\ufeb1\001\002\000" +
    "\050\003\u01d1\006\u01d0\027\024\030\021\031\014\032\205" +
    "\037\226\040\177\043\203\045\202\046\216\051\211\052" +
    "\217\053\215\054\167\055\201\077\207\100\176\107\020" +
    "\001\002\000\056\002\uff3f\003\uff3f\005\uff3f\006\uff3f\027" +
    "\uff3f\030\uff3f\031\uff3f\032\uff3f\037\uff3f\040\uff3f\043\uff3f" +
    "\044\uff3f\045\uff3f\046\uff3f\051\uff3f\052\uff3f\053\uff3f\054" +
    "\uff3f\055\uff3f\077\uff3f\100\uff3f\107\uff3f\001\002\000\056" +
    "\002\ufeb6\003\ufeb6\005\u01d6\006\ufeb6\027\ufeb6\030\ufeb6\031" +
    "\ufeb6\032\ufeb6\037\ufeb6\040\ufeb6\043\ufeb6\044\u01d8\045\ufeb6" +
    "\046\ufeb6\051\ufeb6\052\ufeb6\053\ufeb6\054\ufeb6\055\ufeb6\077" +
    "\ufeb6\100\ufeb6\107\ufeb6\001\002\000\050\003\u01d1\006\u01d0" +
    "\027\024\030\021\031\014\032\205\037\226\040\177\043" +
    "\203\045\202\046\216\051\211\052\217\053\215\054\167" +
    "\055\201\077\207\100\176\107\020\001\002\000\052\002" +
    "\ufeb0\003\ufeb0\006\ufeb0\027\ufeb0\030\ufeb0\031\ufeb0\032\ufeb0" +
    "\037\ufeb0\040\ufeb0\043\ufeb0\045\ufeb0\046\ufeb0\051\ufeb0\052" +
    "\ufeb0\053\ufeb0\054\ufeb0\055\ufeb0\077\ufeb0\100\ufeb0\107\ufeb0" +
    "\001\002\000\052\003\u01d1\005\u01d9\006\u01d0\027\024\030" +
    "\021\031\014\032\205\037\226\040\177\043\203\045\202" +
    "\046\216\051\211\052\217\053\215\054\167\055\201\077" +
    "\207\100\176\107\020\001\002\000\050\003\u01d1\006\u01d0" +
    "\027\024\030\021\031\014\032\205\037\226\040\177\043" +
    "\203\045\202\046\216\051\211\052\217\053\215\054\167" +
    "\055\201\077\207\100\176\107\020\001\002\000\052\002" +
    "\ufeaf\003\ufeaf\006\ufeaf\027\ufeaf\030\ufeaf\031\ufeaf\032\ufeaf" +
    "\037\ufeaf\040\ufeaf\043\ufeaf\045\ufeaf\046\ufeaf\051\ufeaf\052" +
    "\ufeaf\053\ufeaf\054\ufeaf\055\ufeaf\077\ufeaf\100\ufeaf\107\ufeaf" +
    "\001\002\000\052\002\ufeb5\003\ufeb5\006\ufeb5\027\ufeb5\030" +
    "\ufeb5\031\ufeb5\032\ufeb5\037\ufeb5\040\ufeb5\043\ufeb5\045\ufeb5" +
    "\046\ufeb5\051\ufeb5\052\ufeb5\053\ufeb5\054\ufeb5\055\ufeb5\077" +
    "\ufeb5\100\ufeb5\107\ufeb5\001\002\000\052\002\ufeae\003\ufeae" +
    "\006\ufeae\027\ufeae\030\ufeae\031\ufeae\032\ufeae\037\ufeae\040" +
    "\ufeae\043\ufeae\045\ufeae\046\ufeae\051\ufeae\052\ufeae\053\ufeae" +
    "\054\ufeae\055\ufeae\077\ufeae\100\ufeae\107\ufeae\001\002\000" +
    "\052\002\ufeb2\003\ufeb2\006\ufeb2\027\ufeb2\030\ufeb2\031\ufeb2" +
    "\032\ufeb2\037\ufeb2\040\ufeb2\043\ufeb2\045\ufeb2\046\ufeb2\051" +
    "\ufeb2\052\ufeb2\053\ufeb2\054\ufeb2\055\ufeb2\077\ufeb2\100\ufeb2" +
    "\107\ufeb2\001\002\000\004\013\u01e4\001\002\000\016\003" +
    "\066\012\064\047\060\050\063\107\065\111\057\001\002" +
    "\000\004\013\u01e1\001\002\000\012\005\u01e2\013\uffaa\015" +
    "\uffaa\016\uffaa\001\002\000\050\003\u01d1\006\u01d0\027\024" +
    "\030\021\031\014\032\205\037\226\040\177\043\203\045" +
    "\202\046\216\051\211\052\217\053\215\054\167\055\201" +
    "\077\207\100\176\107\020\001\002\000\052\002\ufeb3\003" +
    "\ufeb3\006\ufeb3\027\ufeb3\030\ufeb3\031\ufeb3\032\ufeb3\037\ufeb3" +
    "\040\ufeb3\043\ufeb3\045\ufeb3\046\ufeb3\051\ufeb3\052\ufeb3\053" +
    "\ufeb3\054\ufeb3\055\ufeb3\077\ufeb3\100\ufeb3\107\ufeb3\001\002" +
    "\000\004\005\u01e5\001\002\000\050\003\u01d1\006\u01d0\027" +
    "\024\030\021\031\014\032\205\037\226\040\177\043\203" +
    "\045\202\046\216\051\211\052\217\053\215\054\167\055" +
    "\201\077\207\100\176\107\020\001\002\000\052\002\ufeb4" +
    "\003\ufeb4\006\ufeb4\027\ufeb4\030\ufeb4\031\ufeb4\032\ufeb4\037" +
    "\ufeb4\040\ufeb4\043\ufeb4\045\ufeb4\046\ufeb4\051\ufeb4\052\ufeb4" +
    "\053\ufeb4\054\ufeb4\055\ufeb4\077\ufeb4\100\ufeb4\107\ufeb4\001" +
    "\002\000\004\013\u01f8\001\002\000\016\003\066\012\064" +
    "\047\060\050\063\107\065\111\057\001\002\000\044\003" +
    "\066\012\064\013\uffb9\015\uffb9\016\uffb9\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\067\026\070\047" +
    "\060\050\063\107\065\111\057\001\002\000\004\013\u01eb" +
    "\001\002\000\004\005\u01ec\001\002\000\050\003\u01d1\006" +
    "\u01d0\027\024\030\021\031\014\032\205\037\226\040\177" +
    "\043\203\045\202\046\216\051\211\052\217\053\215\054" +
    "\167\055\201\077\207\100\176\107\020\001\002\000\052" +
    "\002\ufeac\003\ufeac\006\ufeac\027\ufeac\030\ufeac\031\ufeac\032" +
    "\ufeac\037\ufeac\040\ufeac\043\ufeac\045\ufeac\046\ufeac\051\ufeac" +
    "\052\ufeac\053\ufeac\054\ufeac\055\ufeac\077\ufeac\100\ufeac\107" +
    "\ufeac\001\002\000\052\003\u01f0\006\u01d0\013\u01ef\027\024" +
    "\030\021\031\014\032\205\037\226\040\177\043\203\045" +
    "\202\046\216\051\211\052\217\053\215\054\167\055\201" +
    "\077\207\100\176\107\020\001\002\000\014\003\u01f5\005" +
    "\u01f4\013\uffaa\015\uffaa\016\uffaa\001\002\000\060\002\uff3e" +
    "\003\uffcd\005\u01f2\006\uff95\007\365\011\033\027\uff95\030" +
    "\uff95\031\uff95\032\uff95\037\uff95\040\uff95\043\uff95\045\uff95" +
    "\046\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\077" +
    "\uff95\100\uff95\107\364\001\002\000\052\002\ufea9\003\ufea9" +
    "\006\ufea9\027\ufea9\030\ufea9\031\ufea9\032\ufea9\037\ufea9\040" +
    "\ufea9\043\ufea9\045\ufea9\046\ufea9\051\ufea9\052\ufea9\053\ufea9" +
    "\054\ufea9\055\ufea9\077\ufea9\100\ufea9\107\ufea9\001\002\000" +
    "\050\003\u01d1\006\u01d0\027\024\030\021\031\014\032\205" +
    "\037\226\040\177\043\203\045\202\046\216\051\211\052" +
    "\217\053\215\054\167\055\201\077\207\100\176\107\020" +
    "\001\002\000\052\002\ufeab\003\ufeab\006\ufeab\027\ufeab\030" +
    "\ufeab\031\ufeab\032\ufeab\037\ufeab\040\ufeab\043\ufeab\045\ufeab" +
    "\046\ufeab\051\ufeab\052\ufeab\053\ufeab\054\ufeab\055\ufeab\077" +
    "\ufeab\100\ufeab\107\ufeab\001\002\000\050\003\u01d1\006\u01d0" +
    "\027\024\030\021\031\014\032\205\037\226\040\177\043" +
    "\203\045\202\046\216\051\211\052\217\053\215\054\167" +
    "\055\201\077\207\100\176\107\020\001\002\000\050\003" +
    "\u01d1\006\u01d0\027\024\030\021\031\014\032\205\037\226" +
    "\040\177\043\203\045\202\046\216\051\211\052\217\053" +
    "\215\054\167\055\201\077\207\100\176\107\020\001\002" +
    "\000\052\002\ufeaa\003\ufeaa\006\ufeaa\027\ufeaa\030\ufeaa\031" +
    "\ufeaa\032\ufeaa\037\ufeaa\040\ufeaa\043\ufeaa\045\ufeaa\046\ufeaa" +
    "\051\ufeaa\052\ufeaa\053\ufeaa\054\ufeaa\055\ufeaa\077\ufeaa\100" +
    "\ufeaa\107\ufeaa\001\002\000\052\002\ufead\003\ufead\006\ufead" +
    "\027\ufead\030\ufead\031\ufead\032\ufead\037\ufead\040\ufead\043" +
    "\ufead\045\ufead\046\ufead\051\ufead\052\ufead\053\ufead\054\ufead" +
    "\055\ufead\077\ufead\100\ufead\107\ufead\001\002\000\050\003" +
    "\u01d1\006\u01d0\027\024\030\021\031\014\032\205\037\226" +
    "\040\177\043\203\045\202\046\216\051\211\052\217\053" +
    "\215\054\167\055\201\077\207\100\176\107\020\001\002" +
    "\000\052\002\ufea8\003\ufea8\006\ufea8\027\ufea8\030\ufea8\031" +
    "\ufea8\032\ufea8\037\ufea8\040\ufea8\043\ufea8\045\ufea8\046\ufea8" +
    "\051\ufea8\052\ufea8\053\ufea8\054\ufea8\055\ufea8\077\ufea8\100" +
    "\ufea8\107\ufea8\001\002\000\004\107\u0286\001\002\000\006" +
    "\003\u01fd\107\u01fc\001\002\000\006\003\u0281\076\u0282\001" +
    "\002\000\004\076\u01fe\001\002\000\056\003\u020c\056\u0201" +
    "\057\u0206\060\u0204\061\u0205\062\u020f\063\u0209\064\u0210\065" +
    "\u0207\066\u020b\067\u0212\070\u0213\071\u020e\072\u0211\073\u0215" +
    "\074\u020d\075\u0203\101\u0200\102\u01ff\103\u0202\104\u0214\105" +
    "\u020a\001\002\000\006\003\u027c\013\u027d\001\002\000\006" +
    "\003\u0277\013\u0278\001\002\000\006\003\u0272\013\u0273\001" +
    "\002\000\006\003\u026d\013\u026e\001\002\000\006\003\u0268" +
    "\013\u0269\001\002\000\006\003\u0263\013\u0264\001\002\000" +
    "\006\003\u025e\013\u025f\001\002\000\006\003\u0259\013\u025a" +
    "\001\002\000\006\003\u0254\013\u0255\001\002\000\052\002" +
    "\ufefd\003\ufefd\006\ufefd\027\ufefd\030\ufefd\031\ufefd\032\ufefd" +
    "\037\ufefd\040\ufefd\043\ufefd\045\ufefd\046\ufefd\051\ufefd\052" +
    "\ufefd\053\ufefd\054\ufefd\055\ufefd\077\ufefd\100\ufefd\107\ufefd" +
    "\001\002\000\006\003\u024f\013\u0250\001\002\000\006\003" +
    "\u024a\013\u024b\001\002\000\006\003\u0245\013\u0246\001\002" +
    "\000\004\013\u0243\001\002\000\006\003\u023e\013\u023f\001" +
    "\002\000\006\003\u0239\013\u023a\001\002\000\006\003\u0234" +
    "\013\u0235\001\002\000\006\003\u022f\013\u0230\001\002\000" +
    "\006\003\u022a\013\u022b\001\002\000\006\003\u0225\013\u0226" +
    "\001\002\000\006\003\u0220\013\u0221\001\002\000\006\003" +
    "\u021b\013\u021c\001\002\000\006\003\u0216\013\u0217\001\002" +
    "\000\004\007\u021a\001\002\000\006\003\u0218\007\u0219\001" +
    "\002\000\052\002\ufebb\003\ufebb\006\ufebb\027\ufebb\030\ufebb" +
    "\031\ufebb\032\ufebb\037\ufebb\040\ufebb\043\ufebb\045\ufebb\046" +
    "\ufebb\051\ufebb\052\ufebb\053\ufebb\054\ufebb\055\ufebb\077\ufebb" +
    "\100\ufebb\107\ufebb\001\002\000\052\002\ufee8\003\ufee8\006" +
    "\ufee8\027\ufee8\030\ufee8\031\ufee8\032\ufee8\037\ufee8\040\ufee8" +
    "\043\ufee8\045\ufee8\046\ufee8\051\ufee8\052\ufee8\053\ufee8\054" +
    "\ufee8\055\ufee8\077\ufee8\100\ufee8\107\ufee8\001\002\000\052" +
    "\002\ufed2\003\ufed2\006\ufed2\027\ufed2\030\ufed2\031\ufed2\032" +
    "\ufed2\037\ufed2\040\ufed2\043\ufed2\045\ufed2\046\ufed2\051\ufed2" +
    "\052\ufed2\053\ufed2\054\ufed2\055\ufed2\077\ufed2\100\ufed2\107" +
    "\ufed2\001\002\000\004\007\u021f\001\002\000\006\003\u021d" +
    "\007\u021e\001\002\000\052\002\ufec1\003\ufec1\006\ufec1\027" +
    "\ufec1\030\ufec1\031\ufec1\032\ufec1\037\ufec1\040\ufec1\043\ufec1" +
    "\045\ufec1\046\ufec1\051\ufec1\052\ufec1\053\ufec1\054\ufec1\055" +
    "\ufec1\077\ufec1\100\ufec1\107\ufec1\001\002\000\052\002\ufeee" +
    "\003\ufeee\006\ufeee\027\ufeee\030\ufeee\031\ufeee\032\ufeee\037" +
    "\ufeee\040\ufeee\043\ufeee\045\ufeee\046\ufeee\051\ufeee\052\ufeee" +
    "\053\ufeee\054\ufeee\055\ufeee\077\ufeee\100\ufeee\107\ufeee\001" +
    "\002\000\052\002\ufed8\003\ufed8\006\ufed8\027\ufed8\030\ufed8" +
    "\031\ufed8\032\ufed8\037\ufed8\040\ufed8\043\ufed8\045\ufed8\046" +
    "\ufed8\051\ufed8\052\ufed8\053\ufed8\054\ufed8\055\ufed8\077\ufed8" +
    "\100\ufed8\107\ufed8\001\002\000\004\007\u0224\001\002\000" +
    "\006\003\u0222\007\u0223\001\002\000\052\002\ufebe\003\ufebe" +
    "\006\ufebe\027\ufebe\030\ufebe\031\ufebe\032\ufebe\037\ufebe\040" +
    "\ufebe\043\ufebe\045\ufebe\046\ufebe\051\ufebe\052\ufebe\053\ufebe" +
    "\054\ufebe\055\ufebe\077\ufebe\100\ufebe\107\ufebe\001\002\000" +
    "\052\002\ufeeb\003\ufeeb\006\ufeeb\027\ufeeb\030\ufeeb\031\ufeeb" +
    "\032\ufeeb\037\ufeeb\040\ufeeb\043\ufeeb\045\ufeeb\046\ufeeb\051" +
    "\ufeeb\052\ufeeb\053\ufeeb\054\ufeeb\055\ufeeb\077\ufeeb\100\ufeeb" +
    "\107\ufeeb\001\002\000\052\002\ufed5\003\ufed5\006\ufed5\027" +
    "\ufed5\030\ufed5\031\ufed5\032\ufed5\037\ufed5\040\ufed5\043\ufed5" +
    "\045\ufed5\046\ufed5\051\ufed5\052\ufed5\053\ufed5\054\ufed5\055" +
    "\ufed5\077\ufed5\100\ufed5\107\ufed5\001\002\000\004\007\u0229" +
    "\001\002\000\006\003\u0227\007\u0228\001\002\000\052\002" +
    "\ufebf\003\ufebf\006\ufebf\027\ufebf\030\ufebf\031\ufebf\032\ufebf" +
    "\037\ufebf\040\ufebf\043\ufebf\045\ufebf\046\ufebf\051\ufebf\052" +
    "\ufebf\053\ufebf\054\ufebf\055\ufebf\077\ufebf\100\ufebf\107\ufebf" +
    "\001\002\000\052\002\ufeec\003\ufeec\006\ufeec\027\ufeec\030" +
    "\ufeec\031\ufeec\032\ufeec\037\ufeec\040\ufeec\043\ufeec\045\ufeec" +
    "\046\ufeec\051\ufeec\052\ufeec\053\ufeec\054\ufeec\055\ufeec\077" +
    "\ufeec\100\ufeec\107\ufeec\001\002\000\052\002\ufed6\003\ufed6" +
    "\006\ufed6\027\ufed6\030\ufed6\031\ufed6\032\ufed6\037\ufed6\040" +
    "\ufed6\043\ufed6\045\ufed6\046\ufed6\051\ufed6\052\ufed6\053\ufed6" +
    "\054\ufed6\055\ufed6\077\ufed6\100\ufed6\107\ufed6\001\002\000" +
    "\004\007\u022e\001\002\000\006\003\u022c\007\u022d\001\002" +
    "\000\052\002\ufebc\003\ufebc\006\ufebc\027\ufebc\030\ufebc\031" +
    "\ufebc\032\ufebc\037\ufebc\040\ufebc\043\ufebc\045\ufebc\046\ufebc" +
    "\051\ufebc\052\ufebc\053\ufebc\054\ufebc\055\ufebc\077\ufebc\100" +
    "\ufebc\107\ufebc\001\002\000\052\002\ufee9\003\ufee9\006\ufee9" +
    "\027\ufee9\030\ufee9\031\ufee9\032\ufee9\037\ufee9\040\ufee9\043" +
    "\ufee9\045\ufee9\046\ufee9\051\ufee9\052\ufee9\053\ufee9\054\ufee9" +
    "\055\ufee9\077\ufee9\100\ufee9\107\ufee9\001\002\000\052\002" +
    "\ufed3\003\ufed3\006\ufed3\027\ufed3\030\ufed3\031\ufed3\032\ufed3" +
    "\037\ufed3\040\ufed3\043\ufed3\045\ufed3\046\ufed3\051\ufed3\052" +
    "\ufed3\053\ufed3\054\ufed3\055\ufed3\077\ufed3\100\ufed3\107\ufed3" +
    "\001\002\000\004\007\u0233\001\002\000\006\003\u0231\007" +
    "\u0232\001\002\000\052\002\ufec8\003\ufec8\006\ufec8\027\ufec8" +
    "\030\ufec8\031\ufec8\032\ufec8\037\ufec8\040\ufec8\043\ufec8\045" +
    "\ufec8\046\ufec8\051\ufec8\052\ufec8\053\ufec8\054\ufec8\055\ufec8" +
    "\077\ufec8\100\ufec8\107\ufec8\001\002\000\052\002\ufef4\003" +
    "\ufef4\006\ufef4\027\ufef4\030\ufef4\031\ufef4\032\ufef4\037\ufef4" +
    "\040\ufef4\043\ufef4\045\ufef4\046\ufef4\051\ufef4\052\ufef4\053" +
    "\ufef4\054\ufef4\055\ufef4\077\ufef4\100\ufef4\107\ufef4\001\002" +
    "\000\052\002\ufedf\003\ufedf\006\ufedf\027\ufedf\030\ufedf\031" +
    "\ufedf\032\ufedf\037\ufedf\040\ufedf\043\ufedf\045\ufedf\046\ufedf" +
    "\051\ufedf\052\ufedf\053\ufedf\054\ufedf\055\ufedf\077\ufedf\100" +
    "\ufedf\107\ufedf\001\002\000\004\007\u0238\001\002\000\006" +
    "\003\u0236\007\u0237\001\002\000\052\002\ufeca\003\ufeca\006" +
    "\ufeca\027\ufeca\030\ufeca\031\ufeca\032\ufeca\037\ufeca\040\ufeca" +
    "\043\ufeca\045\ufeca\046\ufeca\051\ufeca\052\ufeca\053\ufeca\054" +
    "\ufeca\055\ufeca\077\ufeca\100\ufeca\107\ufeca\001\002\000\052" +
    "\002\ufef6\003\ufef6\006\ufef6\027\ufef6\030\ufef6\031\ufef6\032" +
    "\ufef6\037\ufef6\040\ufef6\043\ufef6\045\ufef6\046\ufef6\051\ufef6" +
    "\052\ufef6\053\ufef6\054\ufef6\055\ufef6\077\ufef6\100\ufef6\107" +
    "\ufef6\001\002\000\052\002\ufee1\003\ufee1\006\ufee1\027\ufee1" +
    "\030\ufee1\031\ufee1\032\ufee1\037\ufee1\040\ufee1\043\ufee1\045" +
    "\ufee1\046\ufee1\051\ufee1\052\ufee1\053\ufee1\054\ufee1\055\ufee1" +
    "\077\ufee1\100\ufee1\107\ufee1\001\002\000\004\007\u023d\001" +
    "\002\000\006\003\u023b\007\u023c\001\002\000\052\002\ufebd" +
    "\003\ufebd\006\ufebd\027\ufebd\030\ufebd\031\ufebd\032\ufebd\037" +
    "\ufebd\040\ufebd\043\ufebd\045\ufebd\046\ufebd\051\ufebd\052\ufebd" +
    "\053\ufebd\054\ufebd\055\ufebd\077\ufebd\100\ufebd\107\ufebd\001" +
    "\002\000\052\002\ufeea\003\ufeea\006\ufeea\027\ufeea\030\ufeea" +
    "\031\ufeea\032\ufeea\037\ufeea\040\ufeea\043\ufeea\045\ufeea\046" +
    "\ufeea\051\ufeea\052\ufeea\053\ufeea\054\ufeea\055\ufeea\077\ufeea" +
    "\100\ufeea\107\ufeea\001\002\000\052\002\ufed4\003\ufed4\006" +
    "\ufed4\027\ufed4\030\ufed4\031\ufed4\032\ufed4\037\ufed4\040\ufed4" +
    "\043\ufed4\045\ufed4\046\ufed4\051\ufed4\052\ufed4\053\ufed4\054" +
    "\ufed4\055\ufed4\077\ufed4\100\ufed4\107\ufed4\001\002\000\004" +
    "\007\u0242\001\002\000\006\003\u0240\007\u0241\001\002\000" +
    "\052\002\ufeba\003\ufeba\006\ufeba\027\ufeba\030\ufeba\031\ufeba" +
    "\032\ufeba\037\ufeba\040\ufeba\043\ufeba\045\ufeba\046\ufeba\051" +
    "\ufeba\052\ufeba\053\ufeba\054\ufeba\055\ufeba\077\ufeba\100\ufeba" +
    "\107\ufeba\001\002\000\052\002\ufee7\003\ufee7\006\ufee7\027" +
    "\ufee7\030\ufee7\031\ufee7\032\ufee7\037\ufee7\040\ufee7\043\ufee7" +
    "\045\ufee7\046\ufee7\051\ufee7\052\ufee7\053\ufee7\054\ufee7\055" +
    "\ufee7\077\ufee7\100\ufee7\107\ufee7\001\002\000\052\002\ufed1" +
    "\003\ufed1\006\ufed1\027\ufed1\030\ufed1\031\ufed1\032\ufed1\037" +
    "\ufed1\040\ufed1\043\ufed1\045\ufed1\046\ufed1\051\ufed1\052\ufed1" +
    "\053\ufed1\054\ufed1\055\ufed1\077\ufed1\100\ufed1\107\ufed1\001" +
    "\002\000\004\007\u0244\001\002\000\052\002\ufecf\003\ufecf" +
    "\006\ufecf\027\ufecf\030\ufecf\031\ufecf\032\ufecf\037\ufecf\040" +
    "\ufecf\043\ufecf\045\ufecf\046\ufecf\051\ufecf\052\ufecf\053\ufecf" +
    "\054\ufecf\055\ufecf\077\ufecf\100\ufecf\107\ufecf\001\002\000" +
    "\004\007\u0249\001\002\000\006\003\u0247\007\u0248\001\002" +
    "\000\052\002\ufec5\003\ufec5\006\ufec5\027\ufec5\030\ufec5\031" +
    "\ufec5\032\ufec5\037\ufec5\040\ufec5\043\ufec5\045\ufec5\046\ufec5" +
    "\051\ufec5\052\ufec5\053\ufec5\054\ufec5\055\ufec5\077\ufec5\100" +
    "\ufec5\107\ufec5\001\002\000\052\002\ufef2\003\ufef2\006\ufef2" +
    "\027\ufef2\030\ufef2\031\ufef2\032\ufef2\037\ufef2\040\ufef2\043" +
    "\ufef2\045\ufef2\046\ufef2\051\ufef2\052\ufef2\053\ufef2\054\ufef2" +
    "\055\ufef2\077\ufef2\100\ufef2\107\ufef2\001\002\000\052\002" +
    "\ufedc\003\ufedc\006\ufedc\027\ufedc\030\ufedc\031\ufedc\032\ufedc" +
    "\037\ufedc\040\ufedc\043\ufedc\045\ufedc\046\ufedc\051\ufedc\052" +
    "\ufedc\053\ufedc\054\ufedc\055\ufedc\077\ufedc\100\ufedc\107\ufedc" +
    "\001\002\000\004\007\u024e\001\002\000\006\003\u024c\007" +
    "\u024d\001\002\000\052\002\ufec0\003\ufec0\006\ufec0\027\ufec0" +
    "\030\ufec0\031\ufec0\032\ufec0\037\ufec0\040\ufec0\043\ufec0\045" +
    "\ufec0\046\ufec0\051\ufec0\052\ufec0\053\ufec0\054\ufec0\055\ufec0" +
    "\077\ufec0\100\ufec0\107\ufec0\001\002\000\052\002\ufeed\003" +
    "\ufeed\006\ufeed\027\ufeed\030\ufeed\031\ufeed\032\ufeed\037\ufeed" +
    "\040\ufeed\043\ufeed\045\ufeed\046\ufeed\051\ufeed\052\ufeed\053" +
    "\ufeed\054\ufeed\055\ufeed\077\ufeed\100\ufeed\107\ufeed\001\002" +
    "\000\052\002\ufed7\003\ufed7\006\ufed7\027\ufed7\030\ufed7\031" +
    "\ufed7\032\ufed7\037\ufed7\040\ufed7\043\ufed7\045\ufed7\046\ufed7" +
    "\051\ufed7\052\ufed7\053\ufed7\054\ufed7\055\ufed7\077\ufed7\100" +
    "\ufed7\107\ufed7\001\002\000\004\007\u0253\001\002\000\006" +
    "\003\u0251\007\u0252\001\002\000\052\002\ufec9\003\ufec9\006" +
    "\ufec9\027\ufec9\030\ufec9\031\ufec9\032\ufec9\037\ufec9\040\ufec9" +
    "\043\ufec9\045\ufec9\046\ufec9\051\ufec9\052\ufec9\053\ufec9\054" +
    "\ufec9\055\ufec9\077\ufec9\100\ufec9\107\ufec9\001\002\000\052" +
    "\002\ufef5\003\ufef5\006\ufef5\027\ufef5\030\ufef5\031\ufef5\032" +
    "\ufef5\037\ufef5\040\ufef5\043\ufef5\045\ufef5\046\ufef5\051\ufef5" +
    "\052\ufef5\053\ufef5\054\ufef5\055\ufef5\077\ufef5\100\ufef5\107" +
    "\ufef5\001\002\000\052\002\ufee0\003\ufee0\006\ufee0\027\ufee0" +
    "\030\ufee0\031\ufee0\032\ufee0\037\ufee0\040\ufee0\043\ufee0\045" +
    "\ufee0\046\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0" +
    "\077\ufee0\100\ufee0\107\ufee0\001\002\000\004\007\u0258\001" +
    "\002\000\006\003\u0256\007\u0257\001\002\000\052\002\ufec7" +
    "\003\ufec7\006\ufec7\027\ufec7\030\ufec7\031\ufec7\032\ufec7\037" +
    "\ufec7\040\ufec7\043\ufec7\045\ufec7\046\ufec7\051\ufec7\052\ufec7" +
    "\053\ufec7\054\ufec7\055\ufec7\077\ufec7\100\ufec7\107\ufec7\001" +
    "\002\000\052\002\ufef3\003\ufef3\006\ufef3\027\ufef3\030\ufef3" +
    "\031\ufef3\032\ufef3\037\ufef3\040\ufef3\043\ufef3\045\ufef3\046" +
    "\ufef3\051\ufef3\052\ufef3\053\ufef3\054\ufef3\055\ufef3\077\ufef3" +
    "\100\ufef3\107\ufef3\001\002\000\052\002\ufede\003\ufede\006" +
    "\ufede\027\ufede\030\ufede\031\ufede\032\ufede\037\ufede\040\ufede" +
    "\043\ufede\045\ufede\046\ufede\051\ufede\052\ufede\053\ufede\054" +
    "\ufede\055\ufede\077\ufede\100\ufede\107\ufede\001\002\000\004" +
    "\007\u025d\001\002\000\006\003\u025b\007\u025c\001\002\000" +
    "\052\002\ufecd\003\ufecd\006\ufecd\027\ufecd\030\ufecd\031\ufecd" +
    "\032\ufecd\037\ufecd\040\ufecd\043\ufecd\045\ufecd\046\ufecd\051" +
    "\ufecd\052\ufecd\053\ufecd\054\ufecd\055\ufecd\077\ufecd\100\ufecd" +
    "\107\ufecd\001\002\000\052\002\ufef9\003\ufef9\006\ufef9\027" +
    "\ufef9\030\ufef9\031\ufef9\032\ufef9\037\ufef9\040\ufef9\043\ufef9" +
    "\045\ufef9\046\ufef9\051\ufef9\052\ufef9\053\ufef9\054\ufef9\055" +
    "\ufef9\077\ufef9\100\ufef9\107\ufef9\001\002\000\052\002\ufee4" +
    "\003\ufee4\006\ufee4\027\ufee4\030\ufee4\031\ufee4\032\ufee4\037" +
    "\ufee4\040\ufee4\043\ufee4\045\ufee4\046\ufee4\051\ufee4\052\ufee4" +
    "\053\ufee4\054\ufee4\055\ufee4\077\ufee4\100\ufee4\107\ufee4\001" +
    "\002\000\004\007\u0262\001\002\000\006\003\u0260\007\u0261" +
    "\001\002\000\052\002\ufecb\003\ufecb\006\ufecb\027\ufecb\030" +
    "\ufecb\031\ufecb\032\ufecb\037\ufecb\040\ufecb\043\ufecb\045\ufecb" +
    "\046\ufecb\051\ufecb\052\ufecb\053\ufecb\054\ufecb\055\ufecb\077" +
    "\ufecb\100\ufecb\107\ufecb\001\002\000\052\002\ufef7\003\ufef7" +
    "\006\ufef7\027\ufef7\030\ufef7\031\ufef7\032\ufef7\037\ufef7\040" +
    "\ufef7\043\ufef7\045\ufef7\046\ufef7\051\ufef7\052\ufef7\053\ufef7" +
    "\054\ufef7\055\ufef7\077\ufef7\100\ufef7\107\ufef7\001\002\000" +
    "\052\002\ufee2\003\ufee2\006\ufee2\027\ufee2\030\ufee2\031\ufee2" +
    "\032\ufee2\037\ufee2\040\ufee2\043\ufee2\045\ufee2\046\ufee2\051" +
    "\ufee2\052\ufee2\053\ufee2\054\ufee2\055\ufee2\077\ufee2\100\ufee2" +
    "\107\ufee2\001\002\000\004\007\u0267\001\002\000\006\003" +
    "\u0265\007\u0266\001\002\000\052\002\ufecc\003\ufecc\006\ufecc" +
    "\027\ufecc\030\ufecc\031\ufecc\032\ufecc\037\ufecc\040\ufecc\043" +
    "\ufecc\045\ufecc\046\ufecc\051\ufecc\052\ufecc\053\ufecc\054\ufecc" +
    "\055\ufecc\077\ufecc\100\ufecc\107\ufecc\001\002\000\052\002" +
    "\ufef8\003\ufef8\006\ufef8\027\ufef8\030\ufef8\031\ufef8\032\ufef8" +
    "\037\ufef8\040\ufef8\043\ufef8\045\ufef8\046\ufef8\051\ufef8\052" +
    "\ufef8\053\ufef8\054\ufef8\055\ufef8\077\ufef8\100\ufef8\107\ufef8" +
    "\001\002\000\052\002\ufee3\003\ufee3\006\ufee3\027\ufee3\030" +
    "\ufee3\031\ufee3\032\ufee3\037\ufee3\040\ufee3\043\ufee3\045\ufee3" +
    "\046\ufee3\051\ufee3\052\ufee3\053\ufee3\054\ufee3\055\ufee3\077" +
    "\ufee3\100\ufee3\107\ufee3\001\002\000\004\007\u026c\001\002" +
    "\000\006\003\u026a\007\u026b\001\002\000\052\002\ufeb9\003" +
    "\ufeb9\006\ufeb9\027\ufeb9\030\ufeb9\031\ufeb9\032\ufeb9\037\ufeb9" +
    "\040\ufeb9\043\ufeb9\045\ufeb9\046\ufeb9\051\ufeb9\052\ufeb9\053" +
    "\ufeb9\054\ufeb9\055\ufeb9\077\ufeb9\100\ufeb9\107\ufeb9\001\002" +
    "\000\052\002\ufee6\003\ufee6\006\ufee6\027\ufee6\030\ufee6\031" +
    "\ufee6\032\ufee6\037\ufee6\040\ufee6\043\ufee6\045\ufee6\046\ufee6" +
    "\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6\077\ufee6\100" +
    "\ufee6\107\ufee6\001\002\000\052\002\ufed0\003\ufed0\006\ufed0" +
    "\027\ufed0\030\ufed0\031\ufed0\032\ufed0\037\ufed0\040\ufed0\043" +
    "\ufed0\045\ufed0\046\ufed0\051\ufed0\052\ufed0\053\ufed0\054\ufed0" +
    "\055\ufed0\077\ufed0\100\ufed0\107\ufed0\001\002\000\004\007" +
    "\u0271\001\002\000\006\003\u026f\007\u0270\001\002\000\052" +
    "\002\ufec2\003\ufec2\006\ufec2\027\ufec2\030\ufec2\031\ufec2\032" +
    "\ufec2\037\ufec2\040\ufec2\043\ufec2\045\ufec2\046\ufec2\051\ufec2" +
    "\052\ufec2\053\ufec2\054\ufec2\055\ufec2\077\ufec2\100\ufec2\107" +
    "\ufec2\001\002\000\052\002\ufeef\003\ufeef\006\ufeef\027\ufeef" +
    "\030\ufeef\031\ufeef\032\ufeef\037\ufeef\040\ufeef\043\ufeef\045" +
    "\ufeef\046\ufeef\051\ufeef\052\ufeef\053\ufeef\054\ufeef\055\ufeef" +
    "\077\ufeef\100\ufeef\107\ufeef\001\002\000\052\002\ufed9\003" +
    "\ufed9\006\ufed9\027\ufed9\030\ufed9\031\ufed9\032\ufed9\037\ufed9" +
    "\040\ufed9\043\ufed9\045\ufed9\046\ufed9\051\ufed9\052\ufed9\053" +
    "\ufed9\054\ufed9\055\ufed9\077\ufed9\100\ufed9\107\ufed9\001\002" +
    "\000\004\007\u0276\001\002\000\006\003\u0274\007\u0275\001" +
    "\002\000\052\002\ufece\003\ufece\006\ufece\027\ufece\030\ufece" +
    "\031\ufece\032\ufece\037\ufece\040\ufece\043\ufece\045\ufece\046" +
    "\ufece\051\ufece\052\ufece\053\ufece\054\ufece\055\ufece\077\ufece" +
    "\100\ufece\107\ufece\001\002\000\052\002\ufefa\003\ufefa\006" +
    "\ufefa\027\ufefa\030\ufefa\031\ufefa\032\ufefa\037\ufefa\040\ufefa" +
    "\043\ufefa\045\ufefa\046\ufefa\051\ufefa\052\ufefa\053\ufefa\054" +
    "\ufefa\055\ufefa\077\ufefa\100\ufefa\107\ufefa\001\002\000\052" +
    "\002\ufee5\003\ufee5\006\ufee5\027\ufee5\030\ufee5\031\ufee5\032" +
    "\ufee5\037\ufee5\040\ufee5\043\ufee5\045\ufee5\046\ufee5\051\ufee5" +
    "\052\ufee5\053\ufee5\054\ufee5\055\ufee5\077\ufee5\100\ufee5\107" +
    "\ufee5\001\002\000\004\007\u027b\001\002\000\006\003\u0279" +
    "\007\u027a\001\002\000\052\002\ufec4\003\ufec4\006\ufec4\027" +
    "\ufec4\030\ufec4\031\ufec4\032\ufec4\037\ufec4\040\ufec4\043\ufec4" +
    "\045\ufec4\046\ufec4\051\ufec4\052\ufec4\053\ufec4\054\ufec4\055" +
    "\ufec4\077\ufec4\100\ufec4\107\ufec4\001\002\000\052\002\ufef1" +
    "\003\ufef1\006\ufef1\027\ufef1\030\ufef1\031\ufef1\032\ufef1\037" +
    "\ufef1\040\ufef1\043\ufef1\045\ufef1\046\ufef1\051\ufef1\052\ufef1" +
    "\053\ufef1\054\ufef1\055\ufef1\077\ufef1\100\ufef1\107\ufef1\001" +
    "\002\000\052\002\ufedb\003\ufedb\006\ufedb\027\ufedb\030\ufedb" +
    "\031\ufedb\032\ufedb\037\ufedb\040\ufedb\043\ufedb\045\ufedb\046" +
    "\ufedb\051\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\077\ufedb" +
    "\100\ufedb\107\ufedb\001\002\000\004\007\u0280\001\002\000" +
    "\006\003\u027e\007\u027f\001\002\000\052\002\ufec3\003\ufec3" +
    "\006\ufec3\027\ufec3\030\ufec3\031\ufec3\032\ufec3\037\ufec3\040" +
    "\ufec3\043\ufec3\045\ufec3\046\ufec3\051\ufec3\052\ufec3\053\ufec3" +
    "\054\ufec3\055\ufec3\077\ufec3\100\ufec3\107\ufec3\001\002\000" +
    "\052\002\ufef0\003\ufef0\006\ufef0\027\ufef0\030\ufef0\031\ufef0" +
    "\032\ufef0\037\ufef0\040\ufef0\043\ufef0\045\ufef0\046\ufef0\051" +
    "\ufef0\052\ufef0\053\ufef0\054\ufef0\055\ufef0\077\ufef0\100\ufef0" +
    "\107\ufef0\001\002\000\052\002\ufeda\003\ufeda\006\ufeda\027" +
    "\ufeda\030\ufeda\031\ufeda\032\ufeda\037\ufeda\040\ufeda\043\ufeda" +
    "\045\ufeda\046\ufeda\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055" +
    "\ufeda\077\ufeda\100\ufeda\107\ufeda\001\002\000\056\003\u020c" +
    "\056\u0201\057\u0206\060\u0204\061\u0205\062\u020f\063\u0209\064" +
    "\u0210\065\u0207\066\u020b\067\u0212\070\u0213\071\u020e\072\u0211" +
    "\073\u0215\074\u020d\075\u0203\101\u0200\102\u01ff\103\u0202\104" +
    "\u0214\105\u020a\001\002\000\056\003\u0284\056\u0201\057\u0206" +
    "\060\u0204\061\u0205\062\u020f\063\u0209\064\u0210\065\u0207\066" +
    "\u020b\067\u0212\070\u0213\071\u020e\072\u0211\073\u0215\074\u020d" +
    "\075\u0203\101\u0200\102\u01ff\103\u0202\104\u0214\105\u020a\001" +
    "\002\000\052\002\ufeff\003\ufeff\006\ufeff\027\ufeff\030\ufeff" +
    "\031\ufeff\032\ufeff\037\ufeff\040\ufeff\043\ufeff\045\ufeff\046" +
    "\ufeff\051\ufeff\052\ufeff\053\ufeff\054\ufeff\055\ufeff\077\ufeff" +
    "\100\ufeff\107\ufeff\001\002\000\054\002\ufefb\003\ufefb\006" +
    "\ufefb\013\u0243\027\ufefb\030\ufefb\031\ufefb\032\ufefb\037\ufefb" +
    "\040\ufefb\043\ufefb\045\ufefb\046\ufefb\051\ufefb\052\ufefb\053" +
    "\ufefb\054\ufefb\055\ufefb\077\ufefb\100\ufefb\107\ufefb\001\002" +
    "\000\052\002\ufefc\003\ufefc\006\ufefc\027\ufefc\030\ufefc\031" +
    "\ufefc\032\ufefc\037\ufefc\040\ufefc\043\ufefc\045\ufefc\046\ufefc" +
    "\051\ufefc\052\ufefc\053\ufefc\054\ufefc\055\ufefc\077\ufefc\100" +
    "\ufefc\107\ufefc\001\002\000\004\076\u0287\001\002\000\056" +
    "\003\u020c\056\u0201\057\u0206\060\u0204\061\u0205\062\u020f\063" +
    "\u0209\064\u0210\065\u0207\066\u020b\067\u0212\070\u0213\071\u020e" +
    "\072\u0211\073\u0215\074\u020d\075\u0203\101\u0200\102\u01ff\103" +
    "\u0202\104\u0214\105\u020a\001\002\000\052\002\ufefe\003\ufefe" +
    "\006\ufefe\027\ufefe\030\ufefe\031\ufefe\032\ufefe\037\ufefe\040" +
    "\ufefe\043\ufefe\045\ufefe\046\ufefe\051\ufefe\052\ufefe\053\ufefe" +
    "\054\ufefe\055\ufefe\077\ufefe\100\ufefe\107\ufefe\001\002\000" +
    "\006\003\u0604\011\u0605\001\002\000\004\011\u028b\001\002" +
    "\000\004\033\u028c\001\002\000\004\040\u028d\001\002\000" +
    "\004\012\u028e\001\002\000\012\003\u028f\012\073\107\071" +
    "\111\057\001\002\000\020\003\uffa1\012\uffa1\025\067\026" +
    "\070\034\u05dc\107\uffa1\111\uffa1\001\002\000\004\013\u05da" +
    "\001\002\000\014\003\072\012\073\034\u0292\107\071\111" +
    "\057\001\002\000\012\003\u02ba\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0294\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0296\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0298\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u029a\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u029c" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u029e\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u02a0\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u02a2\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u02a4\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u02a6\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u02a8\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u02aa\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u02ac\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u02ae\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u02b0\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u02b2\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u02b4\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u02b6" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u02b8\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\006\003\uff6b\013\uff6b\001" +
    "\002\000\020\003\uffa1\012\uffa1\025\067\026\070\034\u05b4" +
    "\107\uffa1\111\uffa1\001\002\000\014\003\072\012\073\034" +
    "\u02bc\107\071\111\057\001\002\000\012\003\u02e2\012\073" +
    "\107\071\111\057\001\002\000\004\034\u02be\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u02c0\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u02c2\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u02c4\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u02c6\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u02c8\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u02ca\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u02cc\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u02ce\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u02d0\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u02d2\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u02d4" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u02d6\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u02d8\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u02da\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u02dc\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u02de\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u02e0\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\006\003\uff69\013\uff69\001\002" +
    "\000\020\003\uffa1\012\uffa1\025\067\026\070\034\u0590\107" +
    "\uffa1\111\uffa1\001\002\000\014\003\072\012\073\034\u02e4" +
    "\107\071\111\057\001\002\000\012\003\u0308\012\073\107" +
    "\071\111\057\001\002\000\004\034\u02e6\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u02e8\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u02ea\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u02ec\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u02ee\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u02f0\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u02f2" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u02f4\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u02f6\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u02f8\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u02fa\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u02fc\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u02fe\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0300\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0302\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0304\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0306\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\006\003\uff67\013\uff67\001\002\000\020\003\uffa1\012\uffa1" +
    "\025\067\026\070\034\u056e\107\uffa1\111\uffa1\001\002\000" +
    "\014\003\072\012\073\034\u030a\107\071\111\057\001\002" +
    "\000\012\003\u032c\012\073\107\071\111\057\001\002\000" +
    "\004\034\u030c\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u030e\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0310" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0312\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u0314\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0316\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0318\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u031a\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u031c\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u031e\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0320\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0322\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0324\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0326\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0328\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u032a" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\006\003\uff65\013\uff65\001\002\000\020\003\uffa1" +
    "\012\uffa1\025\067\026\070\034\u054e\107\uffa1\111\uffa1\001" +
    "\002\000\014\003\072\012\073\034\u032e\107\071\111\057" +
    "\001\002\000\012\003\u034e\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0330\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u0332\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0334\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0336\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0338\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u033a\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u033c\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u033e\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0340\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0342\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0344\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0346\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0348" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u034a\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u034c\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\006" +
    "\003\uff63\013\uff63\001\002\000\020\003\uffa1\012\uffa1\025" +
    "\067\026\070\034\u0530\107\uffa1\111\uffa1\001\002\000\014" +
    "\003\072\012\073\034\u0350\107\071\111\057\001\002\000" +
    "\012\003\u036e\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0352\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0354\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0356\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0358\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u035a\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u035c\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u035e\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0360\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0362\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0364\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0366" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0368\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u036a\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u036c\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\006\003\uff61\013\uff61\001\002\000\020" +
    "\003\uffa1\012\uffa1\025\067\026\070\034\u0514\107\uffa1\111" +
    "\uffa1\001\002\000\014\003\072\012\073\034\u0370\107\071" +
    "\111\057\001\002\000\012\003\u038c\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0372\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0374\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0376\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0378\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u037a\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u037c\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u037e\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0380\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0382\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0384" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0386\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u0388\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u038a\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\006\003\uff5f\013\uff5f\001\002\000\020" +
    "\003\uffa1\012\uffa1\025\067\026\070\034\u04fa\107\uffa1\111" +
    "\uffa1\001\002\000\014\003\072\012\073\034\u038e\107\071" +
    "\111\057\001\002\000\012\003\u03a8\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0390\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0392\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0394\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0396\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0398\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u039a\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u039c\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u039e\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u03a0\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u03a2" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u03a4\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u03a6\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\006" +
    "\003\uff5d\013\uff5d\001\002\000\020\003\uffa1\012\uffa1\025" +
    "\067\026\070\034\u04e2\107\uffa1\111\uffa1\001\002\000\014" +
    "\003\072\012\073\034\u03aa\107\071\111\057\001\002\000" +
    "\012\003\u03c2\012\073\107\071\111\057\001\002\000\004" +
    "\034\u03ac\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u03ae\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u03b0\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u03b2\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u03b4\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u03b6\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u03b8\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u03ba\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u03bc\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u03be\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u03c0" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\006\003\uff5b\013\uff5b\001\002\000\020\003\uffa1" +
    "\012\uffa1\025\067\026\070\034\u04cc\107\uffa1\111\uffa1\001" +
    "\002\000\014\003\072\012\073\034\u03c4\107\071\111\057" +
    "\001\002\000\012\003\u03da\012\073\107\071\111\057\001" +
    "\002\000\004\034\u03c6\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u03c8\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u03ca\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u03cc\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u03ce\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u03d0\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u03d2\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u03d4\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u03d6\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u03d8\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\006\003\uff59\013\uff59\001\002\000\020\003\uffa1\012\uffa1" +
    "\025\067\026\070\034\u04b8\107\uffa1\111\uffa1\001\002\000" +
    "\014\003\072\012\073\034\u03dc\107\071\111\057\001\002" +
    "\000\012\003\u03f0\012\073\107\071\111\057\001\002\000" +
    "\004\034\u03de\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u03e0\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u03e2" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u03e4\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u03e6\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u03e8\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u03ea\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u03ec\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u03ee\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\006\003\uff57\013\uff57\001\002" +
    "\000\020\003\uffa1\012\uffa1\025\067\026\070\034\u04a6\107" +
    "\uffa1\111\uffa1\001\002\000\014\003\072\012\073\034\u03f2" +
    "\107\071\111\057\001\002\000\012\003\u0404\012\073\107" +
    "\071\111\057\001\002\000\004\034\u03f4\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u03f6\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u03f8\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u03fa\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u03fc\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u03fe\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0400" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0402\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\006\003\uff55\013\uff55\001" +
    "\002\000\020\003\uffa1\012\uffa1\025\067\026\070\034\u0496" +
    "\107\uffa1\111\uffa1\001\002\000\014\003\072\012\073\034" +
    "\u0406\107\071\111\057\001\002\000\012\003\u0416\012\073" +
    "\107\071\111\057\001\002\000\004\034\u0408\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u040a\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u040c\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u040e\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0410\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0412\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0414\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\006\003\uff53\013\uff53\001\002\000\020\003" +
    "\uffa1\012\uffa1\025\067\026\070\034\u0488\107\uffa1\111\uffa1" +
    "\001\002\000\014\003\072\012\073\034\u0418\107\071\111" +
    "\057\001\002\000\012\003\u0426\012\073\107\071\111\057" +
    "\001\002\000\004\034\u041a\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u041c\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u041e\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0420\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0422" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0424\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\006\003\uff51\013\uff51\001" +
    "\002\000\020\003\uffa1\012\uffa1\025\067\026\070\034\u047c" +
    "\107\uffa1\111\uffa1\001\002\000\014\003\072\012\073\034" +
    "\u0428\107\071\111\057\001\002\000\012\003\u0434\012\073" +
    "\107\071\111\057\001\002\000\004\034\u042a\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u042c\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u042e\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0430\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0432\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\006\003\uff4f\013\uff4f\001\002" +
    "\000\020\003\uffa1\012\uffa1\025\067\026\070\034\u0472\107" +
    "\uffa1\111\uffa1\001\002\000\014\003\072\012\073\034\u0436" +
    "\107\071\111\057\001\002\000\012\003\u0440\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0438\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u043a\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u043c\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u043e\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\006\003\uff4d\013\uff4d\001\002\000\020\003\uffa1\012\uffa1" +
    "\025\067\026\070\034\u046a\107\uffa1\111\uffa1\001\002\000" +
    "\014\003\072\012\073\034\u0442\107\071\111\057\001\002" +
    "\000\012\003\u044a\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0444\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0446\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0448" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\006\003\uff4b\013\uff4b\001\002\000\020\003\uffa1" +
    "\012\uffa1\025\067\026\070\034\u0464\107\uffa1\111\uffa1\001" +
    "\002\000\014\003\072\012\073\034\u044c\107\071\111\057" +
    "\001\002\000\012\003\u0452\012\073\107\071\111\057\001" +
    "\002\000\004\034\u044e\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u0450\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\006" +
    "\003\uff49\013\uff49\001\002\000\020\003\uffa1\012\uffa1\025" +
    "\067\026\070\034\u0460\107\uffa1\111\uffa1\001\002\000\014" +
    "\003\072\012\073\034\u0454\107\071\111\057\001\002\000" +
    "\012\003\u0458\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0456\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\006\003\uff47\013\uff47\001\002\000\020" +
    "\003\uffa1\012\uffa1\025\067\026\070\034\u045e\107\uffa1\111" +
    "\uffa1\001\002\000\014\003\072\012\073\034\u045a\107\071" +
    "\111\057\001\002\000\012\003\u045c\012\073\107\071\111" +
    "\057\001\002\000\006\003\uff45\013\uff45\001\002\000\012" +
    "\003\uffa1\013\uffa1\025\067\026\070\001\002\000\006\003" +
    "\uff6d\013\uff6d\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\006\003\uff46\013\uff46\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0462\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\006\003\uff48\013\uff48\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0466\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0468\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\006\003\uff4a\013\uff4a" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u046c\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u046e\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0470\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\006\003\uff4c\013\uff4c\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0474\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0476\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0478\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u047a\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\006\003\uff4e\013\uff4e\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u047e\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0480\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0482\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0484\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0486\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\006\003" +
    "\uff50\013\uff50\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u048a\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u048c" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u048e\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u0490\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0492\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0494\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\006\003\uff52\013" +
    "\uff52\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0498\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u049a\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u049c\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u049e\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u04a0" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u04a2\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u04a4\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\006" +
    "\003\uff54\013\uff54\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u04a8\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u04aa\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u04ac\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u04ae\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u04b0\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u04b2\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u04b4" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u04b6\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\006\003\uff56\013\uff56\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u04ba\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u04bc\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u04be\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u04c0\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u04c2\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u04c4\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u04c6\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u04c8" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u04ca\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\006\003\uff58\013\uff58\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u04ce\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u04d0\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u04d2\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u04d4\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u04d6\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u04d8\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u04da\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u04dc" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u04de\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u04e0\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\006" +
    "\003\uff5a\013\uff5a\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u04e4\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u04e6\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u04e8\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u04ea\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u04ec\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u04ee\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u04f0" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u04f2\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u04f4\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u04f6\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u04f8\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\006\003\uff5c\013" +
    "\uff5c\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u04fc\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u04fe\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0500\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0502\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0504" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0506\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u0508\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u050a\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u050c\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u050e\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0510\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0512\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\006\003" +
    "\uff5e\013\uff5e\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0516\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0518" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u051a\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u051c\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u051e\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0520\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0522\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0524\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0526\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0528\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u052a\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u052c\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u052e\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\006\003\uff60\013\uff60\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0532\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0534\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0536\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0538\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u053a\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u053c\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u053e\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0540\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0542\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0544\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0546" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0548\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u054a\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u054c\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\006\003\uff62\013\uff62\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0550\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0552\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0554\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0556\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0558\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u055a" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u055c\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u055e\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0560\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0562\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0564\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u0566\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u0568\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u056a\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u056c\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\006\003\uff64\013\uff64" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0570\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u0572\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u0574\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u0576\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u0578\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u057a\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u057c\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u057e\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0580\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0582\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0584\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u0586\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0588" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u058a\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u058c\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u058e\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\006\003\uff66\013\uff66\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u0592\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u0594\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u0596\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u0598\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u059a\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u059c" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u059e\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u05a0\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u05a2\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u05a4\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u05a6\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u05a8\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u05aa\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u05ac\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u05ae\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u05b0\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u05b2\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\006\003\uff68\013\uff68\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u05b6\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u05b8\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u05ba\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u05bc\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u05be\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u05c0\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u05c2\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u05c4\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u05c6\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u05c8\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u05ca" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u05cc\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u05ce\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u05d0\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u05d2\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u05d4\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u05d6\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u05d8\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\006\003" +
    "\uff6a\013\uff6a\001\002\000\004\007\u05db\001\002\000\052" +
    "\002\uff75\003\uff75\006\uff75\027\uff75\030\uff75\031\uff75\032" +
    "\uff75\037\uff75\040\uff75\043\uff75\045\uff75\046\uff75\051\uff75" +
    "\052\uff75\053\uff75\054\uff75\055\uff75\077\uff75\100\uff75\107" +
    "\uff75\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u05de\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u05e0\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u05e2\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u05e4\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u05e6" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u05e8\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\004\034\u05ea\001\002\000" +
    "\012\003\072\012\073\107\071\111\057\001\002\000\004" +
    "\034\u05ec\001\002\000\012\003\072\012\073\107\071\111" +
    "\057\001\002\000\004\034\u05ee\001\002\000\012\003\072" +
    "\012\073\107\071\111\057\001\002\000\004\034\u05f0\001" +
    "\002\000\012\003\072\012\073\107\071\111\057\001\002" +
    "\000\004\034\u05f2\001\002\000\012\003\072\012\073\107" +
    "\071\111\057\001\002\000\004\034\u05f4\001\002\000\012" +
    "\003\072\012\073\107\071\111\057\001\002\000\004\034" +
    "\u05f6\001\002\000\012\003\072\012\073\107\071\111\057" +
    "\001\002\000\004\034\u05f8\001\002\000\012\003\072\012" +
    "\073\107\071\111\057\001\002\000\004\034\u05fa\001\002" +
    "\000\012\003\072\012\073\107\071\111\057\001\002\000" +
    "\004\034\u05fc\001\002\000\012\003\072\012\073\107\071" +
    "\111\057\001\002\000\004\034\u05fe\001\002\000\012\003" +
    "\072\012\073\107\071\111\057\001\002\000\004\034\u0600" +
    "\001\002\000\012\003\072\012\073\107\071\111\057\001" +
    "\002\000\004\034\u0602\001\002\000\012\003\072\012\073" +
    "\107\071\111\057\001\002\000\006\003\uff6c\013\uff6c\001" +
    "\002\000\004\033\u0621\001\002\000\006\003\u0607\033\u0606" +
    "\001\002\000\006\003\u060d\040\u060e\001\002\000\004\040" +
    "\u0608\001\002\000\004\012\u0609\001\002\000\012\003\u028f" +
    "\012\073\107\071\111\057\001\002\000\004\013\u060b\001" +
    "\002\000\004\007\u060c\001\002\000\052\002\uff73\003\uff73" +
    "\006\uff73\027\uff73\030\uff73\031\uff73\032\uff73\037\uff73\040" +
    "\uff73\043\uff73\045\uff73\046\uff73\051\uff73\052\uff73\053\uff73" +
    "\054\uff73\055\uff73\077\uff73\100\uff73\107\uff73\001\002\000" +
    "\004\012\u061d\001\002\000\006\003\u060f\012\u0610\001\002" +
    "\000\012\003\u028f\012\073\107\071\111\057\001\002\000" +
    "\012\003\u0611\012\073\107\071\111\057\001\002\000\022" +
    "\003\uffa1\012\uffa1\013\u0618\025\067\026\070\034\u05dc\107" +
    "\uffa1\111\uffa1\001\002\000\006\003\u0613\013\u0614\001\002" +
    "\000\004\007\u0617\001\002\000\006\003\u0615\007\u0616\001" +
    "\002\000\052\002\uff6e\003\uff6e\006\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\037\uff6e\040\uff6e\043\uff6e\045\uff6e\046" +
    "\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\077\uff6e" +
    "\100\uff6e\107\uff6e\001\002\000\052\002\uff76\003\uff76\006" +
    "\uff76\027\uff76\030\uff76\031\uff76\032\uff76\037\uff76\040\uff76" +
    "\043\uff76\045\uff76\046\uff76\051\uff76\052\uff76\053\uff76\054" +
    "\uff76\055\uff76\077\uff76\100\uff76\107\uff76\001\002\000\052" +
    "\002\uff6f\003\uff6f\006\uff6f\027\uff6f\030\uff6f\031\uff6f\032" +
    "\uff6f\037\uff6f\040\uff6f\043\uff6f\045\uff6f\046\uff6f\051\uff6f" +
    "\052\uff6f\053\uff6f\054\uff6f\055\uff6f\077\uff6f\100\uff6f\107" +
    "\uff6f\001\002\000\004\007\u0619\001\002\000\052\002\uff70" +
    "\003\uff70\006\uff70\027\uff70\030\uff70\031\uff70\032\uff70\037" +
    "\uff70\040\uff70\043\uff70\045\uff70\046\uff70\051\uff70\052\uff70" +
    "\053\uff70\054\uff70\055\uff70\077\uff70\100\uff70\107\uff70\001" +
    "\002\000\004\013\u061b\001\002\000\004\007\u061c\001\002" +
    "\000\052\002\uff71\003\uff71\006\uff71\027\uff71\030\uff71\031" +
    "\uff71\032\uff71\037\uff71\040\uff71\043\uff71\045\uff71\046\uff71" +
    "\051\uff71\052\uff71\053\uff71\054\uff71\055\uff71\077\uff71\100" +
    "\uff71\107\uff71\001\002\000\012\003\u028f\012\073\107\071" +
    "\111\057\001\002\000\004\013\u061f\001\002\000\004\007" +
    "\u0620\001\002\000\052\002\uff72\003\uff72\006\uff72\027\uff72" +
    "\030\uff72\031\uff72\032\uff72\037\uff72\040\uff72\043\uff72\045" +
    "\uff72\046\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72" +
    "\077\uff72\100\uff72\107\uff72\001\002\000\004\040\u0622\001" +
    "\002\000\004\012\u0623\001\002\000\012\003\u028f\012\073" +
    "\107\071\111\057\001\002\000\004\013\u0625\001\002\000" +
    "\004\007\u0626\001\002\000\052\002\uff74\003\uff74\006\uff74" +
    "\027\uff74\030\uff74\031\uff74\032\uff74\037\uff74\040\uff74\043" +
    "\uff74\045\uff74\046\uff74\051\uff74\052\uff74\053\uff74\054\uff74" +
    "\055\uff74\077\uff74\100\uff74\107\uff74\001\002\000\010\003" +
    "\116\107\115\110\041\001\002\000\010\003\u0629\107\115" +
    "\110\041\001\002\000\010\003\uffc1\013\u0630\025\uffbd\001" +
    "\002\000\006\003\u062b\013\u062c\001\002\000\004\007\u062f" +
    "\001\002\000\006\003\u062d\007\u062e\001\002\000\052\002" +
    "\uff13\003\uff13\006\uff13\027\uff13\030\uff13\031\uff13\032\uff13" +
    "\037\uff13\040\uff13\043\uff13\045\uff13\046\uff13\051\uff13\052" +
    "\uff13\053\uff13\054\uff13\055\uff13\077\uff13\100\uff13\107\uff13" +
    "\001\002\000\052\002\uff17\003\uff17\006\uff17\027\uff17\030" +
    "\uff17\031\uff17\032\uff17\037\uff17\040\uff17\043\uff17\045\uff17" +
    "\046\uff17\051\uff17\052\uff17\053\uff17\054\uff17\055\uff17\077" +
    "\uff17\100\uff17\107\uff17\001\002\000\052\002\uff14\003\uff14" +
    "\006\uff14\027\uff14\030\uff14\031\uff14\032\uff14\037\uff14\040" +
    "\uff14\043\uff14\045\uff14\046\uff14\051\uff14\052\uff14\053\uff14" +
    "\054\uff14\055\uff14\077\uff14\100\uff14\107\uff14\001\002\000" +
    "\004\007\u0631\001\002\000\052\002\uff15\003\uff15\006\uff15" +
    "\027\uff15\030\uff15\031\uff15\032\uff15\037\uff15\040\uff15\043" +
    "\uff15\045\uff15\046\uff15\051\uff15\052\uff15\053\uff15\054\uff15" +
    "\055\uff15\077\uff15\100\uff15\107\uff15\001\002\000\004\013" +
    "\u0633\001\002\000\004\007\u0634\001\002\000\052\002\uff16" +
    "\003\uff16\006\uff16\027\uff16\030\uff16\031\uff16\032\uff16\037" +
    "\uff16\040\uff16\043\uff16\045\uff16\046\uff16\051\uff16\052\uff16" +
    "\053\uff16\054\uff16\055\uff16\077\uff16\100\uff16\107\uff16\001" +
    "\002\000\056\002\uff9a\003\uff9a\006\uff9a\007\u0639\011\033" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\037\uff9a\040\uff9a\043" +
    "\uff9a\045\uff9a\046\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\077\uff9a\100\uff9a\107\uff9a\001\002\000\006\003" +
    "\u0637\007\u0638\001\002\000\052\002\uffd5\003\uffd5\006\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\037\uffd5\040\uffd5\043" +
    "\uffd5\045\uffd5\046\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\077\uffd5\100\uffd5\107\uffd5\001\002\000\052\002" +
    "\uffdb\003\uffdb\006\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\037\uffdb\040\uffdb\043\uffdb\045\uffdb\046\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\077\uffdb\100\uffdb\107\uffdb" +
    "\001\002\000\052\002\uffd6\003\uffd6\006\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\037\uffd6\040\uffd6\043\uffd6\045\uffd6" +
    "\046\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\077" +
    "\uffd6\100\uffd6\107\uffd6\001\002\000\004\002\ufff2\001\002" +
    "\000\004\107\u0651\001\002\000\006\003\u063e\107\u063d\001" +
    "\002\000\006\003\u0643\034\u0644\001\002\000\004\034\u063f" +
    "\001\002\000\004\107\u0640\001\002\000\004\013\u0641\001" +
    "\002\000\004\007\u0642\001\002\000\052\002\uff04\003\uff04" +
    "\006\uff04\027\uff04\030\uff04\031\uff04\032\uff04\037\uff04\040" +
    "\uff04\043\uff04\045\uff04\046\uff04\051\uff04\052\uff04\053\uff04" +
    "\054\uff04\055\uff04\077\uff04\100\uff04\107\uff04\001\002\000" +
    "\004\107\u064e\001\002\000\006\003\u0646\107\u0645\001\002" +
    "\000\006\003\u0649\013\u064a\001\002\000\004\013\u0647\001" +
    "\002\000\004\007\u0648\001\002\000\052\002\uff02\003\uff02" +
    "\006\uff02\027\uff02\030\uff02\031\uff02\032\uff02\037\uff02\040" +
    "\uff02\043\uff02\045\uff02\046\uff02\051\uff02\052\uff02\053\uff02" +
    "\054\uff02\055\uff02\077\uff02\100\uff02\107\uff02\001\002\000" +
    "\004\007\u064d\001\002\000\006\003\u064b\007\u064c\001\002" +
    "\000\052\002\uff00\003\uff00\006\uff00\027\uff00\030\uff00\031" +
    "\uff00\032\uff00\037\uff00\040\uff00\043\uff00\045\uff00\046\uff00" +
    "\051\uff00\052\uff00\053\uff00\054\uff00\055\uff00\077\uff00\100" +
    "\uff00\107\uff00\001\002\000\052\002\uff06\003\uff06\006\uff06" +
    "\027\uff06\030\uff06\031\uff06\032\uff06\037\uff06\040\uff06\043" +
    "\uff06\045\uff06\046\uff06\051\uff06\052\uff06\053\uff06\054\uff06" +
    "\055\uff06\077\uff06\100\uff06\107\uff06\001\002\000\052\002" +
    "\uff01\003\uff01\006\uff01\027\uff01\030\uff01\031\uff01\032\uff01" +
    "\037\uff01\040\uff01\043\uff01\045\uff01\046\uff01\051\uff01\052" +
    "\uff01\053\uff01\054\uff01\055\uff01\077\uff01\100\uff01\107\uff01" +
    "\001\002\000\004\013\u064f\001\002\000\004\007\u0650\001" +
    "\002\000\052\002\uff03\003\uff03\006\uff03\027\uff03\030\uff03" +
    "\031\uff03\032\uff03\037\uff03\040\uff03\043\uff03\045\uff03\046" +
    "\uff03\051\uff03\052\uff03\053\uff03\054\uff03\055\uff03\077\uff03" +
    "\100\uff03\107\uff03\001\002\000\004\034\u0652\001\002\000" +
    "\004\107\u0653\001\002\000\004\013\u0654\001\002\000\004" +
    "\007\u0655\001\002\000\052\002\uff05\003\uff05\006\uff05\027" +
    "\uff05\030\uff05\031\uff05\032\uff05\037\uff05\040\uff05\043\uff05" +
    "\045\uff05\046\uff05\051\uff05\052\uff05\053\uff05\054\uff05\055" +
    "\uff05\077\uff05\100\uff05\107\uff05\001\002\000\052\002\uffd7" +
    "\003\uffd7\006\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\037" +
    "\uffd7\040\uffd7\043\uffd7\045\uffd7\046\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\077\uffd7\100\uffd7\107\uffd7\001" +
    "\002\000\052\002\uffdc\003\uffdc\006\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\037\uffdc\040\uffdc\043\uffdc\045\uffdc\046" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\077\uffdc" +
    "\100\uffdc\107\uffdc\001\002\000\004\005\u0659\001\002\000" +
    "\046\003\212\027\024\030\021\031\014\032\205\037\226" +
    "\040\177\043\203\045\202\046\216\051\211\052\217\053" +
    "\215\054\167\055\201\077\207\100\176\107\020\001\002" +
    "\000\004\006\u065b\001\002\000\004\002\ufffc\001\002\000" +
    "\016\003\022\006\015\027\024\030\021\031\014\107\020" +
    "\001\002\000\016\003\022\006\015\027\024\030\021\031" +
    "\014\107\020\001\002\000\010\003\uffe6\005\uffe6\010\uffe6" +
    "\001\002\000\010\003\uffdf\005\uffdf\010\uffdf\001\002\000" +
    "\016\003\022\006\015\027\024\030\021\031\014\107\020" +
    "\001\002\000\004\010\u0662\001\002\000\004\005\u0663\001" +
    "\002\000\046\003\212\027\024\030\021\031\014\032\205" +
    "\037\226\040\177\043\203\045\202\046\216\051\211\052" +
    "\217\053\215\054\167\055\201\077\207\100\176\107\020" +
    "\001\002\000\004\006\u0665\001\002\000\004\002\ufff3\001" +
    "\002\000\004\005\u0667\001\002\000\046\003\212\027\024" +
    "\030\021\031\014\032\205\037\226\040\177\043\203\045" +
    "\202\046\216\051\211\052\217\053\215\054\167\055\201" +
    "\077\207\100\176\107\020\001\002\000\004\006\u0669\001" +
    "\002\000\004\002\ufffa\001\002\000\004\010\u0692\001\002" +
    "\000\016\003\022\006\015\027\024\030\021\031\014\107" +
    "\020\001\002\000\026\003\022\005\u066e\006\015\007\030" +
    "\010\uffe5\011\033\027\024\030\021\031\014\107\032\001" +
    "\002\000\004\010\u0674\001\002\000\016\003\022\006\015" +
    "\027\024\030\021\031\014\107\020\001\002\000\004\010" +
    "\u0670\001\002\000\004\005\u0671\001\002\000\046\003\212" +
    "\027\024\030\021\031\014\032\205\037\226\040\177\043" +
    "\203\045\202\046\216\051\211\052\217\053\215\054\167" +
    "\055\201\077\207\100\176\107\020\001\002\000\004\006" +
    "\u0673\001\002\000\004\002\ufff1\001\002\000\004\005\u0675" +
    "\001\002\000\046\003\212\027\024\030\021\031\014\032" +
    "\205\037\226\040\177\043\203\045\202\046\216\051\211" +
    "\052\217\053\215\054\167\055\201\077\207\100\176\107" +
    "\020\001\002\000\004\006\u0677\001\002\000\004\002\ufff0" +
    "\001\002\000\010\003\u067a\005\u0679\010\u067b\001\002\000" +
    "\046\003\212\027\024\030\021\031\014\032\205\037\226" +
    "\040\177\043\203\045\202\046\216\051\211\052\217\053" +
    "\215\054\167\055\201\077\207\100\176\107\020\001\002" +
    "\000\006\005\u0689\010\u068a\001\002\000\050\003\u067e\005" +
    "\u067d\027\024\030\021\031\014\032\205\037\226\040\177" +
    "\043\203\045\202\046\216\051\211\052\217\053\215\054" +
    "\167\055\201\077\207\100\176\107\020\001\002\000\004" +
    "\002\ufffd\001\002\000\046\003\212\027\024\030\021\031" +
    "\014\032\205\037\226\040\177\043\203\045\202\046\216" +
    "\051\211\052\217\053\215\054\167\055\201\077\207\100" +
    "\176\107\020\001\002\000\056\002\uff95\003\212\005\u0680" +
    "\007\365\011\033\027\024\030\021\031\014\032\205\037" +
    "\226\040\177\043\203\045\202\046\216\051\211\052\217" +
    "\053\215\054\167\055\201\077\207\100\176\107\u0681\001" +
    "\002\000\004\006\u0685\001\002\000\046\003\212\027\024" +
    "\030\021\031\014\032\205\037\226\040\177\043\203\045" +
    "\202\046\216\051\211\052\217\053\215\054\167\055\201" +
    "\077\207\100\176\107\020\001\002\000\054\002\uff9b\003" +
    "\135\007\uff9b\011\u0682\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\037\uff9b\040\uff9b\043\uff9b\045\uff9b\046\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\077\uff9b\100\uff9b\107\uff9b" +
    "\001\002\000\022\003\137\012\046\033\367\047\037\050" +
    "\044\107\047\110\041\111\034\001\002\000\004\006\u0684" +
    "\001\002\000\004\002\uffed\001\002\000\004\002\uffec\001" +
    "\002\000\006\002\ufff6\006\u0687\001\002\000\006\002\000" +
    "\003\u0688\001\002\000\004\002\ufff5\001\002\000\046\003" +
    "\212\027\024\030\021\031\014\032\205\037\226\040\177" +
    "\043\203\045\202\046\216\051\211\052\217\053\215\054" +
    "\167\055\201\077\207\100\176\107\020\001\002\000\004" +
    "\005\u068b\001\002\000\046\003\212\027\024\030\021\031" +
    "\014\032\205\037\226\040\177\043\203\045\202\046\216" +
    "\051\211\052\217\053\215\054\167\055\201\077\207\100" +
    "\176\107\020\001\002\000\004\006\u068d\001\002\000\004" +
    "\002\uffef\001\002\000\004\006\u068f\001\002\000\004\002" +
    "\uffee\001\002\000\004\006\u0691\001\002\000\004\002\ufff7" +
    "\001\002\000\050\003\212\005\u0694\027\024\030\021\031" +
    "\014\032\205\037\226\040\177\043\203\045\202\046\216" +
    "\051\211\052\217\053\215\054\167\055\201\077\207\100" +
    "\176\107\020\001\002\000\006\002\uffff\006\u0697\001\002" +
    "\000\046\003\212\027\024\030\021\031\014\032\205\037" +
    "\226\040\177\043\203\045\202\046\216\051\211\052\217" +
    "\053\215\054\167\055\201\077\207\100\176\107\020\001" +
    "\002\000\006\002\ufffe\006\u0696\001\002\000\004\002\ufff8" +
    "\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0695\000\004\002\006\001\001\000\012\003\u0669\005" +
    "\016\006\011\007\022\001\001\000\012\003\u0665\005\016" +
    "\006\011\007\022\001\001\000\012\003\012\005\016\006" +
    "\011\007\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\156\005\016" +
    "\006\011\007\022\001\001\000\004\006\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\025\005\016\006\011\007\022\001\001\000\002\001" +
    "\001\000\012\003\142\005\016\006\011\007\022\001\001" +
    "\000\002\001\001\000\012\003\030\005\016\006\011\007" +
    "\022\001\001\000\012\003\141\005\016\006\011\007\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\051\011\035\012\034\013\044\047\050\050\042\051\041" +
    "\061\037\062\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\122" +
    "\011\035\012\034\013\121\047\050\050\042\051\120\061" +
    "\037\062\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\034" +
    "\013\061\050\042\051\060\061\037\062\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\034\013" +
    "\100\050\042\051\077\061\037\062\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\042\051\076\061" +
    "\037\001\001\000\010\050\042\051\073\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\042\051" +
    "\074\061\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\050\042\051\111\061\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\117\047" +
    "\050\001\001\000\006\011\116\047\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\042\051\133\061" +
    "\037\001\001\000\010\050\042\051\131\061\037\001\001" +
    "\000\010\050\042\051\130\061\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\140\011\035\012\034\013" +
    "\044\047\050\050\042\051\041\061\037\062\052\001\001" +
    "\000\024\010\137\011\035\012\034\013\044\047\050\050" +
    "\042\051\041\061\037\062\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\150\005\016\006\011\007\022\001" +
    "\001\000\012\003\153\005\016\006\011\007\022\001\001" +
    "\000\002\001\001\000\012\003\152\005\016\006\011\007" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\155\005\016\006\011\007\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\170" +
    "\005\174\006\162\007\220\020\212\021\205\022\226\023" +
    "\161\024\223\030\213\031\221\033\172\034\164\035\224" +
    "\036\167\037\171\040\177\041\165\042\222\043\217\044" +
    "\207\045\203\052\163\053\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0635\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\034\013\u01e6\050\042\051\060\061\037\062\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\361\005" +
    "\174\006\162\007\220\020\212\021\205\022\226\023\161" +
    "\024\223\030\213\031\221\033\172\034\164\035\224\036" +
    "\167\037\171\040\177\041\165\042\222\043\217\044\207" +
    "\045\203\052\163\053\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\237\047\050\001\001\000" +
    "\002\001\001\000\006\011\241\047\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\254\047\050\001\001\000\002\001\001\000\006" +
    "\011\256\047\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\266\047" +
    "\050\001\001\000\002\001\001\000\006\011\270\047\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\300\047\050\001\001\000" +
    "\002\001\001\000\006\011\302\047\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\333\047\050\001\001\000\006\011\310\047\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\324\047" +
    "\050\001\001\000\006\011\314\047\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\330\047\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\335\047\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\342\047\050\001\001\000\002" +
    "\001\001\000\006\011\344\047\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\354\047\050\001\001\000\002\001\001\000\006" +
    "\011\356\047\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\372\026\371" +
    "\047\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\372\026\375\047\050\001\001" +
    "\000\002\001\001\000\010\011\372\026\u0102\047\050\001" +
    "\001\000\010\011\372\026\u0100\047\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\u0108\047\050\001\001\000\002\001\001\000" +
    "\006\011\u010a\047\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\372\026\u014d\047\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\372\026\u0155\047\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\372\026\u0164\047" +
    "\050\001\001\000\010\011\372\026\u015a\047\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\372\026\u0169\047\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u0175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u0183\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u018f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u01aa\001\001\000\004\025\u0197\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u01b1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u01b9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u01c3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\034\013\u01dd" +
    "\050\042\051\060\061\037\062\052\001\001\000\016\012" +
    "\034\013\u01ca\050\042\051\060\061\037\062\052\001\001" +
    "\000\002\001\001\000\062\005\174\006\162\007\220\017" +
    "\u01dc\020\212\021\205\022\226\023\161\024\223\030\213" +
    "\031\u01d2\033\172\034\164\035\224\036\167\037\171\040" +
    "\177\041\165\042\222\043\217\044\207\045\203\052\163" +
    "\053\173\001\001\000\002\001\001\000\062\005\174\006" +
    "\162\007\220\017\u01d4\020\212\021\205\022\226\023\161" +
    "\024\223\030\213\031\u01d2\033\172\034\164\035\224\036" +
    "\167\037\171\040\177\041\165\042\222\043\217\044\207" +
    "\045\203\052\163\053\173\001\001\000\062\005\174\006" +
    "\162\007\220\017\u01d1\020\212\021\205\022\226\023\161" +
    "\024\223\030\213\031\u01d2\033\172\034\164\035\224\036" +
    "\167\037\171\040\177\041\165\042\222\043\217\044\207" +
    "\045\203\052\163\053\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\005\174\006\162" +
    "\007\220\017\u01d3\020\212\021\205\022\226\023\161\024" +
    "\223\030\213\031\u01d2\033\172\034\164\035\224\036\167" +
    "\037\171\040\177\041\165\042\222\043\217\044\207\045" +
    "\203\052\163\053\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\005\174\006\162\007\220\017\u01db\020" +
    "\212\021\205\022\226\023\161\024\223\030\213\031\u01d2" +
    "\033\172\034\164\035\224\036\167\037\171\040\177\041" +
    "\165\042\222\043\217\044\207\045\203\052\163\053\173" +
    "\001\001\000\002\001\001\000\062\005\174\006\162\007" +
    "\220\017\u01d9\020\212\021\205\022\226\023\161\024\223" +
    "\030\213\031\u01d2\033\172\034\164\035\224\036\167\037" +
    "\171\040\177\041\165\042\222\043\217\044\207\045\203" +
    "\052\163\053\173\001\001\000\062\005\174\006\162\007" +
    "\220\017\u01da\020\212\021\205\022\226\023\161\024\223" +
    "\030\213\031\u01d2\033\172\034\164\035\224\036\167\037" +
    "\171\040\177\041\165\042\222\043\217\044\207\045\203" +
    "\052\163\053\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\034\013\u01df\050\042\051\077\061\037\062" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\005\174\006\162\007\220\017\u01e2\020\212\021\205\022" +
    "\226\023\161\024\223\030\213\031\u01d2\033\172\034\164" +
    "\035\224\036\167\037\171\040\177\041\165\042\222\043" +
    "\217\044\207\045\203\052\163\053\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\005\174\006\162\007" +
    "\220\017\u01e5\020\212\021\205\022\226\023\161\024\223" +
    "\030\213\031\u01d2\033\172\034\164\035\224\036\167\037" +
    "\171\040\177\041\165\042\222\043\217\044\207\045\203" +
    "\052\163\053\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\034\013\u01ed\050\042\051\077\061\037" +
    "\062\052\001\001\000\016\012\034\013\u01e9\050\042\051" +
    "\060\061\037\062\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\005\174\006\162\007\220\017\u01ec\020" +
    "\212\021\205\022\226\023\161\024\223\030\213\031\u01d2" +
    "\033\172\034\164\035\224\036\167\037\171\040\177\041" +
    "\165\042\222\043\217\044\207\045\203\052\163\053\173" +
    "\001\001\000\002\001\001\000\062\005\174\006\162\007" +
    "\220\017\u01f0\020\212\021\205\022\226\023\161\024\223" +
    "\030\213\031\u01d2\033\172\034\164\035\224\036\167\037" +
    "\171\040\177\041\165\042\222\043\217\044\207\045\203" +
    "\052\163\053\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\174\006\162\007\220" +
    "\017\u01f2\020\212\021\205\022\226\023\161\024\223\030" +
    "\213\031\u01d2\033\172\034\164\035\224\036\167\037\171" +
    "\040\177\041\165\042\222\043\217\044\207\045\203\052" +
    "\163\053\173\001\001\000\002\001\001\000\062\005\174" +
    "\006\162\007\220\017\u01f6\020\212\021\205\022\226\023" +
    "\161\024\223\030\213\031\u01d2\033\172\034\164\035\224" +
    "\036\167\037\171\040\177\041\165\042\222\043\217\044" +
    "\207\045\203\052\163\053\173\001\001\000\062\005\174" +
    "\006\162\007\220\017\u01f5\020\212\021\205\022\226\023" +
    "\161\024\223\030\213\031\u01d2\033\172\034\164\035\224" +
    "\036\167\037\171\040\177\041\165\042\222\043\217\044" +
    "\207\045\203\052\163\053\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\005\174\006\162\007\220\017" +
    "\u01f8\020\212\021\205\022\226\023\161\024\223\030\213" +
    "\031\u01d2\033\172\034\164\035\224\036\167\037\171\040" +
    "\177\041\165\042\222\043\217\044\207\045\203\052\163" +
    "\053\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u0284\001\001\000\004\046" +
    "\u0282\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0287\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\u028f\050\042\051\u0290\061\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0292\061\037\001" +
    "\001\000\010\050\042\051\u02ba\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0294\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0296\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0298\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u029a\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u029c\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u029e" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u02a0\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u02a2\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u02a4\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u02a6\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u02a8\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u02aa\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u02ac\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u02ae\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u02b0\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u02b2\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u02b4\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u02b6\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u02b8" +
    "\061\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\050\042\051\u02bc\061\037\001\001\000\010\050\042" +
    "\051\u02e2\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u02be\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u02c0\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u02c2\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u02c4\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u02c6\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u02c8\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u02ca\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u02cc\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u02ce\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u02d0\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u02d2" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u02d4\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u02d6\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u02d8\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u02da\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u02dc\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u02de\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u02e0\061\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\042\051\u02e4\061" +
    "\037\001\001\000\010\050\042\051\u0308\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u02e6\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u02e8\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u02ea\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u02ec" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u02ee\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u02f0\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u02f2\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u02f4\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u02f6\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u02f8\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u02fa\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u02fc\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u02fe\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0300\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0302\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0304\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0306" +
    "\061\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\050\042\051\u030a\061\037\001\001\000\010\050\042" +
    "\051\u032c\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u030c\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u030e\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0310\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0312\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0314\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0316\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0318\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u031a\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u031c\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u031e\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0320" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0322\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0324\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0326\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0328\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u032a\061\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\042\051\u032e\061\037\001" +
    "\001\000\010\050\042\051\u034e\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0330\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0332\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0334\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0336\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0338\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u033a" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u033c\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u033e\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0340\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0342\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0344\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0346\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0348\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u034a\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u034c\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0350\061\037\001\001\000\010\050\042\051\u036e\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0352\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0354" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0356\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0358\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u035a\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u035c\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u035e\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0360\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0362\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0364\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0366\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0368\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u036a\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u036c\061" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0370\061\037\001\001\000\010\050\042\051" +
    "\u038c\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0372\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0374\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0376\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0378\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u037a\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u037c\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u037e\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0380\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0382\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0384\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0386\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0388" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u038a\061\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\050\042\051\u038e\061\037\001\001\000\010\050" +
    "\042\051\u03a8\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0390\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0392\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0394\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0396\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0398\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u039a\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u039c\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u039e\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u03a0\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u03a2" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u03a4\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u03a6\061\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\050\042\051\u03aa\061\037\001\001\000\010" +
    "\050\042\051\u03c2\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u03ac\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u03ae\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u03b0\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u03b2\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u03b4\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u03b6\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u03b8\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u03ba\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u03bc" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u03be\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u03c0\061\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\050\042\051\u03c4\061\037\001\001\000\010" +
    "\050\042\051\u03da\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u03c6\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u03c8\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u03ca\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u03cc\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u03ce\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u03d0\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u03d2\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u03d4\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u03d6" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u03d8\061\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\050\042\051\u03dc\061\037\001\001\000\010\050" +
    "\042\051\u03f0\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u03de\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u03e0\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u03e2\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u03e4\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u03e6\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u03e8\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u03ea\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u03ec\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u03ee\061" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\050\042\051\u03f2\061\037\001\001\000\010\050\042\051" +
    "\u0404\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u03f4\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u03f6\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u03f8\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u03fa\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u03fc\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u03fe\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0400\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0402\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0406\061\037\001\001\000\010\050\042\051\u0416\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0408\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u040a" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u040c\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u040e\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0410\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0412\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0414\061\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0418\061\037\001" +
    "\001\000\010\050\042\051\u0426\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u041a\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u041c\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u041e\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0420\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0422\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0424" +
    "\061\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0428\061\037\001\001\000\010\050\042" +
    "\051\u0434\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u042a\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u042c\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u042e\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0430\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0432\061\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0436\061" +
    "\037\001\001\000\010\050\042\051\u0440\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0438\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u043a\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u043c\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u043e" +
    "\061\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0442\061\037\001\001\000\010\050\042" +
    "\051\u044a\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0444\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0446\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0448\061\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\042\051\u044c\061\037\001" +
    "\001\000\010\050\042\051\u0452\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u044e\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0450\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0454\061\037\001\001\000\010\050\042\051\u0458\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0456\061" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\050\042\051\u045a\061\037\001\001\000\010\050\042\051" +
    "\u045c\061\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\042\051\u045e\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0460\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0462\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0464" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0466\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0468\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u046a\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u046c\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u046e\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0470\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0472\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0474\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0476\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0478\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u047a\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u047c\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u047e" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0480\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0482\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0484\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0486\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0488\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u048a\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u048c\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u048e\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0490\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0492\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0494\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0496\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0498" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u049a\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u049c\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u049e\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u04a0\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u04a2\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u04a4\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u04a6\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u04a8\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u04aa\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u04ac\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u04ae\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u04b0\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u04b2" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u04b4\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u04b6\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u04b8\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u04ba\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u04bc\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u04be\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u04c0\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u04c2\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u04c4\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u04c6\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u04c8\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u04ca\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u04cc" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u04ce\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u04d0\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u04d2\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u04d4\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u04d6\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u04d8\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u04da\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u04dc\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u04de\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u04e0\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u04e2\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u04e4\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u04e6" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u04e8\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u04ea\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u04ec\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u04ee\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u04f0\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u04f2\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u04f4\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u04f6\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u04f8\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u04fa\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u04fc\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u04fe\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0500" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0502\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0504\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0506\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0508\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u050a\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u050c\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u050e\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0510\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0512\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0514\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0516\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0518\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u051a" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u051c\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u051e\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0520\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0522\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0524\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0526\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0528\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u052a\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u052c\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u052e\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0530\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0532\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0534" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0536\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0538\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u053a\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u053c\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u053e\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0540\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0542\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0544\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0546\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0548\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u054a\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u054c\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u054e" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0550\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0552\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0554\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0556\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0558\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u055a\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u055c\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u055e\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0560\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0562\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0564\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0566\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0568" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u056a\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u056c\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u056e\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u0570\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0572\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0574\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0576\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0578\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u057a\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u057c\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u057e\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u0580\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u0582" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u0584\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u0586\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u0588\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u058a\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u058c\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u058e\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u0590\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u0592\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u0594\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u0596\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u0598\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u059a\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u059c" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u059e\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u05a0\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u05a2\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u05a4\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u05a6\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u05a8\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u05aa\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u05ac\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u05ae\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u05b0\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u05b2\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u05b4\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u05b6" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u05b8\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u05ba\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u05bc\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u05be\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u05c0\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u05c2\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u05c4\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u05c6\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u05c8\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u05ca\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u05cc\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u05ce\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u05d0" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u05d2\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u05d4\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u05d6\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u05d8\061\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\050\042\051\u05dc" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u05de\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u05e0\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u05e2\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u05e4\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u05e6\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u05e8\061\037\001\001\000\002\001" +
    "\001\000\010\050\042\051\u05ea\061\037\001\001\000\002" +
    "\001\001\000\010\050\042\051\u05ec\061\037\001\001\000" +
    "\002\001\001\000\010\050\042\051\u05ee\061\037\001\001" +
    "\000\002\001\001\000\010\050\042\051\u05f0\061\037\001" +
    "\001\000\002\001\001\000\010\050\042\051\u05f2\061\037" +
    "\001\001\000\002\001\001\000\010\050\042\051\u05f4\061" +
    "\037\001\001\000\002\001\001\000\010\050\042\051\u05f6" +
    "\061\037\001\001\000\002\001\001\000\010\050\042\051" +
    "\u05f8\061\037\001\001\000\002\001\001\000\010\050\042" +
    "\051\u05fa\061\037\001\001\000\002\001\001\000\010\050" +
    "\042\051\u05fc\061\037\001\001\000\002\001\001\000\010" +
    "\050\042\051\u05fe\061\037\001\001\000\002\001\001\000" +
    "\010\050\042\051\u0600\061\037\001\001\000\002\001\001" +
    "\000\010\050\042\051\u0602\061\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\u0609\050" +
    "\042\051\u0290\061\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\u0619\050\042\051\u0290\061\037\001\001" +
    "\000\012\027\u0611\050\042\051\u0290\061\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\u061d\050" +
    "\042\051\u0290\061\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\u0623\050\042\051\u0290\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u0631\047\050\001\001\000\006\011\u0629\047\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\u0659\005\174\006\162\007\220\020\212\021\205" +
    "\022\226\023\161\024\223\030\213\031\221\033\172\034" +
    "\164\035\224\036\167\037\171\040\177\041\165\042\222" +
    "\043\217\044\207\045\203\052\163\053\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\u065e\005\016" +
    "\006\011\007\022\001\001\000\012\003\u065d\005\016\006" +
    "\011\007\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\u0660\005\016\006\011\007\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\u0663\005\174" +
    "\006\162\007\220\020\212\021\205\022\226\023\161\024" +
    "\223\030\213\031\221\033\172\034\164\035\224\036\167" +
    "\037\171\040\177\041\165\042\222\043\217\044\207\045" +
    "\203\052\163\053\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\u0667\005\174\006" +
    "\162\007\220\020\212\021\205\022\226\023\161\024\223" +
    "\030\213\031\221\033\172\034\164\035\224\036\167\037" +
    "\171\040\177\041\165\042\222\043\217\044\207\045\203" +
    "\052\163\053\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\u0677\005\016\006\011" +
    "\007\022\001\001\000\012\003\u066c\005\016\006\011\007" +
    "\022\001\001\000\002\001\001\000\012\003\u066e\005\016" +
    "\006\011\007\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\004\u0671\005\174\006\162\007\220\020\212" +
    "\021\205\022\226\023\161\024\223\030\213\031\221\033" +
    "\172\034\164\035\224\036\167\037\171\040\177\041\165" +
    "\042\222\043\217\044\207\045\203\052\163\053\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\u0675\005\174\006\162\007\220\020\212\021" +
    "\205\022\226\023\161\024\223\030\213\031\221\033\172" +
    "\034\164\035\224\036\167\037\171\040\177\041\165\042" +
    "\222\043\217\044\207\045\203\052\163\053\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\u068f\005\174\006\162\007\220\020\212\021\205" +
    "\022\226\023\161\024\223\030\213\031\221\033\172\034" +
    "\164\035\224\036\167\037\171\040\177\041\165\042\222" +
    "\043\217\044\207\045\203\052\163\053\173\001\001\000" +
    "\002\001\001\000\062\004\u067b\005\174\006\162\007\220" +
    "\020\212\021\205\022\226\023\161\024\223\030\213\031" +
    "\221\033\172\034\164\035\224\036\167\037\171\040\177" +
    "\041\165\042\222\043\217\044\207\045\203\052\163\053" +
    "\173\001\001\000\002\001\001\000\062\004\u0685\005\174" +
    "\006\162\007\220\020\212\021\205\022\226\023\161\024" +
    "\223\030\213\031\221\033\172\034\164\035\224\036\167" +
    "\037\171\040\177\041\165\042\222\043\217\044\207\045" +
    "\203\052\163\053\173\001\001\000\062\004\u067e\005\174" +
    "\006\162\007\220\020\212\021\205\022\226\023\161\024" +
    "\223\030\213\031\221\033\172\034\164\035\224\036\167" +
    "\037\171\040\177\041\165\042\222\043\217\044\207\045" +
    "\203\052\163\053\173\001\001\000\002\001\001\000\062" +
    "\004\u0682\005\174\006\162\007\220\020\212\021\205\022" +
    "\226\023\161\024\223\030\213\031\221\033\172\034\164" +
    "\035\224\036\167\037\171\040\177\041\165\042\222\043" +
    "\217\044\207\045\203\052\163\053\173\001\001\000\002" +
    "\001\001\000\024\010\137\011\035\012\034\013\044\047" +
    "\050\050\042\051\041\061\037\062\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\u068d" +
    "\005\174\006\162\007\220\020\212\021\205\022\226\023" +
    "\161\024\223\030\213\031\221\033\172\034\164\035\224" +
    "\036\167\037\171\040\177\041\165\042\222\043\217\044" +
    "\207\045\203\052\163\053\173\001\001\000\002\001\001" +
    "\000\062\004\u068b\005\174\006\162\007\220\020\212\021" +
    "\205\022\226\023\161\024\223\030\213\031\221\033\172" +
    "\034\164\035\224\036\167\037\171\040\177\041\165\042" +
    "\222\043\217\044\207\045\203\052\163\053\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\u0692\005\174\006\162\007\220\020\212\021\205\022" +
    "\226\023\161\024\223\030\213\031\221\033\172\034\164" +
    "\035\224\036\167\037\171\040\177\041\165\042\222\043" +
    "\217\044\207\045\203\052\163\053\173\001\001\000\002" +
    "\001\001\000\062\004\u0694\005\174\006\162\007\220\020" +
    "\212\021\205\022\226\023\161\024\223\030\213\031\221" +
    "\033\172\034\164\035\224\036\167\037\171\040\177\041" +
    "\165\042\222\043\217\044\207\045\203\052\163\053\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Asintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Asintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Asintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    boolean esDAssig=false;

    public Asintactico(java_cup.runtime.Scanner s,ArrayList<Error1> m) {super(s); ManejadorDeErrores =m; }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Asintactico$actions {


void print(String msj)
   {System.out.println(msj);}

  private final Asintactico parser;

  /** Constructor */
  CUP$Asintactico$actions(Asintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action_part00000000(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Asintactico$result;

      /* select the action based on the action number */
      switch (CUP$Asintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		RESULT = start_val;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Asintactico$parser.done_parsing();
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BEGIN ::= DECLARE DECLARE_BODY MAIN MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",dleft-1,dright,"Syntax Error: curly braces '{' '}' expected for 'MAIN block', are missing. Line: "+(dleft+1)+", column: "+(dright+5)+"."));
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly brace '{' expected after reserved word 'DECLARE', is missing. Line: "+(eleft+1)+", column: "+(eright+8)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BEGIN ::= DECLARE DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly brace '{' expected after reserved word DECLARE, is missing. Line: "+(eleft+1)+", column: "+(eright+8)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
  parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly brace '{' expected after reserved word 'MAIN' is missing. Line: "+(eleft+1)+", column: "+(eright-1)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BEGIN ::= error DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		
   parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: reserved word 'DECLARE' and left curly brace '{' are missing. Line: "+(eleft+1)+", column: "+(eright+8)));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BEGIN ::= DECLARE DECLARE_BODY MAIN MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly brace '{' expected after reserved word 'DECLARE', is missing. Line: "+(eleft+1)+", column: "+(eright+8)+"."));
 parser.ManejadorDeErrores.add(new Error1("ES",dleft-1,dright,"Syntax Error: left curly brace '{' expected after reserved word 'MAIN', is missing. Line: "+(dleft+1)+", column: "+(dright+5)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BEGIN ::= CURLY_BR1 DECLARE_BODY CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected reserved word 'DECLARE', is missing. Line: "+(eleft+1)+", column: "+(eright)+"."));
 parser.ManejadorDeErrores.add(new Error1("ES",dleft-1,dright,"Syntax Error: expected reserved word 'MAIN', is missing. Line: "+(dleft+1)+", column: "+(dright)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BEGIN ::= error CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected value 'DECLARE' Missing. Line: "+(eleft+1)+", column: "+(eright+8)));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BEGIN ::= DECLARE DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",dleft-1,dright,"Syntax Error: left curly brace '{' expected after reserved word 'DECLARE', is missing. Line: "+(dleft+1)+", column: "+(dright+8)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",cleft-1,cright,"Syntax Error: reserved word 'MAIN' expected after 'DECLARE block', is missing. Line: "+(cleft+1)+", column: "+(cright)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right curly brace '}' expected for closing 'MAIN block', is missing."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected after 'MAIN block'. Line: "+(eleft+1)+", column: "+(eright)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BEGIN ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax error: malformed program structure, conflict starts in line: "+(eleft+1)+", column: "+(eright)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BEGIN ::= error DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected before 'DECLARE block'. Line: "+(eleft+1)+", column: "+(eright)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BEGIN ::= error CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected value reserved word 'DECLARE' is missing. Line: "+(eleft+1)+", column: "+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BEGIN ::= DECLARE error CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected after reserved word 'DECLARE'. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BEGIN ::= DECLARE error DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly bracket expected '{' after reserved word 'DECLARE'. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY error MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected before 'MAIN block'. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY error CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected reserved word 'MAIN' is missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN error CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected after reserved word 'MAIN'. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN error MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly bracket expected '{' after reserved word 'MAIN' is missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARE_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARE_BODY ::= DEC SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARE_BODY ::= DEC DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: semicolon ';' at the end of the sentence is missing. Line: "+(eleft+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARE_BODY ::= DATA_TYPE ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		
    if(parser.esDAssig){
        boolean insert = FCompiler.ts.insertar(parser.tipoActual+"");
        if (!(i.toString().equalsIgnoreCase(parser.tipoActual))){
            if(parser.tipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error: identifier: "+"\""+parser.salidaTipoActual+"\" has "+parser.tipoActual+" type. Type expected: "+ i +"."+" Line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }else{
                        String error = "Semantic error: Found: "+"\""+parser.salidaTipoActual+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ i+". Line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }
                    
                }
        }else{  
            if(insert){
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","tipo",i);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "linea", parser.fil);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "columna", parser.col);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","valor",parser.valorActual+"");
                System.out.println("Valores "+parser.tipoActual+". Fila: "+parser.fil+". Columna: "+parser.col+". Valor: "+parser.valorActual);
            }else{
                String error = "Semantic error: identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+(iright)+".";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
            }
        }
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARE_BODY ::= DATA_TYPE ASSIG DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: semicolon ';' expected at the end of the sentence, is missing. Line: "+(eleft+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARE_BODY ::= ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		
    if(parser.esDAssig){
        //String error = "Semantic error in line: "+(parser.fil)+", column: "+parser.col+". Identifier: "+"\""+parser.tipoActual+"\" not declared.";
        //parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
    } else{
        System.out.println("NO SE QUE HACES AQUI XD");
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARE_BODY ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  malformed 'declare body' structure, conflict starts in line: "+(eleft+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARE_BODY ::= error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION expected before semicolon ';', is missing. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARE_BODY ::= DEC error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  semicolon ';' expected at the end of the sentence is missing. Line: "+(eleft+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARE_BODY ::= DATA_TYPE error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: assignment statement expected. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARE_BODY ::= DATA_TYPE ASSIG error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: semicolon ';' is missing. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARE_BODY ::= error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION expected before semicolon ';', is missing. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARE_BODY ::= ASSIG error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  semicolon ';' expected ath the end of the sentence is missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARE_BODY2 ::= DEC SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARE_BODY2 ::= DEC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON (';') Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARE_BODY2 ::= ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;
		
    if(parser.esDAssig){
        String error = "Semantic error: Identifier: "+"\""+parser.tipoActual+"\" not declared. Line: "+(parser.fil)+", column: "+parser.col+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
    } else{
        System.out.println("NO SE QUE HACES AQUI XD");
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARE_BODY2 ::= DATA_TYPE ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
    if(parser.esDAssig){
        boolean insert = FCompiler.ts.insertar(parser.tipoActual+"");
        if (!(i.toString().equalsIgnoreCase(parser.tipoActual))){
            if(parser.tipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error: Identifier: "+"\""+parser.salidaTipoActual+"\" has "+parser.tipoActual+" type. Type expected: "+ i +". Line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }else{
                        String error = "Semantic error: Found: "+"\""+parser.salidaTipoActual+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ i+". Line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }

                }
        }else{
            if(insert){
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","tipo",i);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "linea", parser.fil);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "columna", parser.col);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","valor",parser.valorActual+"");
                System.out.println("Valores "+parser.tipoActual+". Fila: "+parser.fil+". Columna: "+parser.col+". Valor: "+parser.valorActual);
            }else{
                String error = "Semantic error: Identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
            }
        }
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARE_BODY2 ::= error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARE_BODY2 ::= DEC error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARE_BODY2 ::= error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARE_BODY2 ::= ASSIG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARE_BODY2 ::= DATA_TYPE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Expected assignment statement. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARE_BODY2 ::= DATA_TYPE ASSIG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASSIG ::= ID ASSIG_OP EXP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
        if(datoEncontrado != null ){
            if (!(datoEncontrado.tipo.equalsIgnoreCase(parser.tipoActual))){
                if(parser.salidaTipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error: Identifier: "+"\""+parser.salidaTipoActual+"\" has "+parser.tipoActual+" type. Type expected: "+ datoEncontrado.tipo+". Line: "+(ileft+1)+", column: "+iright+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
                    }else{
                        String error = "Semantic error: Found: "+"\""+parser.salidaTipoActual+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ datoEncontrado.tipo+". Line: "+(ileft+1)+", column: "+iright+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
                    }

                }
            }else{
                datoEncontrado.valor = e;
                System.out.println("Valor insertado es "+e);
            }

        }else{
            parser.valorActual = e;
            System.out.println("Valor insertado es "+e);
            parser.col = iright+"";
            parser.fil = (ileft+1)+"";
            if(parser.esId){
                parser.esDAssig = true;
            }
           /*
           String error = "Semantic error: identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
           parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));*/
        }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASSIG ::= error ASSIG_OP EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Identifier expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASSIG ::= ID error EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ASSIG operator '=' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASSIG ::= ID ASSIG_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DATA_TYPE ::= STRING_WORD 
            {
              Object RESULT =null;
		 parser.tipoActual="STRING"; RESULT = parser.tipoActual;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DATA_TYPE ::= INT_WORD 
            {
              Object RESULT =null;
		 parser.tipoActual="INT"; RESULT = parser.tipoActual; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DATA_TYPE ::= BOOLEAN_WORD 
            {
              Object RESULT =null;
		 parser.tipoActual="BOOLEAN"; RESULT = parser.tipoActual;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DATA_TYPE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Type Data expected . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		

        TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
        if(datoEncontrado != null){
            //SINTETIZAR TIPO

            parser.tipoActual = datoEncontrado.tipo;
            parser.salidaTipoActual = i;
            parser.esId = true;
            if(datoEncontrado.valor != null){
                RESULT = datoEncontrado.valor;
            }else{
                String error = "Semantic error: Identifier:"+"\""+i+"\" not initialized. Line: "+(ileft+1)+", column: "+iright+".";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
            }
        }else{
            String error = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
            parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
        }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        parser.tipoActual = "INT";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= TRUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        parser.tipoActual = "BOOLEAN";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= FALSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        parser.tipoActual = "BOOLEAN";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        parser.tipoActual = "STRING";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        RESULT = (int) e1;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= PARENTH1 EXP PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
        //SINTETIZAR TIPO
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= COND 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  malformed expression structure, conflict starts in line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STRINGVAL ::= STRINGVALAUX 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(s1!=null){
        RESULT=s1.toString();
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STRINGVAL ::= STRINGVALAUX ADD_OP STRINGVAL 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(s1!=null && s2 !=null){
        RESULT=s1.toString()+s2.toString();
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STRINGVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  VALUE Missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STRINGVAL ::= STRINGVALAUX error STRINGVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SUM operator '+' Missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STRINGVALAUX ::= STRING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
String sincomillas= f.replace('"',' ');
sincomillas=sincomillas.replaceAll(" ","");
RESULT=sincomillas;
parser.valorActual= f;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRINGVALAUX ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("String")){
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS PARA YA PODER MANDARSELO SINTENTIZADAMENTE*/
          if(identificador.valor != null){
              parser.valorActual=identificador.valor.toString();
               parser.valorActual=identificador.valor;
               RESULT=identificador.valor;
               /*PENDIENTE PARA QUE QUEDE BIEN CUANDO SE LE AGREGA EL VALOR*/
           }else{
              String valorNulo = "Semantic error: Identifier: "+"\""+i+"\" not initialized. Line: "+(ileft+1)+", column: "+iright+".";
              parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,valorNulo));
            }
        }else{
        String TipoError = "Semantic error. Identifier: "+"\""+i+"\" is not STRING type. Expected: STRING type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRINGVALAUX ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRING value Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BOOLEANVAL ::= TRUE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT=f; parser.valorActual=f; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BOOLEANVAL ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT=f; parser.valorActual=f; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BOOLEANVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Boolean")){
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          if(identificador.valor != null){
              parser.valorActual=identificador.valor.toString();
               parser.valorActual=identificador.valor;
               RESULT=identificador.valor;
           }else{
              String valorNulo = "Semantic error: The value of the identifier: "+"\""+i+"\" is not initialized. Line: "+(ileft+1)+", column: "+iright+".";
              parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,valorNulo));
            }
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not Boolean type. Expected: BOOLEAN type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BOOLEANVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Boolean datatype expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_ARIT ::= ADD_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT="ADD_OP"; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_ARIT ::= SUBS_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT="SUBS_OP"; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_LOG ::= AND_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT="AND_OP"; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_LOG ::= OR_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT="OR_OP"; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_REL ::= EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "EQUAL_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_REL ::= GREATER_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "GREATER_EQUAL_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_REL ::= LESS_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "LESS_EQUAL_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_REL ::= NOT_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "NOT_EQUAL_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_REL ::= LESS_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "LESS_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_REL ::= GREATER_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "GREATER_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COND ::= F OP_LOG COND 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(o.toString().equalsIgnoreCase("AND_OP")){
        if(e1.toString().equalsIgnoreCase("TRUE")){
            if(e2.toString().equalsIgnoreCase("TRUE")){
                RESULT = "TRUE";
            }else if(e2.toString().equalsIgnoreCase("FALSE")){
                RESULT = "FALSE";
            } else{
                parser.ManejadorDeErrores.add(new Error1("ES",e1left-1,e1right,"Syntax Error: Boolean value expected. Line: "+(e1left+1)+", column: "+e1right+"."));
            }
        } else if(e1.toString().equalsIgnoreCase("FALSE")){
            RESULT = "FALSE";
        }
    }else if (o.toString().equalsIgnoreCase("OR_OP")){
        if(e1.toString().equalsIgnoreCase("TRUE") || e2.toString().equalsIgnoreCase("TRUE")){
                RESULT = "TRUE";
        } else {
            RESULT = "FALSE";
        }
    }else{
        parser.ManejadorDeErrores.add(new Error1("ES",oleft-1,oright,"Syntax Error: Logic operator expected. Line: "+(oleft+1)+", column: "+oright+"."));
    }


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COND ::= EXPNUM OP_REL EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(o.equals("EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) == Integer.parseInt(e2.toString());
        System.out.println("Primera expresion "+e1+". Segunda expresion "+e2+". Result "+ RESULT);
    }else if(o.equals("GREATER_OP")){
        RESULT = Integer.parseInt(e1.toString()) > Integer.parseInt(e2.toString());
    }else if(o.equals("LESS_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) <= Integer.parseInt(e2.toString());
    }else if(o.equals("NOT_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) != Integer.parseInt(e2.toString());
    }else if(o.equals("LESS_OP")){
        RESULT = Integer.parseInt(e1.toString()) < Integer.parseInt(e2.toString());
    }else if(o.equals("GEATER_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) >= Integer.parseInt(e2.toString());
    }
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COND ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT=f;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // F ::= BOOLEANVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT = i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("F",48, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // F ::= PARENTH1 COND PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		RESULT=i; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("F",48, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPNUM ::= T SUBS_OP EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        System.out.println("e1: "+e1+"e2: "+e2);
        RESULT = (int) e1 - (int) e2;
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPNUM ::= T ADD_OP EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        System.out.println("e1: "+e1+"e2: "+e2);
        RESULT = (int) e1+ (int) e2;
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPNUM ::= T 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        RESULT = (int) i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPNUM ::= error ADD_OP EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPNUM ::= T error EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Sum/Substraction operator expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPNUM ::= T ADD_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPNUM ::= error SUBS_OP EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPNUM ::= T SUBS_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPNUM ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T ::= INTVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        RESULT = (int) i;
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("T",47, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // T ::= PARENTH1 EXPNUM PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
        RESULT = (int) i;
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("T",47, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INTVAL ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.tipoActual = "INT";    
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INTVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
    if(datoEncontrado != null){
        if(datoEncontrado.tipo.equalsIgnoreCase("INT")){
            //SINTETIZAR TIPO
            parser.tipoActual = datoEncontrado.tipo;
            parser.salidaTipoActual = i;
            parser.esId = true;
            if(datoEncontrado.valor != null){
                RESULT = datoEncontrado.valor;
            }else{
                String error = "Semantic error: Identifier: "+"\""+i+"\" not initialized. Line: "+(ileft+1)+", column: "+iright+".";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
            }
        }else{
            String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not an INT type. Expected: INT type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
            parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String error = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
    }


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DEC ::= DATA_TYPE ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		

    boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        FCompiler.ts.actualizar(i+"","tipo",parser.tipoActual);
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
    }else{
        String duplicado = "Semantic error: Identifier: "+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DEC ::= error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Data Type expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DEC ::= DATA_TYPE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DATA_STR ::= NODE_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DATA_STR ::= ARRAYSTRING_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DATA_STR ::= FEATURES_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DATA_STR ::= GROUP_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DATA_STR ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: data structure expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
  boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        System.out.println(" Voy a insertar "+i );
        FCompiler.ts.actualizar(i+"","tipo","NODE");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        System.out.print(">>> "+i+"\n");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
       
         
/*COMPROBANDO QUE EL SEGUNDO ID:f sea de tipo FEATURES*/
        boolean search = FCompiler.ts.buscarLex(f+"");
        if(search){
        System.out.println(" Voy a buscar el tipo "+f );
        String Tipo=FCompiler.ts.RegresarTipo(f+"");
        System.out.println(Tipo);
        if(Tipo.equalsIgnoreCase("FEATURES")){


         /*AQUI IRIA LA ASIGNACION DEL VALOR DE FEATURES Y LOS STRING VAL*/
          FCompiler.ts.actualizar(i+"","nombre",j);
        FCompiler.ts.actualizar(i+"", "trabajo", k);
        FCompiler.ts.actualizar(i+"", "setfeatures", f);
           
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+f+"\" is not type FEATURES. Expected: FEATURES type identifier/value. Line: "+(fleft+1)+", column: "+fright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+f+"\" not declared. Line: "+(fleft+1)+", column: "+fright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,NoExiste));
    }


    }else{
        String duplicado = "Semantic error: Identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }




              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NODE_STR ::= error ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'NODE' word expected  before identifier. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NODE_STR ::= NODE error ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Identifier expected  before assignment. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NODE_STR ::= NODE ID error NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Assignment operator '=' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NODE_STR ::= NODE ID ASSIG_OP error NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'NEW' word expected after assignment operator. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NODE_STR ::= NODE ID ASSIG_OP NEW error PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'NODE' word expected after 'NEW' word. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE error ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left Parenthesis '(' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 error COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ID expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID error STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMMA_SIGN ',' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN error COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRINGVAL expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL error STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMMA_SIGN ',' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Right Parenthesis ')' expected .Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SEMICOLON ';' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        System.out.println(" Voy a insertar "+i );
        FCompiler.ts.actualizar(i+"","tipo","ARRAYSTRING");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        System.out.print(">>> "+i+"\n");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
         System.out.println(" Voy a insertar "+j );
         FCompiler.ts.actualizar(i+"","valor",j);
         RESULT=i;

    }else{
        String duplicado = "Semantic error: Identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Braket ']' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARRAYSTRING_STR ::= error ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ARRAYSTRING type expected before identifier. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARRAYSTRING_STR ::= ARRAYSTRING error ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARRAYSTRING_STR ::= ARRAYSTRING ID error NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: ASSIG '=' missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP error BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: 'NEW' word expected after assignment operator. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW error ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Braket '[' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 error BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: String value/identifier expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Braket ']'  missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing  . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ARRAYVAL ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 RESULT=i;


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ARRAYVAL ::= STRINGVAL COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
RESULT= i+","+j;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ARRAYVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ARRAYVAL ::= error COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARRAYVAL ::= STRINGVAL error ARRAYVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMMA SING ',' expected . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARRAYVAL ::= STRINGVAL COMMA_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        System.out.println(" Voy a insertar "+i );
        FCompiler.ts.actualizar(i+"","tipo","FEATURES");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        System.out.print(">>> "+i+"\n");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
        /*voy a introducir el valor del features val*/
        String valores[]=e.toString().split(",");
        if(valores.length==21){
         
            FCompiler.ts.actualizar(i+"","Affability",valores[0]);
            FCompiler.ts.actualizar(i+"","Reasoning",valores[1]);
            FCompiler.ts.actualizar(i+"","Stability",valores[2]);
            FCompiler.ts.actualizar(i+"","Dominance",valores[3]);
            FCompiler.ts.actualizar(i+"","Liveliness",valores[4]);
            FCompiler.ts.actualizar(i+"","CareToStandards",valores[5]);
            FCompiler.ts.actualizar(i+"","Dare",valores[6]);
            FCompiler.ts.actualizar(i+"","Sensitivity",valores[7]);
            FCompiler.ts.actualizar(i+"","Surveillance",valores[8]);
            FCompiler.ts.actualizar(i+"","Abstraction",valores[9]);
            FCompiler.ts.actualizar(i+"","Privacy",valores[10]);
            FCompiler.ts.actualizar(i+"","apprehension",valores[11]);
            FCompiler.ts.actualizar(i+"","OpennessToChange",valores[12]);
            FCompiler.ts.actualizar(i+"","SelfSufficiency",valores[13]);
            FCompiler.ts.actualizar(i+"","Perfectionism",valores[14]);
            FCompiler.ts.actualizar(i+"","Tension",valores[15]);
            FCompiler.ts.actualizar(i+"","Sociability",valores[16]);
            FCompiler.ts.actualizar(i+"","Anxiety",valores[17]);
            FCompiler.ts.actualizar(i+"","Hardness",valores[18]);
            FCompiler.ts.actualizar(i+"","Independence",valores[19]);
            FCompiler.ts.actualizar(i+"","SelfControl",valores[20]);
        
        }
    }else{
        String duplicado = "Semantic error: Identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
        System.out.println("No inserto "+ duplicado);
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FEATURES_STR ::= FEATURES error ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ID expected after 'FEATURES' word. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FEATURES_STR ::= FEATURES ID error NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Assignment operator ('=') Missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FEATURES_STR ::= FEATURES ID ASSIG_OP error FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'NEW' word expected after assignment operator. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW error PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'FEATURES' word expected after identifier. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES error FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left Parenthesis '(' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  FeaturesVal type expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Right Parenthesis ')' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SEMICOLON(';') missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).value;
		int e11left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).right;
		Object e11 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).value;
		int e12left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).right;
		Object e12 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).value;
		int e13left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).left;
		int e13right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).right;
		Object e13 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).value;
		int e14left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).left;
		int e14right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).right;
		Object e14 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		int e16left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int e16right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e16 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		int e17left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int e17right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e17 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		int e18left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int e18right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e18 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int e19left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int e19right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e19 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int e20left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e20right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e20 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int e21left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e21right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e21 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
RESULT=e1+","+e2+","+e3+","+e4+","+e5+","+e6+","+e7+","+e8+","+e9+","+e10+","+e11+","+e12+","+e13+","+e14+","+e15+","+e16+","+e17+","+e18+","+e19+","+e20+","+e21;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FEATURESVAL ::= error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FEATURESVAL ::= EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FEATURESVAL ::= EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // MAIN_BODY ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // MAIN_BODY ::= SENTEN MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // MAIN_BODY ::= SENTEN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right curly brace '}' expected for closing MAIN BODY block, is missing.. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // BODY ::= SENTEN BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // BODY ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right curly brace '}' expected for closing IF/ELSE body, is missing. Line: "+(eleft+1)+", column: "+eright));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCES ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTENCES",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCES ::= SENTEN SENTENCES 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTENCES",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTEN ::= INPUT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTEN ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTEN ::= FUNCT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTEN ::= DATA_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTEN ::= DECLARE_BODY2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTEN ::= CTRL_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        System.out.println(" Voy a insertar "+i );
        FCompiler.ts.actualizar(i+"","tipo","GROUP");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        System.out.print(">>> "+i+"\n");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
        /*COMPROBAR QUE EL PRIMER ID SEA FEATURES Y EL SEGUNDO ARRAYSTRING*/
        
        /*COMPROBANDO QUE EL SEGUNDO ID:f sea de tipo FEATURES*/
        boolean search = FCompiler.ts.buscarLex(f+"");
    if(search){
        System.out.println(" Voy a buscar el tipo "+f );
        String Tipo=FCompiler.ts.RegresarTipo(f+"");
        System.out.println(Tipo);
        if(Tipo.equalsIgnoreCase("FEATURES")){
          //TSDatos identificador=FCompiler.ts.buscar(f+"");
          /*COMPROBANDO QUE EL SEGUNDO ID:c sea de tipo ARRAYSTRING*/
        boolean search2 = FCompiler.ts.buscarLex(c+"");
    if(search2){
        System.out.println(" Voy a buscar el tipo "+c );
        String Tipo2=FCompiler.ts.RegresarTipo(c+"");
        System.out.println(Tipo2);
        if(Tipo2.equalsIgnoreCase("ARRAYSTRING")){
          //TSDatos identificador=FCompiler.ts.buscar(c+"");


                   /*AQUI YA LE VAMOS AGREGAR LOS VALORES A GROUP*/

                   /*¿que ocupo? - un metodo que me de el atributo features. , un atributo que guarde max o min, valor*/
                    FCompiler.ts.actualizar(i+"", "valor", c);
                    FCompiler.ts.actualizar(i+"", "maxomin", j);
                    FCompiler.ts.actualizar(i+"", "setfeatures", f);



          
        }else{
        String TipoError = "Semantic error: Identifier:"+"\""+c+"\" is not ArrayString type. Line:  "+(cleft+1)+", column: "+cright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,TipoError));
        System.out.println("no se declaro "+ TipoError);
        }
        }else{
        String NoExiste = "Semantic error: Identifier:"+"\""+c+"\" has not been declared. Line: "+(cleft+1)+", column: "+cright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,NoExiste));
        System.out.println("no se declaro "+ NoExiste);
         }
          
        }else{
        System.out.println("TIPO QUE RECIBIO MAL "+ Tipo);
        String TipoError = "Semantic error: Identifier:"+"\""+f+"\" is not Features type. Line: "+(fleft+1)+", column: "+fright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,TipoError));
        System.out.println("no se declaro "+ TipoError);
        }
    }else{
        String NoExiste = "Semantic error:  Identifier:"+"\""+c+"\" is not type ArrayString. Line: "+(fleft+1)+", column: "+fright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,NoExiste));
        System.out.println("no se declaro "+ NoExiste);
    }
    
    /*COMPROBANDO QUE EL SEGUNDO ID:c sea de tipo ARRAYSTRING*/
        boolean search2 = FCompiler.ts.buscarLex(c+"");
    if(search2){
        System.out.println(" Voy a buscar el tipo "+c );
        String Tipo2=FCompiler.ts.RegresarTipo(c+"");
        System.out.println(Tipo2);
        if(Tipo2.equalsIgnoreCase("ARRAYSTRING")){
          //TSDatos identificador=FCompiler.ts.buscar(c+"");
          
          
        }else{
        System.out.println("TIPO QUE RECIBIO MAL "+ Tipo2);
        String TipoError = "Semantic error:  Identifier:"+"\""+c+"\" is not type ArrayString. Line: "+(cleft+1)+", column: "+cright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,TipoError));
        System.out.println("no se declaro "+ TipoError);
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+c+"\" not declared. Line: "+(cleft+1)+", column: "+cright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,NoExiste));
        System.out.println("no se declaro "+ NoExiste);
    }

    }else{
        
        
        String duplicado = "Semantic error: Identifier: "+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
        System.out.println("No inserto "+ duplicado);
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // GROUP_STR ::= GROUP error ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // GROUP_STR ::= GROUP ID error NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ASSIG('=') missing . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // GROUP_STR ::= GROUP ID ASSIG_OP error GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'NEW' expected before missing . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // GROUP_STR ::= GROUP ID ASSIG_OP NEW error PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'GROUP' expected before missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP error ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 error COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID error MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMA SING ',' expected missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN error COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: sentence 'MAX' or 'MIN' expected . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMA SING ',' expected missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')' . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // MAXMIN ::= MAX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
RESULT=i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // MAXMIN ::= MIN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
RESULT=i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INPUT ::= READFEAT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INPUT ::= READS 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // READFEAT ::= READFEATVAL PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Int")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS, pero creo que falta para poderle meter datos con esta funcion.*/
          
        }else{
       String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type INT. Expected: INT type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // READFEAT ::= READFEATVAL error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // READFEAT ::= READFEATVAL PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // READFEAT ::= READFEATVAL PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // READFEAT ::= READFEATVAL PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // READS ::= READSTRING PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("String")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS, pero creo que falta para poderle meter datos con esta funcion.*/
          
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type STRING. Expected: STRING type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // READS ::= READSTRING error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // READS ::= READSTRING PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // READS ::= READSTRING PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // READS ::= READSTRING PARENTH1 ID PARENTH2 error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' Missing  . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OUTPUT ::= PLN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // OUTPUT ::= GNGROUP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OUTPUT ::= PGPH 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // PLN ::= PRINTLN error STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // PLN ::= PRINTLN PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRINGVAL type expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // PLN ::= PRINTLN PARENTH1 STRINGVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing  . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Group")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
          
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type GROUP. Expected: GROUP type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // GNGROUP ::= GENERATEGROUP error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // GNGROUP ::= GENERATEGROUP PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // GNGROUP ::= GENERATEGROUP PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' Missing  . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Group")){

        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type GROUP. Expected: GROUP type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
         String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // PGPH ::= PRINTGRAPH error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // PGPH ::= PRINTGRAPH PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // PGPH ::= PRINTGRAPH PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' is missing  . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // FUNCT ::= GSIMILITUDE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // FUNCT ::= GFEATURES 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Node")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
          
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type NODE. Expected: NODE type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
       String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
boolean search2 = FCompiler.ts.buscarLex(j+"");
    if(search2){
        String Tipo2=FCompiler.ts.RegresarTipo(j+"");
        if(Tipo2.equalsIgnoreCase("Node")){
          //TSDatos identificador=FCompiler.ts.buscar(j+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
          
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+j+"\" is not type NODE. Expected: NODE type identifier/value. Line: "+(jleft+1)+", column: "+jright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(jleft+1),jright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+j+"\" not declared. Line: "+(jleft+1)+", column: "+jright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(jleft+1),jright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // GSIMILITUDE ::= GETSIMILITUDE error ID COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 error COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMMA_SIGN ',' missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Node")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
            int valor= FCompiler.ts.RegresarValorFeatures(i+"",j+"");
            System.out.println("el valor de feature es: "+valor+"");
            RESULT=valor;
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type NODE. Expected: NODE type identifier/value. Line: "+(ileft+1)+", columnn: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // GFEATURES ::= GETFEATURES error ID POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // GFEATURES ::= GETFEATURES PARENTH1 error POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // GFEATURES ::= GETFEATURES PARENTH1 ID error FEATURE_WORD 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  dot '.' expected after identifier "+c+", is missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: FEATURE WORD expected. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // FEATURE_WORD ::= ABSTRACTION PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FEATURE_WORD ::= AFFABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FEATURE_WORD ::= APPREHESION PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // FEATURE_WORD ::= ANXIETY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // FEATURE_WORD ::= CARETOSTANDARDS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FEATURE_WORD ::= DARE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // FEATURE_WORD ::= DOMINANCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // FEATURE_WORD ::= HARDNESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // FEATURE_WORD ::= INDEPENDENCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // FEATURE_WORD ::= LIVELINESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // FEATURE_WORD ::= OPENNESSTOCHANGE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // FEATURE_WORD ::= PERFECTIONISM PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // FEATURE_WORD ::= PRIVACY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // FEATURE_WORD ::= REASONING PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // FEATURE_WORD ::= SELFCONTROL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FEATURE_WORD ::= SELFSUFFICIENCY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FEATURE_WORD ::= SENSITIVITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FEATURE_WORD ::= SOCIABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FEATURE_WORD ::= STABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // FEATURE_WORD ::= STRESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // FEATURE_WORD ::= SURVEILLANCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FEATURE_WORD ::= ABSTRACTION error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FEATURE_WORD ::= AFFABILITY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // FEATURE_WORD ::= APPREHESION error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // FEATURE_WORD ::= ANXIETY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // FEATURE_WORD ::= CARETOSTANDARDS error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // FEATURE_WORD ::= DARE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // FEATURE_WORD ::= DOMINANCE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // FEATURE_WORD ::= HARDNESS error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // FEATURE_WORD ::= APPREHESION error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // FEATURE_WORD ::= INDEPENDENCE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // FEATURE_WORD ::= LIVELINESS error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // FEATURE_WORD ::= OPENNESSTOCHANGE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // FEATURE_WORD ::= PERFECTIONISM error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // FEATURE_WORD ::= PRIVACY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // FEATURE_WORD ::= REASONING error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // FEATURE_WORD ::= SELFCONTROL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Asintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action_part00000001(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Asintactico$result;

      /* select the action based on the action number */
      switch (CUP$Asintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // FEATURE_WORD ::= SELFSUFFICIENCY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // FEATURE_WORD ::= SENSITIVITY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // FEATURE_WORD ::= SOCIABILITY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // FEATURE_WORD ::= STABILITY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // FEATURE_WORD ::= STRESS error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // FEATURE_WORD ::= SURVEILLANCE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // FEATURE_WORD ::= error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: FEATURE WORD expected. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // FEATURE_WORD ::= ABSTRACTION PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // FEATURE_WORD ::= AFFABILITY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // FEATURE_WORD ::= APPREHESION PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // FEATURE_WORD ::= ANXIETY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // FEATURE_WORD ::= CARETOSTANDARDS PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // FEATURE_WORD ::= DARE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // FEATURE_WORD ::= DOMINANCE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // FEATURE_WORD ::= HARDNESS PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // FEATURE_WORD ::= APPREHESION PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // FEATURE_WORD ::= INDEPENDENCE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // FEATURE_WORD ::= LIVELINESS PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // FEATURE_WORD ::= OPENNESSTOCHANGE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // FEATURE_WORD ::= PERFECTIONISM PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // FEATURE_WORD ::= PRIVACY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // FEATURE_WORD ::= REASONING PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // FEATURE_WORD ::= SELFCONTROL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // FEATURE_WORD ::= SELFSUFFICIENCY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // FEATURE_WORD ::= SENSITIVITY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // FEATURE_WORD ::= SOCIABILITY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // FEATURE_WORD ::= STABILITY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing.Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // FEATURE_WORD ::= STRESS PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing). Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // FEATURE_WORD ::= SURVEILLANCE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // CTRL_STR ::= LOOP_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // CTRL_STR ::= IF_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY ELSE CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // IF_STR ::= IF error COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // IF_STR ::= IF error PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // IF_STR ::= IF PARENTH1 COND CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Rigth parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // IF_STR ::= IF PARENTH1 COND PARENTH2 error BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left curly brace '{' expected after condition clause. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Else malformed. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY ELSE BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left curly brace '{' expected after condition clause. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Else malformed. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // LOOP_STR ::= LOOP PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // LOOP_STR ::= LOOP error COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // LOOP_STR ::= LOOP PARENTH1 COND error CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'.  Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // LOOP_STR ::= LOOP PARENTH1 COND PARENTH2 error BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left curly brace '{' expected after condition clause. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // LOOP_STR ::= LOOP PARENTH1 COND BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'.  Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // LOOP_STR ::= LOOP COND PARENTH2 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Asintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Asintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Asintactico$do_action_part00000000(
                               CUP$Asintactico$act_num,
                               CUP$Asintactico$parser,
                               CUP$Asintactico$stack,
                               CUP$Asintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Asintactico$do_action_part00000001(
                               CUP$Asintactico$act_num,
                               CUP$Asintactico$parser,
                               CUP$Asintactico$stack,
                               CUP$Asintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
