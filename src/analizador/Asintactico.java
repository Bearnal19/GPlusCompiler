
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Asintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Asintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Asintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Asintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\002\002\004\000\002\002\011\000\002\002" +
    "\006\000\002\002\007\000\002\002\007\000\002\002\010" +
    "\000\002\002\007\000\002\002\007\000\002\002\010\000" +
    "\002\002\010\000\002\002\010\000\002\002\010\000\002" +
    "\002\012\000\002\002\003\000\002\002\012\000\002\002" +
    "\011\000\002\002\012\000\002\002\011\000\002\002\012" +
    "\000\002\002\011\000\002\002\012\000\002\002\011\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\006\000\002\003\005\000\002\003\005\000\002\003" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\006" +
    "\000\002\003\006\000\002\003\005\000\002\003\005\000" +
    "\002\052\004\000\002\052\003\000\002\052\004\000\002" +
    "\052\005\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\052\005\000\002\052\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\003\000\002\010\003\000\002\011\003\000\002\011\005" +
    "\000\002\011\003\000\002\011\005\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\013\005\000\002\013\003\000\002\013\005\000\002\062" +
    "\003\000\002\062\005\000\002\062\005\000\002\062\005" +
    "\000\002\051\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\003\000\002\061" +
    "\003\000\002\061\005\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\020\017\000\002\020\016\000\002\020\017\000\002\020" +
    "\017\000\002\020\017\000\002\020\017\000\002\020\017" +
    "\000\002\020\017\000\002\020\017\000\002\020\017\000" +
    "\002\020\017\000\002\020\017\000\002\020\017\000\002" +
    "\020\017\000\002\020\017\000\002\021\012\000\002\021" +
    "\011\000\002\021\011\000\002\021\012\000\002\021\012" +
    "\000\002\021\012\000\002\021\012\000\002\021\012\000" +
    "\002\021\012\000\002\021\012\000\002\026\003\000\002" +
    "\026\005\000\002\026\003\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\022\013\000\002\022\012" +
    "\000\002\022\013\000\002\022\013\000\002\022\013\000" +
    "\002\022\013\000\002\022\013\000\002\022\013\000\002" +
    "\022\013\000\002\022\013\000\002\027\053\000\002\027" +
    "\053\000\002\027\052\000\002\027\053\000\002\027\052" +
    "\000\002\027\053\000\002\027\052\000\002\027\053\000" +
    "\002\027\052\000\002\027\053\000\002\027\052\000\002" +
    "\027\053\000\002\027\052\000\002\027\053\000\002\027" +
    "\052\000\002\027\053\000\002\027\052\000\002\027\053" +
    "\000\002\027\052\000\002\027\053\000\002\027\052\000" +
    "\002\027\053\000\002\027\052\000\002\027\053\000\002" +
    "\027\052\000\002\027\053\000\002\027\052\000\002\027" +
    "\053\000\002\027\052\000\002\027\053\000\002\027\052" +
    "\000\002\027\053\000\002\027\052\000\002\027\053\000" +
    "\002\027\052\000\002\027\053\000\002\027\052\000\002" +
    "\027\053\000\002\027\052\000\002\027\053\000\002\027" +
    "\052\000\002\027\053\000\002\004\003\000\002\004\004" +
    "\000\002\017\003\000\002\017\004\000\002\017\003\000" +
    "\002\032\003\000\002\032\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\004\000\002\024\017\000\002\024\016" +
    "\000\002\024\017\000\002\024\017\000\002\024\017\000" +
    "\002\024\017\000\002\024\017\000\002\024\017\000\002" +
    "\024\017\000\002\024\017\000\002\024\017\000\002\024" +
    "\017\000\002\024\017\000\002\024\017\000\002\025\003" +
    "\000\002\025\003\000\002\033\003\000\002\033\003\000" +
    "\002\037\007\000\002\037\007\000\002\037\007\000\002" +
    "\037\007\000\002\037\007\000\002\040\007\000\002\040" +
    "\007\000\002\040\007\000\002\040\007\000\002\040\010" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\041\007\000\002\041\007\000\002\041\007\000\002" +
    "\041\007\000\002\041\007\000\002\042\007\000\002\042" +
    "\007\000\002\042\007\000\002\042\007\000\002\042\007" +
    "\000\002\043\007\000\002\043\007\000\002\043\007\000" +
    "\002\043\007\000\002\043\007\000\002\035\003\000\002" +
    "\035\003\000\002\044\010\000\002\044\010\000\002\044" +
    "\010\000\002\044\010\000\002\044\010\000\002\044\010" +
    "\000\002\045\007\000\002\045\005\000\002\045\007\000" +
    "\002\045\007\000\002\045\007\000\002\045\007\000\002" +
    "\045\005\000\002\045\006\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\023\003\000\002\023\003\000\002\030\010\000" +
    "\002\030\013\000\002\030\010\000\002\030\011\000\002" +
    "\030\007\000\002\030\010\000\002\030\011\000\002\030" +
    "\012\000\002\030\012\000\002\036\010\000\002\036\010" +
    "\000\002\036\010\000\002\036\010\000\002\036\006\000" +
    "\002\036\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0683\000\010\003\006\004\004\005\005\001\002\000" +
    "\020\003\u0650\005\u064f\006\015\027\025\030\016\031\014" +
    "\107\021\001\002\000\016\003\022\006\015\027\025\030" +
    "\016\031\014\107\021\001\002\000\024\002\ufff4\003\022" +
    "\004\011\005\017\006\015\027\025\030\016\031\014\107" +
    "\021\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\004\005\u0644\001\002\000\004\003\u0642\001" +
    "\002\000\004\010\u063e\001\002\000\006\003\uffca\107\uffca" +
    "\001\002\000\010\003\uffeb\005\uffeb\010\uffeb\001\002\000" +
    "\006\003\uffcb\107\uffcb\001\002\000\016\003\022\006\015" +
    "\027\025\030\016\031\014\107\021\001\002\000\006\003" +
    "\330\107\327\001\002\000\006\003\317\011\320\001\002" +
    "\000\016\003\uffe5\005\uffe5\007\033\010\uffe5\011\036\107" +
    "\326\001\002\000\020\003\032\006\015\007\030\027\025" +
    "\030\016\031\014\107\021\001\002\000\004\007\026\001" +
    "\002\000\006\003\uffcc\107\uffcc\001\002\000\016\003\022" +
    "\006\015\027\025\030\016\031\014\107\021\001\002\000" +
    "\010\003\uffe6\005\uffe6\010\uffe6\001\002\000\016\003\022" +
    "\006\015\027\025\030\016\031\014\107\021\001\002\000" +
    "\010\003\uffe9\005\uffe9\010\uffe9\001\002\000\026\003\022" +
    "\005\uffe5\006\015\007\033\010\uffe5\011\036\027\025\030" +
    "\016\031\014\107\035\001\002\000\016\003\022\006\015" +
    "\027\025\030\016\031\014\107\021\001\002\000\010\003" +
    "\uffe3\005\uffe3\010\uffe3\001\002\000\022\003\317\006\uffc7" +
    "\007\uffc7\011\320\027\uffc7\030\uffc7\031\uffc7\107\uffc7\001" +
    "\002\000\024\003\060\012\043\047\042\050\057\054\041" +
    "\055\062\107\044\110\052\111\046\001\002\000\110\003" +
    "\uff93\005\uff93\006\uff93\007\uff93\012\uff93\013\uff93\015\uff93" +
    "\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\034\uff93\037\uff93\040\uff93\043\uff93\045\uff93\046\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\077\uff93\100\uff93" +
    "\107\uff93\111\uff93\001\002\000\110\003\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\012\uffa0\013\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\034\uffa0\037\uffa0" +
    "\040\uffa0\043\uffa0\045\uffa0\046\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\077\uffa0\100\uffa0\107\uffa0\111\uffa0" +
    "\001\002\000\006\003\273\012\274\001\002\000\026\003" +
    "\uffc3\006\uffc3\007\uffc3\013\uffc3\015\uffb5\016\uffb5\027\uffc3" +
    "\030\uffc3\031\uffc3\107\uffc3\001\002\000\024\003\060\012" +
    "\043\047\042\050\057\054\041\055\062\107\044\110\052" +
    "\111\046\001\002\000\046\003\uffc5\006\uffc5\007\uffc5\013" +
    "\uffc5\015\uffb3\016\uffb3\017\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uffb7\026\uff94\027\uffc5\030\uffc5\031" +
    "\uffc5\107\uffc5\001\002\000\006\003\uffd3\007\uffcf\001\002" +
    "\000\042\003\uffc4\006\uffc4\007\uffc4\013\uffc4\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uffc4\030\uffc4\031\uffc4\107\uffc4\001\002\000\040\003" +
    "\257\006\uffc0\007\uffc0\017\261\020\260\021\253\022\262" +
    "\023\255\024\256\025\215\026\217\027\uffc0\030\uffc0\031" +
    "\uffc0\107\uffc0\001\002\000\110\003\uff97\005\uff97\006\uff97" +
    "\007\uff97\012\uff97\013\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\034\uff97\037\uff97\040" +
    "\uff97\043\uff97\045\uff97\046\uff97\051\uff97\052\uff97\053\uff97" +
    "\054\uff97\055\uff97\077\uff97\100\uff97\107\uff97\111\uff97\001" +
    "\002\000\062\003\236\005\uffa6\006\uffa6\007\uffa6\013\uffa6" +
    "\015\237\016\235\027\uffa6\030\uffa6\031\uffa6\032\uffa6\037" +
    "\uffa6\040\uffa6\043\uffa6\045\uffa6\046\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\077\uffa6\100\uffa6\107\uffa6\001" +
    "\002\000\030\003\uffb8\006\uffb8\007\uffb8\013\uffb8\025\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\034\uffb8\042\uffb8\107\uffb8\001" +
    "\002\000\030\003\230\006\uffbc\007\uffbc\013\uffbc\025\227" +
    "\027\uffbc\030\uffbc\031\uffbc\034\uffbc\042\uffbc\107\uffbc\001" +
    "\002\000\022\003\uffc1\006\uffc1\007\uffc1\013\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\107\uffc1\001\002\000\062\003\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\013\uffa4\015\uffa4\016\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\037\uffa4\040\uffa4\043\uffa4\045" +
    "\uffa4\046\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\077\uffa4\100\uffa4\107\uffa4\001\002\000\110\003\ufeff\005" +
    "\ufeff\006\ufeff\007\ufeff\012\ufeff\013\ufeff\015\ufeff\016\ufeff" +
    "\017\ufeff\020\ufeff\021\ufeff\022\ufeff\023\ufeff\024\ufeff\025" +
    "\ufeff\026\ufeff\027\ufeff\030\ufeff\031\ufeff\032\ufeff\034\ufeff" +
    "\037\ufeff\040\ufeff\043\ufeff\045\ufeff\046\ufeff\051\ufeff\052" +
    "\ufeff\053\ufeff\054\ufeff\055\ufeff\077\ufeff\100\ufeff\107\ufeff" +
    "\111\ufeff\001\002\000\026\003\uffc2\006\uffc2\007\uffc2\013" +
    "\uffc2\015\uffb4\016\uffb4\027\uffc2\030\uffc2\031\uffc2\107\uffc2" +
    "\001\002\000\046\003\uffbd\006\uffbd\007\uffbd\013\uffbd\015" +
    "\uffb2\016\uffb2\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\025\205\026\206\027\uffbd\030\uffbd\031\uffbd\107" +
    "\uffbd\001\002\000\020\003\uffbe\006\uffbe\007\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\107\uffbe\001\002\000\006\003\064\012" +
    "\065\001\002\000\110\003\ufefe\005\ufefe\006\ufefe\007\ufefe" +
    "\012\ufefe\013\ufefe\015\ufefe\016\ufefe\017\ufefe\020\ufefe\021" +
    "\ufefe\022\ufefe\023\ufefe\024\ufefe\025\ufefe\026\ufefe\027\ufefe" +
    "\030\ufefe\031\ufefe\032\ufefe\034\ufefe\037\ufefe\040\ufefe\043" +
    "\ufefe\045\ufefe\046\ufefe\051\ufefe\052\ufefe\053\ufefe\054\ufefe" +
    "\055\ufefe\077\ufefe\100\ufefe\107\ufefe\111\ufefe\001\002\000" +
    "\004\107\202\001\002\000\010\003\067\013\070\107\066" +
    "\001\002\000\006\003\175\076\176\001\002\000\112\003" +
    "\ufef6\005\ufef6\006\ufef6\007\ufef6\012\ufef6\013\072\015\ufef6" +
    "\016\ufef6\017\ufef6\020\ufef6\021\ufef6\022\ufef6\023\ufef6\024" +
    "\ufef6\025\ufef6\026\ufef6\027\ufef6\030\ufef6\031\ufef6\032\ufef6" +
    "\034\ufef6\037\ufef6\040\ufef6\043\ufef6\045\ufef6\046\ufef6\051" +
    "\ufef6\052\ufef6\053\ufef6\054\ufef6\055\ufef6\076\071\077\ufef6" +
    "\100\ufef6\107\ufef6\111\ufef6\001\002\000\110\003\ufef1\005" +
    "\ufef1\006\ufef1\007\ufef1\012\ufef1\013\ufef1\015\ufef1\016\ufef1" +
    "\017\ufef1\020\ufef1\021\ufef1\022\ufef1\023\ufef1\024\ufef1\025" +
    "\ufef1\026\ufef1\027\ufef1\030\ufef1\031\ufef1\032\ufef1\034\ufef1" +
    "\037\ufef1\040\ufef1\043\ufef1\045\ufef1\046\ufef1\051\ufef1\052" +
    "\ufef1\053\ufef1\054\ufef1\055\ufef1\077\ufef1\100\ufef1\107\ufef1" +
    "\111\ufef1\001\002\000\056\003\110\056\076\057\102\060" +
    "\100\061\101\062\113\063\105\064\114\065\103\066\107" +
    "\067\117\070\116\071\112\072\115\073\121\074\111\075" +
    "\077\101\075\102\073\103\074\104\120\105\106\001\002" +
    "\000\110\003\ufef0\005\ufef0\006\ufef0\007\ufef0\012\ufef0\013" +
    "\ufef0\015\ufef0\016\ufef0\017\ufef0\020\ufef0\021\ufef0\022\ufef0" +
    "\023\ufef0\024\ufef0\025\ufef0\026\ufef0\027\ufef0\030\ufef0\031" +
    "\ufef0\032\ufef0\034\ufef0\037\ufef0\040\ufef0\043\ufef0\045\ufef0" +
    "\046\ufef0\051\ufef0\052\ufef0\053\ufef0\054\ufef0\055\ufef0\077" +
    "\ufef0\100\ufef0\107\ufef0\111\ufef0\001\002\000\006\003\173" +
    "\013\174\001\002\000\006\003\171\013\172\001\002\000" +
    "\006\003\167\013\170\001\002\000\006\003\165\013\166" +
    "\001\002\000\006\003\163\013\164\001\002\000\006\003" +
    "\161\013\162\001\002\000\006\003\157\013\160\001\002" +
    "\000\006\003\155\013\156\001\002\000\006\003\153\013" +
    "\154\001\002\000\110\003\ufef4\005\ufef4\006\ufef4\007\ufef4" +
    "\012\ufef4\013\ufef4\015\ufef4\016\ufef4\017\ufef4\020\ufef4\021" +
    "\ufef4\022\ufef4\023\ufef4\024\ufef4\025\ufef4\026\ufef4\027\ufef4" +
    "\030\ufef4\031\ufef4\032\ufef4\034\ufef4\037\ufef4\040\ufef4\043" +
    "\ufef4\045\ufef4\046\ufef4\051\ufef4\052\ufef4\053\ufef4\054\ufef4" +
    "\055\ufef4\077\ufef4\100\ufef4\107\ufef4\111\ufef4\001\002\000" +
    "\006\003\151\013\152\001\002\000\006\003\147\013\150" +
    "\001\002\000\006\003\145\013\146\001\002\000\004\013" +
    "\144\001\002\000\006\003\142\013\143\001\002\000\006" +
    "\003\140\013\141\001\002\000\006\003\136\013\137\001" +
    "\002\000\006\003\134\013\135\001\002\000\006\003\132" +
    "\013\133\001\002\000\006\003\130\013\131\001\002\000" +
    "\006\003\126\013\127\001\002\000\006\003\124\013\125" +
    "\001\002\000\006\003\122\013\123\001\002\000\110\003" +
    "\ufec7\005\ufec7\006\ufec7\007\ufec7\012\ufec7\013\ufec7\015\ufec7" +
    "\016\ufec7\017\ufec7\020\ufec7\021\ufec7\022\ufec7\023\ufec7\024" +
    "\ufec7\025\ufec7\026\ufec7\027\ufec7\030\ufec7\031\ufec7\032\ufec7" +
    "\034\ufec7\037\ufec7\040\ufec7\043\ufec7\045\ufec7\046\ufec7\051" +
    "\ufec7\052\ufec7\053\ufec7\054\ufec7\055\ufec7\077\ufec7\100\ufec7" +
    "\107\ufec7\111\ufec7\001\002\000\110\003\ufedd\005\ufedd\006" +
    "\ufedd\007\ufedd\012\ufedd\013\ufedd\015\ufedd\016\ufedd\017\ufedd" +
    "\020\ufedd\021\ufedd\022\ufedd\023\ufedd\024\ufedd\025\ufedd\026" +
    "\ufedd\027\ufedd\030\ufedd\031\ufedd\032\ufedd\034\ufedd\037\ufedd" +
    "\040\ufedd\043\ufedd\045\ufedd\046\ufedd\051\ufedd\052\ufedd\053" +
    "\ufedd\054\ufedd\055\ufedd\077\ufedd\100\ufedd\107\ufedd\111\ufedd" +
    "\001\002\000\110\003\ufecd\005\ufecd\006\ufecd\007\ufecd\012" +
    "\ufecd\013\ufecd\015\ufecd\016\ufecd\017\ufecd\020\ufecd\021\ufecd" +
    "\022\ufecd\023\ufecd\024\ufecd\025\ufecd\026\ufecd\027\ufecd\030" +
    "\ufecd\031\ufecd\032\ufecd\034\ufecd\037\ufecd\040\ufecd\043\ufecd" +
    "\045\ufecd\046\ufecd\051\ufecd\052\ufecd\053\ufecd\054\ufecd\055" +
    "\ufecd\077\ufecd\100\ufecd\107\ufecd\111\ufecd\001\002\000\110" +
    "\003\ufee3\005\ufee3\006\ufee3\007\ufee3\012\ufee3\013\ufee3\015" +
    "\ufee3\016\ufee3\017\ufee3\020\ufee3\021\ufee3\022\ufee3\023\ufee3" +
    "\024\ufee3\025\ufee3\026\ufee3\027\ufee3\030\ufee3\031\ufee3\032" +
    "\ufee3\034\ufee3\037\ufee3\040\ufee3\043\ufee3\045\ufee3\046\ufee3" +
    "\051\ufee3\052\ufee3\053\ufee3\054\ufee3\055\ufee3\077\ufee3\100" +
    "\ufee3\107\ufee3\111\ufee3\001\002\000\110\003\ufecb\005\ufecb" +
    "\006\ufecb\007\ufecb\012\ufecb\013\ufecb\015\ufecb\016\ufecb\017" +
    "\ufecb\020\ufecb\021\ufecb\022\ufecb\023\ufecb\024\ufecb\025\ufecb" +
    "\026\ufecb\027\ufecb\030\ufecb\031\ufecb\032\ufecb\034\ufecb\037" +
    "\ufecb\040\ufecb\043\ufecb\045\ufecb\046\ufecb\051\ufecb\052\ufecb" +
    "\053\ufecb\054\ufecb\055\ufecb\077\ufecb\100\ufecb\107\ufecb\111" +
    "\ufecb\001\002\000\110\003\ufee1\005\ufee1\006\ufee1\007\ufee1" +
    "\012\ufee1\013\ufee1\015\ufee1\016\ufee1\017\ufee1\020\ufee1\021" +
    "\ufee1\022\ufee1\023\ufee1\024\ufee1\025\ufee1\026\ufee1\027\ufee1" +
    "\030\ufee1\031\ufee1\032\ufee1\034\ufee1\037\ufee1\040\ufee1\043" +
    "\ufee1\045\ufee1\046\ufee1\051\ufee1\052\ufee1\053\ufee1\054\ufee1" +
    "\055\ufee1\077\ufee1\100\ufee1\107\ufee1\111\ufee1\001\002\000" +
    "\110\003\ufeca\005\ufeca\006\ufeca\007\ufeca\012\ufeca\013\ufeca" +
    "\015\ufeca\016\ufeca\017\ufeca\020\ufeca\021\ufeca\022\ufeca\023" +
    "\ufeca\024\ufeca\025\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca" +
    "\032\ufeca\034\ufeca\037\ufeca\040\ufeca\043\ufeca\045\ufeca\046" +
    "\ufeca\051\ufeca\052\ufeca\053\ufeca\054\ufeca\055\ufeca\077\ufeca" +
    "\100\ufeca\107\ufeca\111\ufeca\001\002\000\110\003\ufee0\005" +
    "\ufee0\006\ufee0\007\ufee0\012\ufee0\013\ufee0\015\ufee0\016\ufee0" +
    "\017\ufee0\020\ufee0\021\ufee0\022\ufee0\023\ufee0\024\ufee0\025" +
    "\ufee0\026\ufee0\027\ufee0\030\ufee0\031\ufee0\032\ufee0\034\ufee0" +
    "\037\ufee0\040\ufee0\043\ufee0\045\ufee0\046\ufee0\051\ufee0\052" +
    "\ufee0\053\ufee0\054\ufee0\055\ufee0\077\ufee0\100\ufee0\107\ufee0" +
    "\111\ufee0\001\002\000\110\003\ufec8\005\ufec8\006\ufec8\007" +
    "\ufec8\012\ufec8\013\ufec8\015\ufec8\016\ufec8\017\ufec8\020\ufec8" +
    "\021\ufec8\022\ufec8\023\ufec8\024\ufec8\025\ufec8\026\ufec8\027" +
    "\ufec8\030\ufec8\031\ufec8\032\ufec8\034\ufec8\037\ufec8\040\ufec8" +
    "\043\ufec8\045\ufec8\046\ufec8\051\ufec8\052\ufec8\053\ufec8\054" +
    "\ufec8\055\ufec8\077\ufec8\100\ufec8\107\ufec8\111\ufec8\001\002" +
    "\000\110\003\ufede\005\ufede\006\ufede\007\ufede\012\ufede\013" +
    "\ufede\015\ufede\016\ufede\017\ufede\020\ufede\021\ufede\022\ufede" +
    "\023\ufede\024\ufede\025\ufede\026\ufede\027\ufede\030\ufede\031" +
    "\ufede\032\ufede\034\ufede\037\ufede\040\ufede\043\ufede\045\ufede" +
    "\046\ufede\051\ufede\052\ufede\053\ufede\054\ufede\055\ufede\077" +
    "\ufede\100\ufede\107\ufede\111\ufede\001\002\000\110\003\ufed4" +
    "\005\ufed4\006\ufed4\007\ufed4\012\ufed4\013\ufed4\015\ufed4\016" +
    "\ufed4\017\ufed4\020\ufed4\021\ufed4\022\ufed4\023\ufed4\024\ufed4" +
    "\025\ufed4\026\ufed4\027\ufed4\030\ufed4\031\ufed4\032\ufed4\034" +
    "\ufed4\037\ufed4\040\ufed4\043\ufed4\045\ufed4\046\ufed4\051\ufed4" +
    "\052\ufed4\053\ufed4\054\ufed4\055\ufed4\077\ufed4\100\ufed4\107" +
    "\ufed4\111\ufed4\001\002\000\110\003\ufee9\005\ufee9\006\ufee9" +
    "\007\ufee9\012\ufee9\013\ufee9\015\ufee9\016\ufee9\017\ufee9\020" +
    "\ufee9\021\ufee9\022\ufee9\023\ufee9\024\ufee9\025\ufee9\026\ufee9" +
    "\027\ufee9\030\ufee9\031\ufee9\032\ufee9\034\ufee9\037\ufee9\040" +
    "\ufee9\043\ufee9\045\ufee9\046\ufee9\051\ufee9\052\ufee9\053\ufee9" +
    "\054\ufee9\055\ufee9\077\ufee9\100\ufee9\107\ufee9\111\ufee9\001" +
    "\002\000\110\003\ufed6\005\ufed6\006\ufed6\007\ufed6\012\ufed6" +
    "\013\ufed6\015\ufed6\016\ufed6\017\ufed6\020\ufed6\021\ufed6\022" +
    "\ufed6\023\ufed6\024\ufed6\025\ufed6\026\ufed6\027\ufed6\030\ufed6" +
    "\031\ufed6\032\ufed6\034\ufed6\037\ufed6\040\ufed6\043\ufed6\045" +
    "\ufed6\046\ufed6\051\ufed6\052\ufed6\053\ufed6\054\ufed6\055\ufed6" +
    "\077\ufed6\100\ufed6\107\ufed6\111\ufed6\001\002\000\110\003" +
    "\ufeeb\005\ufeeb\006\ufeeb\007\ufeeb\012\ufeeb\013\ufeeb\015\ufeeb" +
    "\016\ufeeb\017\ufeeb\020\ufeeb\021\ufeeb\022\ufeeb\023\ufeeb\024" +
    "\ufeeb\025\ufeeb\026\ufeeb\027\ufeeb\030\ufeeb\031\ufeeb\032\ufeeb" +
    "\034\ufeeb\037\ufeeb\040\ufeeb\043\ufeeb\045\ufeeb\046\ufeeb\051" +
    "\ufeeb\052\ufeeb\053\ufeeb\054\ufeeb\055\ufeeb\077\ufeeb\100\ufeeb" +
    "\107\ufeeb\111\ufeeb\001\002\000\110\003\ufec9\005\ufec9\006" +
    "\ufec9\007\ufec9\012\ufec9\013\ufec9\015\ufec9\016\ufec9\017\ufec9" +
    "\020\ufec9\021\ufec9\022\ufec9\023\ufec9\024\ufec9\025\ufec9\026" +
    "\ufec9\027\ufec9\030\ufec9\031\ufec9\032\ufec9\034\ufec9\037\ufec9" +
    "\040\ufec9\043\ufec9\045\ufec9\046\ufec9\051\ufec9\052\ufec9\053" +
    "\ufec9\054\ufec9\055\ufec9\077\ufec9\100\ufec9\107\ufec9\111\ufec9" +
    "\001\002\000\110\003\ufedf\005\ufedf\006\ufedf\007\ufedf\012" +
    "\ufedf\013\ufedf\015\ufedf\016\ufedf\017\ufedf\020\ufedf\021\ufedf" +
    "\022\ufedf\023\ufedf\024\ufedf\025\ufedf\026\ufedf\027\ufedf\030" +
    "\ufedf\031\ufedf\032\ufedf\034\ufedf\037\ufedf\040\ufedf\043\ufedf" +
    "\045\ufedf\046\ufedf\051\ufedf\052\ufedf\053\ufedf\054\ufedf\055" +
    "\ufedf\077\ufedf\100\ufedf\107\ufedf\111\ufedf\001\002\000\110" +
    "\003\ufec6\005\ufec6\006\ufec6\007\ufec6\012\ufec6\013\ufec6\015" +
    "\ufec6\016\ufec6\017\ufec6\020\ufec6\021\ufec6\022\ufec6\023\ufec6" +
    "\024\ufec6\025\ufec6\026\ufec6\027\ufec6\030\ufec6\031\ufec6\032" +
    "\ufec6\034\ufec6\037\ufec6\040\ufec6\043\ufec6\045\ufec6\046\ufec6" +
    "\051\ufec6\052\ufec6\053\ufec6\054\ufec6\055\ufec6\077\ufec6\100" +
    "\ufec6\107\ufec6\111\ufec6\001\002\000\110\003\ufedc\005\ufedc" +
    "\006\ufedc\007\ufedc\012\ufedc\013\ufedc\015\ufedc\016\ufedc\017" +
    "\ufedc\020\ufedc\021\ufedc\022\ufedc\023\ufedc\024\ufedc\025\ufedc" +
    "\026\ufedc\027\ufedc\030\ufedc\031\ufedc\032\ufedc\034\ufedc\037" +
    "\ufedc\040\ufedc\043\ufedc\045\ufedc\046\ufedc\051\ufedc\052\ufedc" +
    "\053\ufedc\054\ufedc\055\ufedc\077\ufedc\100\ufedc\107\ufedc\111" +
    "\ufedc\001\002\000\110\003\ufec4\005\ufec4\006\ufec4\007\ufec4" +
    "\012\ufec4\013\ufec4\015\ufec4\016\ufec4\017\ufec4\020\ufec4\021" +
    "\ufec4\022\ufec4\023\ufec4\024\ufec4\025\ufec4\026\ufec4\027\ufec4" +
    "\030\ufec4\031\ufec4\032\ufec4\034\ufec4\037\ufec4\040\ufec4\043" +
    "\ufec4\045\ufec4\046\ufec4\051\ufec4\052\ufec4\053\ufec4\054\ufec4" +
    "\055\ufec4\077\ufec4\100\ufec4\107\ufec4\111\ufec4\001\002\000" +
    "\110\003\ufed1\005\ufed1\006\ufed1\007\ufed1\012\ufed1\013\ufed1" +
    "\015\ufed1\016\ufed1\017\ufed1\020\ufed1\021\ufed1\022\ufed1\023" +
    "\ufed1\024\ufed1\025\ufed1\026\ufed1\027\ufed1\030\ufed1\031\ufed1" +
    "\032\ufed1\034\ufed1\037\ufed1\040\ufed1\043\ufed1\045\ufed1\046" +
    "\ufed1\051\ufed1\052\ufed1\053\ufed1\054\ufed1\055\ufed1\077\ufed1" +
    "\100\ufed1\107\ufed1\111\ufed1\001\002\000\110\003\ufee7\005" +
    "\ufee7\006\ufee7\007\ufee7\012\ufee7\013\ufee7\015\ufee7\016\ufee7" +
    "\017\ufee7\020\ufee7\021\ufee7\022\ufee7\023\ufee7\024\ufee7\025" +
    "\ufee7\026\ufee7\027\ufee7\030\ufee7\031\ufee7\032\ufee7\034\ufee7" +
    "\037\ufee7\040\ufee7\043\ufee7\045\ufee7\046\ufee7\051\ufee7\052" +
    "\ufee7\053\ufee7\054\ufee7\055\ufee7\077\ufee7\100\ufee7\107\ufee7" +
    "\111\ufee7\001\002\000\110\003\ufecc\005\ufecc\006\ufecc\007" +
    "\ufecc\012\ufecc\013\ufecc\015\ufecc\016\ufecc\017\ufecc\020\ufecc" +
    "\021\ufecc\022\ufecc\023\ufecc\024\ufecc\025\ufecc\026\ufecc\027" +
    "\ufecc\030\ufecc\031\ufecc\032\ufecc\034\ufecc\037\ufecc\040\ufecc" +
    "\043\ufecc\045\ufecc\046\ufecc\051\ufecc\052\ufecc\053\ufecc\054" +
    "\ufecc\055\ufecc\077\ufecc\100\ufecc\107\ufecc\111\ufecc\001\002" +
    "\000\110\003\ufee2\005\ufee2\006\ufee2\007\ufee2\012\ufee2\013" +
    "\ufee2\015\ufee2\016\ufee2\017\ufee2\020\ufee2\021\ufee2\022\ufee2" +
    "\023\ufee2\024\ufee2\025\ufee2\026\ufee2\027\ufee2\030\ufee2\031" +
    "\ufee2\032\ufee2\034\ufee2\037\ufee2\040\ufee2\043\ufee2\045\ufee2" +
    "\046\ufee2\051\ufee2\052\ufee2\053\ufee2\054\ufee2\055\ufee2\077" +
    "\ufee2\100\ufee2\107\ufee2\111\ufee2\001\002\000\110\003\ufed5" +
    "\005\ufed5\006\ufed5\007\ufed5\012\ufed5\013\ufed5\015\ufed5\016" +
    "\ufed5\017\ufed5\020\ufed5\021\ufed5\022\ufed5\023\ufed5\024\ufed5" +
    "\025\ufed5\026\ufed5\027\ufed5\030\ufed5\031\ufed5\032\ufed5\034" +
    "\ufed5\037\ufed5\040\ufed5\043\ufed5\045\ufed5\046\ufed5\051\ufed5" +
    "\052\ufed5\053\ufed5\054\ufed5\055\ufed5\077\ufed5\100\ufed5\107" +
    "\ufed5\111\ufed5\001\002\000\110\003\ufeea\005\ufeea\006\ufeea" +
    "\007\ufeea\012\ufeea\013\ufeea\015\ufeea\016\ufeea\017\ufeea\020" +
    "\ufeea\021\ufeea\022\ufeea\023\ufeea\024\ufeea\025\ufeea\026\ufeea" +
    "\027\ufeea\030\ufeea\031\ufeea\032\ufeea\034\ufeea\037\ufeea\040" +
    "\ufeea\043\ufeea\045\ufeea\046\ufeea\051\ufeea\052\ufeea\053\ufeea" +
    "\054\ufeea\055\ufeea\077\ufeea\100\ufeea\107\ufeea\111\ufeea\001" +
    "\002\000\110\003\ufed3\005\ufed3\006\ufed3\007\ufed3\012\ufed3" +
    "\013\ufed3\015\ufed3\016\ufed3\017\ufed3\020\ufed3\021\ufed3\022" +
    "\ufed3\023\ufed3\024\ufed3\025\ufed3\026\ufed3\027\ufed3\030\ufed3" +
    "\031\ufed3\032\ufed3\034\ufed3\037\ufed3\040\ufed3\043\ufed3\045" +
    "\ufed3\046\ufed3\051\ufed3\052\ufed3\053\ufed3\054\ufed3\055\ufed3" +
    "\077\ufed3\100\ufed3\107\ufed3\111\ufed3\001\002\000\110\003" +
    "\ufee8\005\ufee8\006\ufee8\007\ufee8\012\ufee8\013\ufee8\015\ufee8" +
    "\016\ufee8\017\ufee8\020\ufee8\021\ufee8\022\ufee8\023\ufee8\024" +
    "\ufee8\025\ufee8\026\ufee8\027\ufee8\030\ufee8\031\ufee8\032\ufee8" +
    "\034\ufee8\037\ufee8\040\ufee8\043\ufee8\045\ufee8\046\ufee8\051" +
    "\ufee8\052\ufee8\053\ufee8\054\ufee8\055\ufee8\077\ufee8\100\ufee8" +
    "\107\ufee8\111\ufee8\001\002\000\110\003\ufed9\005\ufed9\006" +
    "\ufed9\007\ufed9\012\ufed9\013\ufed9\015\ufed9\016\ufed9\017\ufed9" +
    "\020\ufed9\021\ufed9\022\ufed9\023\ufed9\024\ufed9\025\ufed9\026" +
    "\ufed9\027\ufed9\030\ufed9\031\ufed9\032\ufed9\034\ufed9\037\ufed9" +
    "\040\ufed9\043\ufed9\045\ufed9\046\ufed9\051\ufed9\052\ufed9\053" +
    "\ufed9\054\ufed9\055\ufed9\077\ufed9\100\ufed9\107\ufed9\111\ufed9" +
    "\001\002\000\110\003\ufeee\005\ufeee\006\ufeee\007\ufeee\012" +
    "\ufeee\013\ufeee\015\ufeee\016\ufeee\017\ufeee\020\ufeee\021\ufeee" +
    "\022\ufeee\023\ufeee\024\ufeee\025\ufeee\026\ufeee\027\ufeee\030" +
    "\ufeee\031\ufeee\032\ufeee\034\ufeee\037\ufeee\040\ufeee\043\ufeee" +
    "\045\ufeee\046\ufeee\051\ufeee\052\ufeee\053\ufeee\054\ufeee\055" +
    "\ufeee\077\ufeee\100\ufeee\107\ufeee\111\ufeee\001\002\000\110" +
    "\003\ufed7\005\ufed7\006\ufed7\007\ufed7\012\ufed7\013\ufed7\015" +
    "\ufed7\016\ufed7\017\ufed7\020\ufed7\021\ufed7\022\ufed7\023\ufed7" +
    "\024\ufed7\025\ufed7\026\ufed7\027\ufed7\030\ufed7\031\ufed7\032" +
    "\ufed7\034\ufed7\037\ufed7\040\ufed7\043\ufed7\045\ufed7\046\ufed7" +
    "\051\ufed7\052\ufed7\053\ufed7\054\ufed7\055\ufed7\077\ufed7\100" +
    "\ufed7\107\ufed7\111\ufed7\001\002\000\110\003\ufeec\005\ufeec" +
    "\006\ufeec\007\ufeec\012\ufeec\013\ufeec\015\ufeec\016\ufeec\017" +
    "\ufeec\020\ufeec\021\ufeec\022\ufeec\023\ufeec\024\ufeec\025\ufeec" +
    "\026\ufeec\027\ufeec\030\ufeec\031\ufeec\032\ufeec\034\ufeec\037" +
    "\ufeec\040\ufeec\043\ufeec\045\ufeec\046\ufeec\051\ufeec\052\ufeec" +
    "\053\ufeec\054\ufeec\055\ufeec\077\ufeec\100\ufeec\107\ufeec\111" +
    "\ufeec\001\002\000\110\003\ufed8\005\ufed8\006\ufed8\007\ufed8" +
    "\012\ufed8\013\ufed8\015\ufed8\016\ufed8\017\ufed8\020\ufed8\021" +
    "\ufed8\022\ufed8\023\ufed8\024\ufed8\025\ufed8\026\ufed8\027\ufed8" +
    "\030\ufed8\031\ufed8\032\ufed8\034\ufed8\037\ufed8\040\ufed8\043" +
    "\ufed8\045\ufed8\046\ufed8\051\ufed8\052\ufed8\053\ufed8\054\ufed8" +
    "\055\ufed8\077\ufed8\100\ufed8\107\ufed8\111\ufed8\001\002\000" +
    "\110\003\ufeed\005\ufeed\006\ufeed\007\ufeed\012\ufeed\013\ufeed" +
    "\015\ufeed\016\ufeed\017\ufeed\020\ufeed\021\ufeed\022\ufeed\023" +
    "\ufeed\024\ufeed\025\ufeed\026\ufeed\027\ufeed\030\ufeed\031\ufeed" +
    "\032\ufeed\034\ufeed\037\ufeed\040\ufeed\043\ufeed\045\ufeed\046" +
    "\ufeed\051\ufeed\052\ufeed\053\ufeed\054\ufeed\055\ufeed\077\ufeed" +
    "\100\ufeed\107\ufeed\111\ufeed\001\002\000\110\003\ufec5\005" +
    "\ufec5\006\ufec5\007\ufec5\012\ufec5\013\ufec5\015\ufec5\016\ufec5" +
    "\017\ufec5\020\ufec5\021\ufec5\022\ufec5\023\ufec5\024\ufec5\025" +
    "\ufec5\026\ufec5\027\ufec5\030\ufec5\031\ufec5\032\ufec5\034\ufec5" +
    "\037\ufec5\040\ufec5\043\ufec5\045\ufec5\046\ufec5\051\ufec5\052" +
    "\ufec5\053\ufec5\054\ufec5\055\ufec5\077\ufec5\100\ufec5\107\ufec5" +
    "\111\ufec5\001\002\000\110\003\ufedb\005\ufedb\006\ufedb\007" +
    "\ufedb\012\ufedb\013\ufedb\015\ufedb\016\ufedb\017\ufedb\020\ufedb" +
    "\021\ufedb\022\ufedb\023\ufedb\024\ufedb\025\ufedb\026\ufedb\027" +
    "\ufedb\030\ufedb\031\ufedb\032\ufedb\034\ufedb\037\ufedb\040\ufedb" +
    "\043\ufedb\045\ufedb\046\ufedb\051\ufedb\052\ufedb\053\ufedb\054" +
    "\ufedb\055\ufedb\077\ufedb\100\ufedb\107\ufedb\111\ufedb\001\002" +
    "\000\110\003\ufeda\005\ufeda\006\ufeda\007\ufeda\012\ufeda\013" +
    "\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda\021\ufeda\022\ufeda" +
    "\023\ufeda\024\ufeda\025\ufeda\026\ufeda\027\ufeda\030\ufeda\031" +
    "\ufeda\032\ufeda\034\ufeda\037\ufeda\040\ufeda\043\ufeda\045\ufeda" +
    "\046\ufeda\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055\ufeda\077" +
    "\ufeda\100\ufeda\107\ufeda\111\ufeda\001\002\000\110\003\ufeef" +
    "\005\ufeef\006\ufeef\007\ufeef\012\ufeef\013\ufeef\015\ufeef\016" +
    "\ufeef\017\ufeef\020\ufeef\021\ufeef\022\ufeef\023\ufeef\024\ufeef" +
    "\025\ufeef\026\ufeef\027\ufeef\030\ufeef\031\ufeef\032\ufeef\034" +
    "\ufeef\037\ufeef\040\ufeef\043\ufeef\045\ufeef\046\ufeef\051\ufeef" +
    "\052\ufeef\053\ufeef\054\ufeef\055\ufeef\077\ufeef\100\ufeef\107" +
    "\ufeef\111\ufeef\001\002\000\110\003\ufed0\005\ufed0\006\ufed0" +
    "\007\ufed0\012\ufed0\013\ufed0\015\ufed0\016\ufed0\017\ufed0\020" +
    "\ufed0\021\ufed0\022\ufed0\023\ufed0\024\ufed0\025\ufed0\026\ufed0" +
    "\027\ufed0\030\ufed0\031\ufed0\032\ufed0\034\ufed0\037\ufed0\040" +
    "\ufed0\043\ufed0\045\ufed0\046\ufed0\051\ufed0\052\ufed0\053\ufed0" +
    "\054\ufed0\055\ufed0\077\ufed0\100\ufed0\107\ufed0\111\ufed0\001" +
    "\002\000\110\003\ufee6\005\ufee6\006\ufee6\007\ufee6\012\ufee6" +
    "\013\ufee6\015\ufee6\016\ufee6\017\ufee6\020\ufee6\021\ufee6\022" +
    "\ufee6\023\ufee6\024\ufee6\025\ufee6\026\ufee6\027\ufee6\030\ufee6" +
    "\031\ufee6\032\ufee6\034\ufee6\037\ufee6\040\ufee6\043\ufee6\045" +
    "\ufee6\046\ufee6\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6" +
    "\077\ufee6\100\ufee6\107\ufee6\111\ufee6\001\002\000\110\003" +
    "\ufece\005\ufece\006\ufece\007\ufece\012\ufece\013\ufece\015\ufece" +
    "\016\ufece\017\ufece\020\ufece\021\ufece\022\ufece\023\ufece\024" +
    "\ufece\025\ufece\026\ufece\027\ufece\030\ufece\031\ufece\032\ufece" +
    "\034\ufece\037\ufece\040\ufece\043\ufece\045\ufece\046\ufece\051" +
    "\ufece\052\ufece\053\ufece\054\ufece\055\ufece\077\ufece\100\ufece" +
    "\107\ufece\111\ufece\001\002\000\110\003\ufee4\005\ufee4\006" +
    "\ufee4\007\ufee4\012\ufee4\013\ufee4\015\ufee4\016\ufee4\017\ufee4" +
    "\020\ufee4\021\ufee4\022\ufee4\023\ufee4\024\ufee4\025\ufee4\026" +
    "\ufee4\027\ufee4\030\ufee4\031\ufee4\032\ufee4\034\ufee4\037\ufee4" +
    "\040\ufee4\043\ufee4\045\ufee4\046\ufee4\051\ufee4\052\ufee4\053" +
    "\ufee4\054\ufee4\055\ufee4\077\ufee4\100\ufee4\107\ufee4\111\ufee4" +
    "\001\002\000\110\003\ufecf\005\ufecf\006\ufecf\007\ufecf\012" +
    "\ufecf\013\ufecf\015\ufecf\016\ufecf\017\ufecf\020\ufecf\021\ufecf" +
    "\022\ufecf\023\ufecf\024\ufecf\025\ufecf\026\ufecf\027\ufecf\030" +
    "\ufecf\031\ufecf\032\ufecf\034\ufecf\037\ufecf\040\ufecf\043\ufecf" +
    "\045\ufecf\046\ufecf\051\ufecf\052\ufecf\053\ufecf\054\ufecf\055" +
    "\ufecf\077\ufecf\100\ufecf\107\ufecf\111\ufecf\001\002\000\110" +
    "\003\ufee5\005\ufee5\006\ufee5\007\ufee5\012\ufee5\013\ufee5\015" +
    "\ufee5\016\ufee5\017\ufee5\020\ufee5\021\ufee5\022\ufee5\023\ufee5" +
    "\024\ufee5\025\ufee5\026\ufee5\027\ufee5\030\ufee5\031\ufee5\032" +
    "\ufee5\034\ufee5\037\ufee5\040\ufee5\043\ufee5\045\ufee5\046\ufee5" +
    "\051\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\077\ufee5\100" +
    "\ufee5\107\ufee5\111\ufee5\001\002\000\056\003\110\056\076" +
    "\057\102\060\100\061\101\062\113\063\105\064\114\065" +
    "\103\066\107\067\117\070\116\071\112\072\115\073\121" +
    "\074\111\075\077\101\075\102\073\103\074\104\120\105" +
    "\106\001\002\000\056\003\200\056\076\057\102\060\100" +
    "\061\101\062\113\063\105\064\114\065\103\066\107\067" +
    "\117\070\116\071\112\072\115\073\121\074\111\075\077" +
    "\101\075\102\073\103\074\104\120\105\106\001\002\000" +
    "\110\003\ufef7\005\ufef7\006\ufef7\007\ufef7\012\ufef7\013\ufef7" +
    "\015\ufef7\016\ufef7\017\ufef7\020\ufef7\021\ufef7\022\ufef7\023" +
    "\ufef7\024\ufef7\025\ufef7\026\ufef7\027\ufef7\030\ufef7\031\ufef7" +
    "\032\ufef7\034\ufef7\037\ufef7\040\ufef7\043\ufef7\045\ufef7\046" +
    "\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055\ufef7\077\ufef7" +
    "\100\ufef7\107\ufef7\111\ufef7\001\002\000\110\003\ufef2\005" +
    "\ufef2\006\ufef2\007\ufef2\012\ufef2\013\144\015\ufef2\016\ufef2" +
    "\017\ufef2\020\ufef2\021\ufef2\022\ufef2\023\ufef2\024\ufef2\025" +
    "\ufef2\026\ufef2\027\ufef2\030\ufef2\031\ufef2\032\ufef2\034\ufef2" +
    "\037\ufef2\040\ufef2\043\ufef2\045\ufef2\046\ufef2\051\ufef2\052" +
    "\ufef2\053\ufef2\054\ufef2\055\ufef2\077\ufef2\100\ufef2\107\ufef2" +
    "\111\ufef2\001\002\000\110\003\ufef3\005\ufef3\006\ufef3\007" +
    "\ufef3\012\ufef3\013\ufef3\015\ufef3\016\ufef3\017\ufef3\020\ufef3" +
    "\021\ufef3\022\ufef3\023\ufef3\024\ufef3\025\ufef3\026\ufef3\027" +
    "\ufef3\030\ufef3\031\ufef3\032\ufef3\034\ufef3\037\ufef3\040\ufef3" +
    "\043\ufef3\045\ufef3\046\ufef3\051\ufef3\052\ufef3\053\ufef3\054" +
    "\ufef3\055\ufef3\077\ufef3\100\ufef3\107\ufef3\111\ufef3\001\002" +
    "\000\004\076\203\001\002\000\056\003\110\056\076\057" +
    "\102\060\100\061\101\062\113\063\105\064\114\065\103" +
    "\066\107\067\117\070\116\071\112\072\115\073\121\074" +
    "\111\075\077\101\075\102\073\103\074\104\120\105\106" +
    "\001\002\000\110\003\ufef5\005\ufef5\006\ufef5\007\ufef5\012" +
    "\ufef5\013\ufef5\015\ufef5\016\ufef5\017\ufef5\020\ufef5\021\ufef5" +
    "\022\ufef5\023\ufef5\024\ufef5\025\ufef5\026\ufef5\027\ufef5\030" +
    "\ufef5\031\ufef5\032\ufef5\034\ufef5\037\ufef5\040\ufef5\043\ufef5" +
    "\045\ufef5\046\ufef5\051\ufef5\052\ufef5\053\ufef5\054\ufef5\055" +
    "\ufef5\077\ufef5\100\ufef5\107\ufef5\111\ufef5\001\002\000\014" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\014\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\110\003\uff95\005\uff95\006\uff95\007\uff95\012\uff95\013" +
    "\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\034\uff95\037\uff95\040\uff95\043\uff95\045\uff95" +
    "\046\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\077" +
    "\uff95\100\uff95\107\uff95\111\uff95\001\002\000\110\003\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\012\uff9a\013\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034" +
    "\uff9a\037\uff9a\040\uff9a\043\uff9a\045\uff9a\046\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\077\uff9a\100\uff9a\107" +
    "\uff9a\111\uff9a\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\110\003\uff94\005" +
    "\uff94\006\uff94\007\uff94\012\uff94\013\uff94\015\uff94\016\uff94" +
    "\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\034\uff94" +
    "\037\uff94\040\uff94\043\uff94\045\uff94\046\uff94\051\uff94\052" +
    "\uff94\053\uff94\054\uff94\055\uff94\077\uff94\100\uff94\107\uff94" +
    "\111\uff94\001\002\000\012\003\216\013\220\025\215\026" +
    "\217\001\002\000\070\003\uff98\005\uff98\006\uff98\007\uff98" +
    "\013\uff98\015\uff98\016\uff98\025\205\026\206\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\034\uff98\037\uff98\040\uff98\043\uff98" +
    "\045\uff98\046\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\077\uff98\100\uff98\107\uff98\001\002\000\016\003\225" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\014\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\016\003\222\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\110\003\uff96\005\uff96\006\uff96\007\uff96" +
    "\012\uff96\013\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\034\uff96\037\uff96\040\uff96\043" +
    "\uff96\045\uff96\046\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\077\uff96\100\uff96\107\uff96\111\uff96\001\002\000" +
    "\110\003\uff9f\005\uff9f\006\uff9f\007\uff9f\012\uff9f\013\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\034\uff9f\037\uff9f\040\uff9f\043\uff9f\045\uff9f\046" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\077\uff9f" +
    "\100\uff9f\107\uff9f\111\uff9f\001\002\000\110\003\uff99\005" +
    "\uff99\006\uff99\007\uff99\012\uff99\013\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\034\uff99" +
    "\037\uff99\040\uff99\043\uff99\045\uff99\046\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\077\uff99\100\uff99\107\uff99" +
    "\111\uff99\001\002\000\074\003\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\012\uff9c\013\uff9c\015\uff9c\016\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\034\uff9c\037\uff9c\040" +
    "\uff9c\043\uff9c\045\uff9c\046\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\077\uff9c\100\uff9c\107\uff9c\111\uff9c\001" +
    "\002\000\110\003\uff9e\005\uff9e\006\uff9e\007\uff9e\012\uff9e" +
    "\013\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\034\uff9e\037\uff9e\040\uff9e\043\uff9e\045" +
    "\uff9e\046\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\077\uff9e\100\uff9e\107\uff9e\111\uff9e\001\002\000\110\003" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\012\uff9b\013\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\034\uff9b\037\uff9b\040\uff9b\043\uff9b\045\uff9b\046\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\077\uff9b\100\uff9b" +
    "\107\uff9b\111\uff9b\001\002\000\110\003\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\012\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d\037\uff9d" +
    "\040\uff9d\043\uff9d\045\uff9d\046\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\077\uff9d\100\uff9d\107\uff9d\111\uff9d" +
    "\001\002\000\010\003\233\107\231\110\052\001\002\000" +
    "\010\003\233\107\231\110\052\001\002\000\030\003\uffb7" +
    "\006\uffb7\007\uffb7\013\uffb7\025\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\034\uffb7\042\uffb7\107\uffb7\001\002\000\026\003\uffb9" +
    "\006\uffb9\007\uffb9\013\uffb9\027\uffb9\030\uffb9\031\uffb9\034" +
    "\uffb9\042\uffb9\107\uffb9\001\002\000\030\003\uffba\006\uffba" +
    "\007\uffba\013\uffba\025\uffb6\027\uffba\030\uffba\031\uffba\034" +
    "\uffba\042\uffba\107\uffba\001\002\000\026\003\uffbb\006\uffbb" +
    "\007\uffbb\013\uffbb\027\uffbb\030\uffbb\031\uffbb\034\uffbb\042" +
    "\uffbb\107\uffbb\001\002\000\022\003\uffae\012\uffae\047\uffae" +
    "\050\uffae\054\uffae\055\uffae\107\uffae\111\uffae\001\002\000" +
    "\022\003\247\012\245\047\241\050\244\054\041\055\062" +
    "\107\246\111\207\001\002\000\022\003\uffaf\012\uffaf\047" +
    "\uffaf\050\uffaf\054\uffaf\055\uffaf\107\uffaf\111\uffaf\001\002" +
    "\000\022\003\247\012\245\047\241\050\244\054\041\055" +
    "\062\107\246\111\207\001\002\000\062\003\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\013\uffb5\015\uffb5\016\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\037\uffb5\040\uffb5\043\uffb5\045\uffb5" +
    "\046\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\077" +
    "\uffb5\100\uffb5\107\uffb5\001\002\000\024\003\257\017\261" +
    "\020\260\021\253\022\262\023\255\024\256\025\215\026" +
    "\217\001\002\000\056\003\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\013\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\037\uffa7\040" +
    "\uffa7\043\uffa7\045\uffa7\046\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\077\uffa7\100\uffa7\107\uffa7\001\002\000" +
    "\062\003\uffb4\005\uffb4\006\uffb4\007\uffb4\013\uffb4\015\uffb4" +
    "\016\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\037\uffb4\040" +
    "\uffb4\043\uffb4\045\uffb4\046\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\077\uffb4\100\uffb4\107\uffb4\001\002\000" +
    "\022\003\247\012\245\047\241\050\244\054\041\055\062" +
    "\107\246\111\207\001\002\000\102\003\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uff94\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\037\uffb3\040\uffb3\043\uffb3" +
    "\045\uffb3\046\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\077\uffb3\100\uffb3\107\uffb3\001\002\000\102\003\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\013\uffb2\015\uffb2\016\uffb2\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\205" +
    "\026\206\027\uffb2\030\uffb2\031\uffb2\032\uffb2\037\uffb2\040" +
    "\uffb2\043\uffb2\045\uffb2\046\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\077\uffb2\100\uffb2\107\uffb2\001\002\000" +
    "\026\003\257\013\220\017\261\020\260\021\253\022\262" +
    "\023\255\024\256\025\215\026\217\001\002\000\004\013" +
    "\252\001\002\000\062\003\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\013\uffa2\015\uffa2\016\uffa2\027\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\037\uffa2\040\uffa2\043\uffa2\045\uffa2\046\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\077\uffa2\100\uffa2\107" +
    "\uffa2\001\002\000\016\003\uffab\012\uffab\054\uffab\055\uffab" +
    "\107\uffab\111\uffab\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\016\003\uffa9" +
    "\012\uffa9\054\uffa9\055\uffa9\107\uffa9\111\uffa9\001\002\000" +
    "\016\003\uffa8\012\uffa8\054\uffa8\055\uffa8\107\uffa8\111\uffa8" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\016\003\uffac\012\uffac\054\uffac" +
    "\055\uffac\107\uffac\111\uffac\001\002\000\016\003\uffad\012" +
    "\uffad\054\uffad\055\uffad\107\uffad\111\uffad\001\002\000\016" +
    "\003\uffaa\012\uffaa\054\uffaa\055\uffaa\107\uffaa\111\uffaa\001" +
    "\002\000\102\003\uffa0\005\uffa0\006\uffa0\007\uffa0\013\uffa0" +
    "\015\uffa0\016\uffa0\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\037\uffa0\040\uffa0\043\uffa0\045\uffa0\046\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\077\uffa0\100\uffa0" +
    "\107\uffa0\001\002\000\066\003\216\005\uffa1\006\uffa1\007" +
    "\uffa1\013\uffa1\015\uffa1\016\uffa1\025\215\026\217\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\037\uffa1\040\uffa1\043\uffa1\045" +
    "\uffa1\046\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\077\uffa1\100\uffa1\107\uffa1\001\002\000\066\003\216\005" +
    "\uffa3\006\uffa3\007\uffa3\013\uffa3\015\uffa3\016\uffa3\025\215" +
    "\026\217\027\uffa3\030\uffa3\031\uffa3\032\uffa3\037\uffa3\040" +
    "\uffa3\043\uffa3\045\uffa3\046\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\077\uffa3\100\uffa3\107\uffa3\001\002\000" +
    "\056\003\uffa5\005\uffa5\006\uffa5\007\uffa5\013\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\037\uffa5\040\uffa5\043\uffa5\045" +
    "\uffa5\046\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\077\uffa5\100\uffa5\107\uffa5\001\002\000\004\013\272\001" +
    "\002\000\026\003\257\013\220\017\261\020\260\021\253" +
    "\022\262\023\255\024\256\025\215\026\217\001\002\000" +
    "\004\013\252\001\002\000\022\003\uffbf\006\uffbf\007\uffbf" +
    "\013\uffbf\027\uffbf\030\uffbf\031\uffbf\107\uffbf\001\002\000" +
    "\004\107\313\001\002\000\006\003\276\107\275\001\002" +
    "\000\006\003\302\034\303\001\002\000\004\034\277\001" +
    "\002\000\004\107\300\001\002\000\004\013\301\001\002" +
    "\000\110\003\ufefb\005\ufefb\006\ufefb\007\ufefb\012\ufefb\013" +
    "\ufefb\015\ufefb\016\ufefb\017\ufefb\020\ufefb\021\ufefb\022\ufefb" +
    "\023\ufefb\024\ufefb\025\ufefb\026\ufefb\027\ufefb\030\ufefb\031" +
    "\ufefb\032\ufefb\034\ufefb\037\ufefb\040\ufefb\043\ufefb\045\ufefb" +
    "\046\ufefb\051\ufefb\052\ufefb\053\ufefb\054\ufefb\055\ufefb\077" +
    "\ufefb\100\ufefb\107\ufefb\111\ufefb\001\002\000\004\107\311" +
    "\001\002\000\006\003\305\107\304\001\002\000\006\003" +
    "\307\013\310\001\002\000\004\013\306\001\002\000\110" +
    "\003\ufef9\005\ufef9\006\ufef9\007\ufef9\012\ufef9\013\ufef9\015" +
    "\ufef9\016\ufef9\017\ufef9\020\ufef9\021\ufef9\022\ufef9\023\ufef9" +
    "\024\ufef9\025\ufef9\026\ufef9\027\ufef9\030\ufef9\031\ufef9\032" +
    "\ufef9\034\ufef9\037\ufef9\040\ufef9\043\ufef9\045\ufef9\046\ufef9" +
    "\051\ufef9\052\ufef9\053\ufef9\054\ufef9\055\ufef9\077\ufef9\100" +
    "\ufef9\107\ufef9\111\ufef9\001\002\000\110\003\ufef8\005\ufef8" +
    "\006\ufef8\007\ufef8\012\ufef8\013\ufef8\015\ufef8\016\ufef8\017" +
    "\ufef8\020\ufef8\021\ufef8\022\ufef8\023\ufef8\024\ufef8\025\ufef8" +
    "\026\ufef8\027\ufef8\030\ufef8\031\ufef8\032\ufef8\034\ufef8\037" +
    "\ufef8\040\ufef8\043\ufef8\045\ufef8\046\ufef8\051\ufef8\052\ufef8" +
    "\053\ufef8\054\ufef8\055\ufef8\077\ufef8\100\ufef8\107\ufef8\111" +
    "\ufef8\001\002\000\110\003\ufefd\005\ufefd\006\ufefd\007\ufefd" +
    "\012\ufefd\013\ufefd\015\ufefd\016\ufefd\017\ufefd\020\ufefd\021" +
    "\ufefd\022\ufefd\023\ufefd\024\ufefd\025\ufefd\026\ufefd\027\ufefd" +
    "\030\ufefd\031\ufefd\032\ufefd\034\ufefd\037\ufefd\040\ufefd\043" +
    "\ufefd\045\ufefd\046\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd" +
    "\055\ufefd\077\ufefd\100\ufefd\107\ufefd\111\ufefd\001\002\000" +
    "\004\013\312\001\002\000\110\003\ufefa\005\ufefa\006\ufefa" +
    "\007\ufefa\012\ufefa\013\ufefa\015\ufefa\016\ufefa\017\ufefa\020" +
    "\ufefa\021\ufefa\022\ufefa\023\ufefa\024\ufefa\025\ufefa\026\ufefa" +
    "\027\ufefa\030\ufefa\031\ufefa\032\ufefa\034\ufefa\037\ufefa\040" +
    "\ufefa\043\ufefa\045\ufefa\046\ufefa\051\ufefa\052\ufefa\053\ufefa" +
    "\054\ufefa\055\ufefa\077\ufefa\100\ufefa\107\ufefa\111\ufefa\001" +
    "\002\000\004\034\314\001\002\000\004\107\315\001\002" +
    "\000\004\013\316\001\002\000\110\003\ufefc\005\ufefc\006" +
    "\ufefc\007\ufefc\012\ufefc\013\ufefc\015\ufefc\016\ufefc\017\ufefc" +
    "\020\ufefc\021\ufefc\022\ufefc\023\ufefc\024\ufefc\025\ufefc\026" +
    "\ufefc\027\ufefc\030\ufefc\031\ufefc\032\ufefc\034\ufefc\037\ufefc" +
    "\040\ufefc\043\ufefc\045\ufefc\046\ufefc\051\ufefc\052\ufefc\053" +
    "\ufefc\054\ufefc\055\ufefc\077\ufefc\100\ufefc\107\ufefc\111\ufefc" +
    "\001\002\000\024\003\060\012\043\047\042\050\057\054" +
    "\041\055\062\107\044\110\052\111\046\001\002\000\024" +
    "\003\322\012\043\047\042\050\057\054\041\055\062\107" +
    "\044\110\052\111\046\001\002\000\006\003\uffd4\007\uffd0" +
    "\001\002\000\032\003\uffd1\007\uffcd\015\uffb2\016\uffb2\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\205" +
    "\026\206\001\002\000\006\003\uffd2\007\uffce\001\002\000" +
    "\010\003\uffe4\005\uffe4\010\uffe4\001\002\000\010\003\uffea" +
    "\005\uffea\010\uffea\001\002\000\020\003\uffc7\006\uffc7\007" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\107\uffc7\001\002\000\056" +
    "\002\uffc8\003\343\006\uffc8\007\uffc8\011\344\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\037\uffc8\040\uffc8\043\uffc8\045\uffc8" +
    "\046\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\077" +
    "\uffc8\100\uffc8\107\uffc8\001\002\000\022\003\uffc6\006\uffc6" +
    "\007\340\011\337\027\uffc6\030\uffc6\031\uffc6\107\uffc6\001" +
    "\002\000\020\003\334\006\015\007\332\027\025\030\016" +
    "\031\014\107\021\001\002\000\016\003\022\006\015\027" +
    "\025\030\016\031\014\107\021\001\002\000\010\003\uffe7" +
    "\005\uffe7\010\uffe7\001\002\000\026\003\022\005\uffe5\006" +
    "\015\007\033\010\uffe5\011\036\027\025\030\016\031\014" +
    "\107\035\001\002\000\010\003\uffe1\005\uffe1\010\uffe1\001" +
    "\002\000\010\003\uffe8\005\uffe8\010\uffe8\001\002\000\024" +
    "\003\060\012\043\047\042\050\057\054\041\055\062\107" +
    "\044\110\052\111\046\001\002\000\016\003\022\006\015" +
    "\027\025\030\016\031\014\107\021\001\002\000\010\003" +
    "\uffe2\005\uffe2\010\uffe2\001\002\000\020\003\uffd3\006\uffd3" +
    "\007\uffd3\027\uffd3\030\uffd3\031\uffd3\107\uffd3\001\002\000" +
    "\024\003\060\012\043\047\042\050\057\054\041\055\062" +
    "\107\044\110\052\111\046\001\002\000\024\003\346\012" +
    "\043\047\042\050\057\054\041\055\062\107\044\110\052" +
    "\111\046\001\002\000\020\003\uffd4\006\uffd4\007\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\107\uffd4\001\002\000\044\003\uffd1" +
    "\006\uffd1\007\uffd1\015\uffb2\016\uffb2\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\205\026\206\027\uffd1" +
    "\030\uffd1\031\uffd1\107\uffd1\001\002\000\020\003\uffd2\006" +
    "\uffd2\007\uffd2\027\uffd2\030\uffd2\031\uffd2\107\uffd2\001\002" +
    "\000\004\010\351\001\002\000\004\005\352\001\002\000" +
    "\046\003\u0100\027\025\030\016\031\014\032\374\037\u010c" +
    "\040\367\043\372\045\371\046\u0104\051\377\052\u0105\053" +
    "\u0103\054\041\055\062\077\376\100\366\107\373\001\002" +
    "\000\052\002\uff2f\003\uff2f\006\uff2f\027\uff2f\030\uff2f\031" +
    "\uff2f\032\uff2f\037\uff2f\040\uff2f\043\uff2f\045\uff2f\046\uff2f" +
    "\051\uff2f\052\uff2f\053\uff2f\054\uff2f\055\uff2f\077\uff2f\100" +
    "\uff2f\107\uff2f\001\002\000\006\003\u063c\007\u063d\001\002" +
    "\000\052\002\uff30\003\uff30\006\uff30\027\uff30\030\uff30\031" +
    "\uff30\032\uff30\037\uff30\040\uff30\043\uff30\045\uff30\046\uff30" +
    "\051\uff30\052\uff30\053\uff30\054\uff30\055\uff30\077\uff30\100" +
    "\uff30\107\uff30\001\002\000\052\002\uff32\003\uff32\006\uff32" +
    "\027\uff32\030\uff32\031\uff32\032\uff32\037\uff32\040\uff32\043" +
    "\uff32\045\uff32\046\uff32\051\uff32\052\uff32\053\uff32\054\uff32" +
    "\055\uff32\077\uff32\100\uff32\107\uff32\001\002\000\052\002" +
    "\uff11\003\uff11\006\uff11\027\uff11\030\uff11\031\uff11\032\uff11" +
    "\037\uff11\040\uff11\043\uff11\045\uff11\046\uff11\051\uff11\052" +
    "\uff11\053\uff11\054\uff11\055\uff11\077\uff11\100\uff11\107\uff11" +
    "\001\002\000\052\002\ufec3\003\ufec3\006\ufec3\027\ufec3\030" +
    "\ufec3\031\ufec3\032\ufec3\037\ufec3\040\ufec3\043\ufec3\045\ufec3" +
    "\046\ufec3\051\ufec3\052\ufec3\053\ufec3\054\ufec3\055\ufec3\077" +
    "\ufec3\100\ufec3\107\ufec3\001\002\000\006\002\ufff9\006\u063b" +
    "\001\002\000\052\002\uff1d\003\uff1d\006\uff1d\027\uff1d\030" +
    "\uff1d\031\uff1d\032\uff1d\037\uff1d\040\uff1d\043\uff1d\045\uff1d" +
    "\046\uff1d\051\uff1d\052\uff1d\053\uff1d\054\uff1d\055\uff1d\077" +
    "\uff1d\100\uff1d\107\uff1d\001\002\000\052\002\uff33\003\uff33" +
    "\006\uff33\027\uff33\030\uff33\031\uff33\032\uff33\037\uff33\040" +
    "\uff33\043\uff33\045\uff33\046\uff33\051\uff33\052\uff33\053\uff33" +
    "\054\uff33\055\uff33\077\uff33\100\uff33\107\uff33\001\002\000" +
    "\052\002\uff31\003\uff31\006\uff31\027\uff31\030\uff31\031\uff31" +
    "\032\uff31\037\uff31\040\uff31\043\uff31\045\uff31\046\uff31\051" +
    "\uff31\052\uff31\053\uff31\054\uff31\055\uff31\077\uff31\100\uff31" +
    "\107\uff31\001\002\000\006\003\u0636\107\327\001\002\000" +
    "\006\003\u0628\012\u0629\001\002\000\006\003\u05fd\107\u05fc" +
    "\001\002\000\052\002\uff1c\003\uff1c\006\uff1c\027\uff1c\030" +
    "\uff1c\031\uff1c\032\uff1c\037\uff1c\040\uff1c\043\uff1c\045\uff1c" +
    "\046\uff1c\051\uff1c\052\uff1c\053\uff1c\054\uff1c\055\uff1c\077" +
    "\uff1c\100\uff1c\107\uff1c\001\002\000\022\003\u05eb\012\u05ea" +
    "\047\241\050\244\054\041\055\062\107\246\111\207\001" +
    "\002\000\006\003\u05cb\012\u05cc\001\002\000\006\003\343" +
    "\011\u023b\001\002\000\006\003\u01e0\107\u01df\001\002\000" +
    "\052\002\uff91\003\uff91\006\uff91\027\uff91\030\uff91\031\uff91" +
    "\032\uff91\037\uff91\040\uff91\043\uff91\045\uff91\046\uff91\051" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\077\uff91\100\uff91" +
    "\107\uff91\001\002\000\006\003\u01b3\107\u01b2\001\002\000" +
    "\006\003\u01a3\012\u01a4\001\002\000\056\002\uff8e\003\uffc9" +
    "\006\uff8e\007\u0197\011\337\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\037\uff8e\040\uff8e\043\uff8e\045\uff8e\046\uff8e\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\077\uff8e\100\uff8e\107" +
    "\u0196\001\002\000\052\002\uff92\003\uff92\006\uff92\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\037\uff92\040\uff92\043\uff92\045" +
    "\uff92\046\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\077\uff92\100\uff92\107\uff92\001\002\000\052\002\ufec2\003" +
    "\ufec2\006\ufec2\027\ufec2\030\ufec2\031\ufec2\032\ufec2\037\ufec2" +
    "\040\ufec2\043\ufec2\045\ufec2\046\ufec2\051\ufec2\052\ufec2\053" +
    "\ufec2\054\ufec2\055\ufec2\077\ufec2\100\ufec2\107\ufec2\001\002" +
    "\000\006\003\u0188\012\u0189\001\002\000\006\003\u017a\012" +
    "\u017b\001\002\000\006\003\u016c\012\u016d\001\002\000\052" +
    "\002\uff0f\003\uff0f\006\uff0f\027\uff0f\030\uff0f\031\uff0f\032" +
    "\uff0f\037\uff0f\040\uff0f\043\uff0f\045\uff0f\046\uff0f\051\uff0f" +
    "\052\uff0f\053\uff0f\054\uff0f\055\uff0f\077\uff0f\100\uff0f\107" +
    "\uff0f\001\002\000\054\002\uffdd\003\u016a\006\uffdd\007\u016b" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\037\uffdd\040\uffdd\043" +
    "\uffdd\045\uffdd\046\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\077\uffdd\100\uffdd\107\uffdd\001\002\000\052\002" +
    "\uff3a\003\u0100\006\uff3a\027\025\030\016\031\014\032\374" +
    "\037\u010c\040\367\043\372\045\371\046\u0104\051\377\052" +
    "\u0105\053\u0103\054\041\055\062\077\376\100\366\107\373" +
    "\001\002\000\052\002\uff10\003\uff10\006\uff10\027\uff10\030" +
    "\uff10\031\uff10\032\uff10\037\uff10\040\uff10\043\uff10\045\uff10" +
    "\046\uff10\051\uff10\052\uff10\053\uff10\054\uff10\055\uff10\077" +
    "\uff10\100\uff10\107\uff10\001\002\000\052\002\uff8f\003\uff8f" +
    "\006\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\037\uff8f\040" +
    "\uff8f\043\uff8f\045\uff8f\046\uff8f\051\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\077\uff8f\100\uff8f\107\uff8f\001\002\000" +
    "\004\007\u0168\001\002\000\006\003\u010f\107\u010e\001\002" +
    "\000\052\002\uff90\003\uff90\006\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\037\uff90\040\uff90\043\uff90\045\uff90\046\uff90" +
    "\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\077\uff90\100" +
    "\uff90\107\uff90\001\002\000\006\003\u011b\011\u011c\001\002" +
    "\000\004\011\u0110\001\002\000\004\033\u0111\001\002\000" +
    "\004\037\u0112\001\002\000\004\012\u0113\001\002\000\004" +
    "\107\u0114\001\002\000\004\034\u0115\001\002\000\010\003" +
    "\233\107\231\110\052\001\002\000\004\034\u0117\001\002" +
    "\000\010\003\233\107\231\110\052\001\002\000\004\013" +
    "\u0119\001\002\000\004\007\u011a\001\002\000\052\002\uff8a" +
    "\003\uff8a\006\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\037" +
    "\uff8a\040\uff8a\043\uff8a\045\uff8a\046\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\077\uff8a\100\uff8a\107\uff8a\001" +
    "\002\000\004\033\u015e\001\002\000\006\003\u011e\033\u011d" +
    "\001\002\000\006\003\u0129\037\u0128\001\002\000\004\037" +
    "\u011f\001\002\000\004\012\u0120\001\002\000\004\107\u0121" +
    "\001\002\000\004\034\u0122\001\002\000\010\003\233\107" +
    "\231\110\052\001\002\000\004\034\u0124\001\002\000\010" +
    "\003\233\107\231\110\052\001\002\000\004\013\u0126\001" +
    "\002\000\004\007\u0127\001\002\000\052\002\uff88\003\uff88" +
    "\006\uff88\027\uff88\030\uff88\031\uff88\032\uff88\037\uff88\040" +
    "\uff88\043\uff88\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88" +
    "\054\uff88\055\uff88\077\uff88\100\uff88\107\uff88\001\002\000" +
    "\006\003\u0132\012\u0133\001\002\000\004\012\u012a\001\002" +
    "\000\004\107\u012b\001\002\000\004\034\u012c\001\002\000" +
    "\010\003\233\107\231\110\052\001\002\000\004\034\u012e" +
    "\001\002\000\010\003\233\107\231\110\052\001\002\000" +
    "\004\013\u0130\001\002\000\004\007\u0131\001\002\000\052" +
    "\002\uff87\003\uff87\006\uff87\027\uff87\030\uff87\031\uff87\032" +
    "\uff87\037\uff87\040\uff87\043\uff87\045\uff87\046\uff87\051\uff87" +
    "\052\uff87\053\uff87\054\uff87\055\uff87\077\uff87\100\uff87\107" +
    "\uff87\001\002\000\004\107\u0157\001\002\000\006\003\u0135" +
    "\107\u0134\001\002\000\006\003\u013c\034\u013d\001\002\000" +
    "\004\034\u0136\001\002\000\010\003\233\107\231\110\052" +
    "\001\002\000\004\034\u0138\001\002\000\010\003\233\107" +
    "\231\110\052\001\002\000\004\013\u013a\001\002\000\004" +
    "\007\u013b\001\002\000\052\002\uff85\003\uff85\006\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\037\uff85\040\uff85\043\uff85" +
    "\045\uff85\046\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055" +
    "\uff85\077\uff85\100\uff85\107\uff85\001\002\000\010\003\233" +
    "\107\231\110\052\001\002\000\010\003\u013e\107\231\110" +
    "\052\001\002\000\010\003\uffba\025\uffb6\034\u014e\001\002" +
    "\000\006\003\u0140\034\u0141\001\002\000\010\003\233\107" +
    "\231\110\052\001\002\000\010\003\u0143\107\231\110\052" +
    "\001\002\000\006\003\u0146\013\u0147\001\002\000\010\003" +
    "\uffba\013\u0144\025\uffb6\001\002\000\004\007\u0145\001\002" +
    "\000\052\002\uff81\003\uff81\006\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\037\uff81\040\uff81\043\uff81\045\uff81\046\uff81" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\077\uff81\100" +
    "\uff81\107\uff81\001\002\000\004\007\u014a\001\002\000\006" +
    "\003\u0148\007\u0149\001\002\000\052\002\uff7f\003\uff7f\006" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\037\uff7f\040\uff7f" +
    "\043\uff7f\045\uff7f\046\uff7f\051\uff7f\052\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\077\uff7f\100\uff7f\107\uff7f\001\002\000\052" +
    "\002\uff8d\003\uff8d\006\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\037\uff8d\040\uff8d\043\uff8d\045\uff8d\046\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\055\uff8d\077\uff8d\100\uff8d\107" +
    "\uff8d\001\002\000\052\002\uff80\003\uff80\006\uff80\027\uff80" +
    "\030\uff80\031\uff80\032\uff80\037\uff80\040\uff80\043\uff80\045" +
    "\uff80\046\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80" +
    "\077\uff80\100\uff80\107\uff80\001\002\000\004\013\u014c\001" +
    "\002\000\004\007\u014d\001\002\000\052\002\uff82\003\uff82" +
    "\006\uff82\027\uff82\030\uff82\031\uff82\032\uff82\037\uff82\040" +
    "\uff82\043\uff82\045\uff82\046\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\077\uff82\100\uff82\107\uff82\001\002\000" +
    "\010\003\233\107\231\110\052\001\002\000\004\013\u0150" +
    "\001\002\000\004\007\u0151\001\002\000\052\002\uff83\003" +
    "\uff83\006\uff83\027\uff83\030\uff83\031\uff83\032\uff83\037\uff83" +
    "\040\uff83\043\uff83\045\uff83\046\uff83\051\uff83\052\uff83\053" +
    "\uff83\054\uff83\055\uff83\077\uff83\100\uff83\107\uff83\001\002" +
    "\000\004\034\u0153\001\002\000\010\003\233\107\231\110" +
    "\052\001\002\000\004\013\u0155\001\002\000\004\007\u0156" +
    "\001\002\000\052\002\uff84\003\uff84\006\uff84\027\uff84\030" +
    "\uff84\031\uff84\032\uff84\037\uff84\040\uff84\043\uff84\045\uff84" +
    "\046\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\077" +
    "\uff84\100\uff84\107\uff84\001\002\000\004\034\u0158\001\002" +
    "\000\010\003\233\107\231\110\052\001\002\000\004\034" +
    "\u015a\001\002\000\010\003\233\107\231\110\052\001\002" +
    "\000\004\013\u015c\001\002\000\004\007\u015d\001\002\000" +
    "\052\002\uff86\003\uff86\006\uff86\027\uff86\030\uff86\031\uff86" +
    "\032\uff86\037\uff86\040\uff86\043\uff86\045\uff86\046\uff86\051" +
    "\uff86\052\uff86\053\uff86\054\uff86\055\uff86\077\uff86\100\uff86" +
    "\107\uff86\001\002\000\004\037\u015f\001\002\000\004\012" +
    "\u0160\001\002\000\004\107\u0161\001\002\000\004\034\u0162" +
    "\001\002\000\010\003\233\107\231\110\052\001\002\000" +
    "\004\034\u0164\001\002\000\010\003\233\107\231\110\052" +
    "\001\002\000\004\013\u0166\001\002\000\004\007\u0167\001" +
    "\002\000\052\002\uff89\003\uff89\006\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\037\uff89\040\uff89\043\uff89\045\uff89\046" +
    "\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\077\uff89" +
    "\100\uff89\107\uff89\001\002\000\052\002\uff2e\003\uff2e\006" +
    "\uff2e\027\uff2e\030\uff2e\031\uff2e\032\uff2e\037\uff2e\040\uff2e" +
    "\043\uff2e\045\uff2e\046\uff2e\051\uff2e\052\uff2e\053\uff2e\054" +
    "\uff2e\055\uff2e\077\uff2e\100\uff2e\107\uff2e\001\002\000\006" +
    "\002\uff39\006\uff39\001\002\000\052\002\uffd9\003\uffd9\006" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\037\uffd9\040\uffd9" +
    "\043\uffd9\045\uffd9\046\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\077\uffd9\100\uffd9\107\uffd9\001\002\000\052" +
    "\002\uffde\003\uffde\006\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\037\uffde\040\uffde\043\uffde\045\uffde\046\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\077\uffde\100\uffde\107" +
    "\uffde\001\002\000\004\107\u0177\001\002\000\006\003\u016f" +
    "\107\u016e\001\002\000\006\003\u0172\013\u0173\001\002\000" +
    "\004\013\u0170\001\002\000\004\007\u0171\001\002\000\052" +
    "\002\uff07\003\uff07\006\uff07\027\uff07\030\uff07\031\uff07\032" +
    "\uff07\037\uff07\040\uff07\043\uff07\045\uff07\046\uff07\051\uff07" +
    "\052\uff07\053\uff07\054\uff07\055\uff07\077\uff07\100\uff07\107" +
    "\uff07\001\002\000\004\007\u0176\001\002\000\006\003\u0174" +
    "\007\u0175\001\002\000\052\002\uff05\003\uff05\006\uff05\027" +
    "\uff05\030\uff05\031\uff05\032\uff05\037\uff05\040\uff05\043\uff05" +
    "\045\uff05\046\uff05\051\uff05\052\uff05\053\uff05\054\uff05\055" +
    "\uff05\077\uff05\100\uff05\107\uff05\001\002\000\052\002\uff09" +
    "\003\uff09\006\uff09\027\uff09\030\uff09\031\uff09\032\uff09\037" +
    "\uff09\040\uff09\043\uff09\045\uff09\046\uff09\051\uff09\052\uff09" +
    "\053\uff09\054\uff09\055\uff09\077\uff09\100\uff09\107\uff09\001" +
    "\002\000\052\002\uff06\003\uff06\006\uff06\027\uff06\030\uff06" +
    "\031\uff06\032\uff06\037\uff06\040\uff06\043\uff06\045\uff06\046" +
    "\uff06\051\uff06\052\uff06\053\uff06\054\uff06\055\uff06\077\uff06" +
    "\100\uff06\107\uff06\001\002\000\004\013\u0178\001\002\000" +
    "\004\007\u0179\001\002\000\052\002\uff08\003\uff08\006\uff08" +
    "\027\uff08\030\uff08\031\uff08\032\uff08\037\uff08\040\uff08\043" +
    "\uff08\045\uff08\046\uff08\051\uff08\052\uff08\053\uff08\054\uff08" +
    "\055\uff08\077\uff08\100\uff08\107\uff08\001\002\000\004\107" +
    "\u0185\001\002\000\006\003\u017d\107\u017c\001\002\000\006" +
    "\003\u0180\013\u0181\001\002\000\004\013\u017e\001\002\000" +
    "\004\007\u017f\001\002\000\052\002\uff19\003\uff19\006\uff19" +
    "\027\uff19\030\uff19\031\uff19\032\uff19\037\uff19\040\uff19\043" +
    "\uff19\045\uff19\046\uff19\051\uff19\052\uff19\053\uff19\054\uff19" +
    "\055\uff19\077\uff19\100\uff19\107\uff19\001\002\000\004\007" +
    "\u0184\001\002\000\006\003\u0182\007\u0183\001\002\000\052" +
    "\002\uff17\003\uff17\006\uff17\027\uff17\030\uff17\031\uff17\032" +
    "\uff17\037\uff17\040\uff17\043\uff17\045\uff17\046\uff17\051\uff17" +
    "\052\uff17\053\uff17\054\uff17\055\uff17\077\uff17\100\uff17\107" +
    "\uff17\001\002\000\052\002\uff1b\003\uff1b\006\uff1b\027\uff1b" +
    "\030\uff1b\031\uff1b\032\uff1b\037\uff1b\040\uff1b\043\uff1b\045" +
    "\uff1b\046\uff1b\051\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b" +
    "\077\uff1b\100\uff1b\107\uff1b\001\002\000\052\002\uff18\003" +
    "\uff18\006\uff18\027\uff18\030\uff18\031\uff18\032\uff18\037\uff18" +
    "\040\uff18\043\uff18\045\uff18\046\uff18\051\uff18\052\uff18\053" +
    "\uff18\054\uff18\055\uff18\077\uff18\100\uff18\107\uff18\001\002" +
    "\000\004\013\u0186\001\002\000\004\007\u0187\001\002\000" +
    "\052\002\uff1a\003\uff1a\006\uff1a\027\uff1a\030\uff1a\031\uff1a" +
    "\032\uff1a\037\uff1a\040\uff1a\043\uff1a\045\uff1a\046\uff1a\051" +
    "\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\077\uff1a\100\uff1a" +
    "\107\uff1a\001\002\000\004\107\u0193\001\002\000\006\003" +
    "\u018b\107\u018a\001\002\000\006\003\u018e\013\u018f\001\002" +
    "\000\004\013\u018c\001\002\000\004\007\u018d\001\002\000" +
    "\052\002\uff02\003\uff02\006\uff02\027\uff02\030\uff02\031\uff02" +
    "\032\uff02\037\uff02\040\uff02\043\uff02\045\uff02\046\uff02\051" +
    "\uff02\052\uff02\053\uff02\054\uff02\055\uff02\077\uff02\100\uff02" +
    "\107\uff02\001\002\000\004\007\u0192\001\002\000\006\003" +
    "\u0190\007\u0191\001\002\000\052\002\uff00\003\uff00\006\uff00" +
    "\027\uff00\030\uff00\031\uff00\032\uff00\037\uff00\040\uff00\043" +
    "\uff00\045\uff00\046\uff00\051\uff00\052\uff00\053\uff00\054\uff00" +
    "\055\uff00\077\uff00\100\uff00\107\uff00\001\002\000\052\002" +
    "\uff04\003\uff04\006\uff04\027\uff04\030\uff04\031\uff04\032\uff04" +
    "\037\uff04\040\uff04\043\uff04\045\uff04\046\uff04\051\uff04\052" +
    "\uff04\053\uff04\054\uff04\055\uff04\077\uff04\100\uff04\107\uff04" +
    "\001\002\000\052\002\uff01\003\uff01\006\uff01\027\uff01\030" +
    "\uff01\031\uff01\032\uff01\037\uff01\040\uff01\043\uff01\045\uff01" +
    "\046\uff01\051\uff01\052\uff01\053\uff01\054\uff01\055\uff01\077" +
    "\uff01\100\uff01\107\uff01\001\002\000\004\013\u0194\001\002" +
    "\000\004\007\u0195\001\002\000\052\002\uff03\003\uff03\006" +
    "\uff03\027\uff03\030\uff03\031\uff03\032\uff03\037\uff03\040\uff03" +
    "\043\uff03\045\uff03\046\uff03\051\uff03\052\uff03\053\uff03\054" +
    "\uff03\055\uff03\077\uff03\100\uff03\107\uff03\001\002\000\056" +
    "\002\uffc7\003\uffc7\006\uffc7\007\uffc7\011\u0198\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\037\uffc7\040\uffc7\043\uffc7\045\uffc7" +
    "\046\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\077" +
    "\uffc7\100\uffc7\107\uffc7\001\002\000\052\002\uffda\003\uffda" +
    "\006\uffda\027\uffda\030\uffda\031\uffda\032\uffda\037\uffda\040" +
    "\uffda\043\uffda\045\uffda\046\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\077\uffda\100\uffda\107\uffda\001\002\000" +
    "\004\033\u0199\001\002\000\004\037\u019a\001\002\000\004" +
    "\012\u019b\001\002\000\004\107\u019c\001\002\000\004\034" +
    "\u019d\001\002\000\010\003\233\107\231\110\052\001\002" +
    "\000\004\034\u019f\001\002\000\010\003\233\107\231\110" +
    "\052\001\002\000\004\013\u01a1\001\002\000\004\007\u01a2" +
    "\001\002\000\052\002\uff8b\003\uff8b\006\uff8b\027\uff8b\030" +
    "\uff8b\031\uff8b\032\uff8b\037\uff8b\040\uff8b\043\uff8b\045\uff8b" +
    "\046\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\077" +
    "\uff8b\100\uff8b\107\uff8b\001\002\000\004\107\u01af\001\002" +
    "\000\006\003\u01a6\107\u01a5\001\002\000\006\003\u01a9\013" +
    "\u01aa\001\002\000\004\013\u01a7\001\002\000\004\007\u01a8" +
    "\001\002\000\052\002\uff14\003\uff14\006\uff14\027\uff14\030" +
    "\uff14\031\uff14\032\uff14\037\uff14\040\uff14\043\uff14\045\uff14" +
    "\046\uff14\051\uff14\052\uff14\053\uff14\054\uff14\055\uff14\077" +
    "\uff14\100\uff14\107\uff14\001\002\000\004\007\u01ae\001\002" +
    "\000\006\003\u01ab\007\u01ac\001\002\000\004\007\u01ad\001" +
    "\002\000\052\002\uff16\003\uff16\006\uff16\027\uff16\030\uff16" +
    "\031\uff16\032\uff16\037\uff16\040\uff16\043\uff16\045\uff16\046" +
    "\uff16\051\uff16\052\uff16\053\uff16\054\uff16\055\uff16\077\uff16" +
    "\100\uff16\107\uff16\001\002\000\052\002\uff12\003\uff12\006" +
    "\uff12\027\uff12\030\uff12\031\uff12\032\uff12\037\uff12\040\uff12" +
    "\043\uff12\045\uff12\046\uff12\051\uff12\052\uff12\053\uff12\054" +
    "\uff12\055\uff12\077\uff12\100\uff12\107\uff12\001\002\000\052" +
    "\002\uff13\003\uff13\006\uff13\027\uff13\030\uff13\031\uff13\032" +
    "\uff13\037\uff13\040\uff13\043\uff13\045\uff13\046\uff13\051\uff13" +
    "\052\uff13\053\uff13\054\uff13\055\uff13\077\uff13\100\uff13\107" +
    "\uff13\001\002\000\004\013\u01b0\001\002\000\004\007\u01b1" +
    "\001\002\000\052\002\uff15\003\uff15\006\uff15\027\uff15\030" +
    "\uff15\031\uff15\032\uff15\037\uff15\040\uff15\043\uff15\045\uff15" +
    "\046\uff15\051\uff15\052\uff15\053\uff15\054\uff15\055\uff15\077" +
    "\uff15\100\uff15\107\uff15\001\002\000\006\003\u01c3\011\u01c4" +
    "\001\002\000\004\011\u01b4\001\002\000\004\033\u01b5\001" +
    "\002\000\004\041\u01b6\001\002\000\010\003\u01b8\107\231" +
    "\110\052\001\002\000\004\042\u01c1\001\002\000\014\003" +
    "\uffba\007\uffba\025\uffb6\034\u01be\042\uffba\001\002\000\012" +
    "\003\u01ba\007\uff74\034\u01bb\042\uff74\001\002\000\010\003" +
    "\u01b8\107\231\110\052\001\002\000\010\003\u01bd\107\231" +
    "\110\052\001\002\000\010\003\uff73\007\uff73\042\uff73\001" +
    "\002\000\014\003\uffba\007\uffba\025\uffb6\034\u01be\042\uffba" +
    "\001\002\000\010\003\u01b8\107\231\110\052\001\002\000" +
    "\010\003\uff71\007\uff71\042\uff71\001\002\000\010\003\uff70" +
    "\007\uff70\042\uff70\001\002\000\004\007\u01c2\001\002\000" +
    "\052\002\uff7b\003\uff7b\006\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\037\uff7b\040\uff7b\043\uff7b\045\uff7b\046\uff7b\051" +
    "\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\077\uff7b\100\uff7b" +
    "\107\uff7b\001\002\000\004\033\u01da\001\002\000\006\003" +
    "\u01c6\033\u01c5\001\002\000\006\003\u01cb\041\u01cc\001\002" +
    "\000\004\041\u01c7\001\002\000\010\003\u01b8\107\231\110" +
    "\052\001\002\000\004\042\u01c9\001\002\000\004\007\u01ca" +
    "\001\002\000\052\002\uff79\003\uff79\006\uff79\027\uff79\030" +
    "\uff79\031\uff79\032\uff79\037\uff79\040\uff79\043\uff79\045\uff79" +
    "\046\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\077" +
    "\uff79\100\uff79\107\uff79\001\002\000\010\003\u01b8\107\231" +
    "\110\052\001\002\000\010\003\u01ce\107\231\110\052\001" +
    "\002\000\010\003\u01d1\007\u01d3\042\u01d2\001\002\000\014" +
    "\003\uffba\007\uffba\025\uffb6\034\u01be\042\u01cf\001\002\000" +
    "\004\007\u01d0\001\002\000\052\002\uff77\003\uff77\006\uff77" +
    "\027\uff77\030\uff77\031\uff77\032\uff77\037\uff77\040\uff77\043" +
    "\uff77\045\uff77\046\uff77\051\uff77\052\uff77\053\uff77\054\uff77" +
    "\055\uff77\077\uff77\100\uff77\107\uff77\001\002\000\004\007" +
    "\u01d6\001\002\000\006\003\u01d4\007\u01d5\001\002\000\052" +
    "\002\uff7d\003\uff7d\006\uff7d\027\uff7d\030\uff7d\031\uff7d\032" +
    "\uff7d\037\uff7d\040\uff7d\043\uff7d\045\uff7d\046\uff7d\051\uff7d" +
    "\052\uff7d\053\uff7d\054\uff7d\055\uff7d\077\uff7d\100\uff7d\107" +
    "\uff7d\001\002\000\052\002\uff75\003\uff75\006\uff75\027\uff75" +
    "\030\uff75\031\uff75\032\uff75\037\uff75\040\uff75\043\uff75\045" +
    "\uff75\046\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75" +
    "\077\uff75\100\uff75\107\uff75\001\002\000\052\002\uff7e\003" +
    "\uff7e\006\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\037\uff7e" +
    "\040\uff7e\043\uff7e\045\uff7e\046\uff7e\051\uff7e\052\uff7e\053" +
    "\uff7e\054\uff7e\055\uff7e\077\uff7e\100\uff7e\107\uff7e\001\002" +
    "\000\052\002\uff76\003\uff76\006\uff76\027\uff76\030\uff76\031" +
    "\uff76\032\uff76\037\uff76\040\uff76\043\uff76\045\uff76\046\uff76" +
    "\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76\077\uff76\100" +
    "\uff76\107\uff76\001\002\000\004\042\u01d8\001\002\000\004" +
    "\007\u01d9\001\002\000\052\002\uff78\003\uff78\006\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\037\uff78\040\uff78\043\uff78" +
    "\045\uff78\046\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055" +
    "\uff78\077\uff78\100\uff78\107\uff78\001\002\000\004\041\u01db" +
    "\001\002\000\010\003\u01b8\107\231\110\052\001\002\000" +
    "\004\042\u01dd\001\002\000\004\007\u01de\001\002\000\052" +
    "\002\uff7a\003\uff7a\006\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\037\uff7a\040\uff7a\043\uff7a\045\uff7a\046\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\055\uff7a\077\uff7a\100\uff7a\107" +
    "\uff7a\001\002\000\006\003\u01ee\011\u01ef\001\002\000\004" +
    "\011\u01e1\001\002\000\004\033\u01e2\001\002\000\004\032" +
    "\u01e3\001\002\000\004\012\u01e4\001\002\000\004\107\u01e5" +
    "\001\002\000\004\034\u01e6\001\002\000\006\035\u01e8\036" +
    "\u01e7\001\002\000\006\003\uff1e\034\uff1e\001\002\000\006" +
    "\003\uff1f\034\uff1f\001\002\000\004\034\u01ea\001\002\000" +
    "\004\107\u01eb\001\002\000\004\013\u01ec\001\002\000\004" +
    "\007\u01ed\001\002\000\052\002\uff2b\003\uff2b\006\uff2b\027" +
    "\uff2b\030\uff2b\031\uff2b\032\uff2b\037\uff2b\040\uff2b\043\uff2b" +
    "\045\uff2b\046\uff2b\051\uff2b\052\uff2b\053\uff2b\054\uff2b\055" +
    "\uff2b\077\uff2b\100\uff2b\107\uff2b\001\002\000\004\033\u0231" +
    "\001\002\000\006\003\u01f1\033\u01f0\001\002\000\006\003" +
    "\u01fb\032\u01fc\001\002\000\004\032\u01f2\001\002\000\004" +
    "\012\u01f3\001\002\000\004\107\u01f4\001\002\000\004\034" +
    "\u01f5\001\002\000\006\035\u01e8\036\u01e7\001\002\000\004" +
    "\034\u01f7\001\002\000\004\107\u01f8\001\002\000\004\013" +
    "\u01f9\001\002\000\004\007\u01fa\001\002\000\052\002\uff29" +
    "\003\uff29\006\uff29\027\uff29\030\uff29\031\uff29\032\uff29\037" +
    "\uff29\040\uff29\043\uff29\045\uff29\046\uff29\051\uff29\052\uff29" +
    "\053\uff29\054\uff29\055\uff29\077\uff29\100\uff29\107\uff29\001" +
    "\002\000\004\012\u0229\001\002\000\006\003\u01fd\012\u01fe" +
    "\001\002\000\004\107\u0222\001\002\000\006\003\u0200\107" +
    "\u01ff\001\002\000\006\003\u0207\034\u0208\001\002\000\004" +
    "\034\u0201\001\002\000\006\035\u01e8\036\u01e7\001\002\000" +
    "\004\034\u0203\001\002\000\004\107\u0204\001\002\000\004" +
    "\013\u0205\001\002\000\004\007\u0206\001\002\000\052\002" +
    "\uff26\003\uff26\006\uff26\027\uff26\030\uff26\031\uff26\032\uff26" +
    "\037\uff26\040\uff26\043\uff26\045\uff26\046\uff26\051\uff26\052" +
    "\uff26\053\uff26\054\uff26\055\uff26\077\uff26\100\uff26\107\uff26" +
    "\001\002\000\006\035\u01e8\036\u01e7\001\002\000\010\003" +
    "\u0209\035\u01e8\036\u01e7\001\002\000\004\034\u0219\001\002" +
    "\000\006\003\u020b\034\u020c\001\002\000\004\107\u0216\001" +
    "\002\000\006\003\u020e\107\u020d\001\002\000\006\003\u0211" +
    "\013\u0212\001\002\000\004\013\u020f\001\002\000\004\007" +
    "\u0210\001\002\000\052\002\uff22\003\uff22\006\uff22\027\uff22" +
    "\030\uff22\031\uff22\032\uff22\037\uff22\040\uff22\043\uff22\045" +
    "\uff22\046\uff22\051\uff22\052\uff22\053\uff22\054\uff22\055\uff22" +
    "\077\uff22\100\uff22\107\uff22\001\002\000\004\007\u0215\001" +
    "\002\000\006\003\u0213\007\u0214\001\002\000\052\002\uff20" +
    "\003\uff20\006\uff20\027\uff20\030\uff20\031\uff20\032\uff20\037" +
    "\uff20\040\uff20\043\uff20\045\uff20\046\uff20\051\uff20\052\uff20" +
    "\053\uff20\054\uff20\055\uff20\077\uff20\100\uff20\107\uff20\001" +
    "\002\000\052\002\uff2d\003\uff2d\006\uff2d\027\uff2d\030\uff2d" +
    "\031\uff2d\032\uff2d\037\uff2d\040\uff2d\043\uff2d\045\uff2d\046" +
    "\uff2d\051\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d\077\uff2d" +
    "\100\uff2d\107\uff2d\001\002\000\052\002\uff21\003\uff21\006" +
    "\uff21\027\uff21\030\uff21\031\uff21\032\uff21\037\uff21\040\uff21" +
    "\043\uff21\045\uff21\046\uff21\051\uff21\052\uff21\053\uff21\054" +
    "\uff21\055\uff21\077\uff21\100\uff21\107\uff21\001\002\000\004" +
    "\013\u0217\001\002\000\004\007\u0218\001\002\000\052\002" +
    "\uff23\003\uff23\006\uff23\027\uff23\030\uff23\031\uff23\032\uff23" +
    "\037\uff23\040\uff23\043\uff23\045\uff23\046\uff23\051\uff23\052" +
    "\uff23\053\uff23\054\uff23\055\uff23\077\uff23\100\uff23\107\uff23" +
    "\001\002\000\004\107\u021a\001\002\000\004\013\u021b\001" +
    "\002\000\004\007\u021c\001\002\000\052\002\uff24\003\uff24" +
    "\006\uff24\027\uff24\030\uff24\031\uff24\032\uff24\037\uff24\040" +
    "\uff24\043\uff24\045\uff24\046\uff24\051\uff24\052\uff24\053\uff24" +
    "\054\uff24\055\uff24\077\uff24\100\uff24\107\uff24\001\002\000" +
    "\004\034\u021e\001\002\000\004\107\u021f\001\002\000\004" +
    "\013\u0220\001\002\000\004\007\u0221\001\002\000\052\002" +
    "\uff25\003\uff25\006\uff25\027\uff25\030\uff25\031\uff25\032\uff25" +
    "\037\uff25\040\uff25\043\uff25\045\uff25\046\uff25\051\uff25\052" +
    "\uff25\053\uff25\054\uff25\055\uff25\077\uff25\100\uff25\107\uff25" +
    "\001\002\000\004\034\u0223\001\002\000\006\035\u01e8\036" +
    "\u01e7\001\002\000\004\034\u0225\001\002\000\004\107\u0226" +
    "\001\002\000\004\013\u0227\001\002\000\004\007\u0228\001" +
    "\002\000\052\002\uff27\003\uff27\006\uff27\027\uff27\030\uff27" +
    "\031\uff27\032\uff27\037\uff27\040\uff27\043\uff27\045\uff27\046" +
    "\uff27\051\uff27\052\uff27\053\uff27\054\uff27\055\uff27\077\uff27" +
    "\100\uff27\107\uff27\001\002\000\004\107\u022a\001\002\000" +
    "\004\034\u022b\001\002\000\006\035\u01e8\036\u01e7\001\002" +
    "\000\004\034\u022d\001\002\000\004\107\u022e\001\002\000" +
    "\004\013\u022f\001\002\000\004\007\u0230\001\002\000\052" +
    "\002\uff28\003\uff28\006\uff28\027\uff28\030\uff28\031\uff28\032" +
    "\uff28\037\uff28\040\uff28\043\uff28\045\uff28\046\uff28\051\uff28" +
    "\052\uff28\053\uff28\054\uff28\055\uff28\077\uff28\100\uff28\107" +
    "\uff28\001\002\000\004\032\u0232\001\002\000\004\012\u0233" +
    "\001\002\000\004\107\u0234\001\002\000\004\034\u0235\001" +
    "\002\000\006\035\u01e8\036\u01e7\001\002\000\004\034\u0237" +
    "\001\002\000\004\107\u0238\001\002\000\004\013\u0239\001" +
    "\002\000\004\007\u023a\001\002\000\052\002\uff2a\003\uff2a" +
    "\006\uff2a\027\uff2a\030\uff2a\031\uff2a\032\uff2a\037\uff2a\040" +
    "\uff2a\043\uff2a\045\uff2a\046\uff2a\051\uff2a\052\uff2a\053\uff2a" +
    "\054\uff2a\055\uff2a\077\uff2a\100\uff2a\107\uff2a\001\002\000" +
    "\026\003\346\012\043\033\u023c\047\042\050\057\054\041" +
    "\055\062\107\044\110\052\111\046\001\002\000\012\032" +
    "\u0240\037\u023d\040\u023e\041\u023f\001\002\000\004\012\u05c3" +
    "\001\002\000\004\012\u024c\001\002\000\010\003\u01b8\107" +
    "\231\110\052\001\002\000\004\012\u0241\001\002\000\004" +
    "\107\u0242\001\002\000\004\034\u0243\001\002\000\006\035" +
    "\u01e8\036\u01e7\001\002\000\004\034\u0245\001\002\000\004" +
    "\107\u0246\001\002\000\004\013\u0247\001\002\000\004\007" +
    "\u0248\001\002\000\052\002\uff2c\003\uff2c\006\uff2c\027\uff2c" +
    "\030\uff2c\031\uff2c\032\uff2c\037\uff2c\040\uff2c\043\uff2c\045" +
    "\uff2c\046\uff2c\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055\uff2c" +
    "\077\uff2c\100\uff2c\107\uff2c\001\002\000\004\042\u024a\001" +
    "\002\000\004\007\u024b\001\002\000\052\002\uff7c\003\uff7c" +
    "\006\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\037\uff7c\040" +
    "\uff7c\043\uff7c\045\uff7c\046\uff7c\051\uff7c\052\uff7c\053\uff7c" +
    "\054\uff7c\055\uff7c\077\uff7c\100\uff7c\107\uff7c\001\002\000" +
    "\016\003\u024f\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\004\013\u05c1\001\002\000\024\003\u027a\012" +
    "\211\025\215\026\217\034\u0278\054\041\055\062\107\212" +
    "\111\207\001\002\000\024\003\uff98\012\uff98\025\205\026" +
    "\206\034\u0250\054\uff98\055\uff98\107\uff98\111\uff98\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0252" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0254\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0256\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0258\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u025a\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u025c\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u025e\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0260\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u0262\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0264\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0266\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0268\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u026a\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u026c" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u026e\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0270\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0272\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0274\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0276\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\013\uff63\025\215\026\217\001" +
    "\002\000\016\003\u02a2\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u027b\001\002\000\026\003\uff98\012\211\013\uff98\025\205" +
    "\026\206\034\uff98\054\041\055\062\107\212\111\207\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u027d\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u027f\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0281\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0283\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0285\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0287\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0289" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u028b\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u028d\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u028f\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0291\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0293\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0295\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0297\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u0299\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u029b\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u029d\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u029f\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\013\uff62\025\215\026\217\001\002" +
    "\000\024\003\u027a\012\211\025\215\026\217\034\u02c9\054" +
    "\041\055\062\107\212\111\207\001\002\000\024\003\uff98" +
    "\012\uff98\025\205\026\206\034\u02a3\054\uff98\055\uff98\107" +
    "\uff98\111\uff98\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u02a5\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u02a7\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u02a9\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u02ab\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u02ad" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u02af\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u02b1\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u02b3\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u02b5\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u02b7\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u02b9\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u02bb\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u02bd\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u02bf\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u02c1\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u02c3\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u02c5\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u02c7" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\013\uff61\025\215" +
    "\026\217\001\002\000\016\003\u02f0\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u02cb\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u02cd\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u02cf\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u02d1\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u02d3\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u02d5\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u02d7\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u02d9\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u02db\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u02dd\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u02df\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u02e1" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u02e3\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u02e5\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u02e7\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u02e9\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u02eb\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u02ed\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\013\uff60\025\215\026" +
    "\217\001\002\000\024\003\u027a\012\211\025\215\026\217" +
    "\034\u0315\054\041\055\062\107\212\111\207\001\002\000" +
    "\024\003\uff98\012\uff98\025\205\026\206\034\u02f1\054\uff98" +
    "\055\uff98\107\uff98\111\uff98\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u02f3\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u02f5\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u02f7\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u02f9\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u02fb\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u02fd\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u02ff\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0301\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0303\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0305" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0307\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0309\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u030b\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u030d\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u030f\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0311\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0313\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\013\uff5f\025" +
    "\215\026\217\001\002\000\016\003\u033a\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0317\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0319\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u031b\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u031d\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u031f" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0321\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0323\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0325\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0327\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0329\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u032b\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u032d\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u032f\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0331\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0333\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0335\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0337\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\013\uff5e\025\215\026\217" +
    "\001\002\000\024\003\u027a\012\211\025\215\026\217\034" +
    "\u035d\054\041\055\062\107\212\111\207\001\002\000\024" +
    "\003\uff98\012\uff98\025\205\026\206\034\u033b\054\uff98\055" +
    "\uff98\107\uff98\111\uff98\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u033d\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u033f\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0341\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0343" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0345\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0347\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0349\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u034b\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u034d\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u034f\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0351\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u0353\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0355\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0357\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0359\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u035b\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\013\uff5d\025\215\026\217" +
    "\001\002\000\016\003\u0380\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u035f\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0361\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0363\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0365\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0367\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0369\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u036b\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u036d\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u036f\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0371\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0373\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0375\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0377" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0379\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u037b\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u037d\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\013\uff5c\025\215\026\217\001\002\000\024\003" +
    "\u027a\012\211\025\215\026\217\034\u03a1\054\041\055\062" +
    "\107\212\111\207\001\002\000\024\003\uff98\012\uff98\025" +
    "\205\026\206\034\u0381\054\uff98\055\uff98\107\uff98\111\uff98" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0383\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0385\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0387\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0389\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u038b\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u038d\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u038f\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u0391\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0393\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0395\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0397\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0399\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u039b" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u039d\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u039f\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\013\uff5b\025\215\026\217\001\002\000\016\003\u03c2\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u03a3\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u03a5\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u03a7\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u03a9\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u03ab\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u03ad\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u03af\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u03b1\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u03b3\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u03b5" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u03b7\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u03b9\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u03bb\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u03bd\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u03bf\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\013\uff5a\025\215\026\217\001" +
    "\002\000\024\003\u027a\012\211\025\215\026\217\034\u03e1" +
    "\054\041\055\062\107\212\111\207\001\002\000\024\003" +
    "\uff98\012\uff98\025\205\026\206\034\u03c3\054\uff98\055\uff98" +
    "\107\uff98\111\uff98\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u03c5\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u03c7\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u03c9\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u03cb\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u03cd\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u03cf\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u03d1\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u03d3\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u03d5\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u03d7\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u03d9" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u03db\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u03dd\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u03df\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\013\uff59\025\215\026\217\001\002\000\016\003" +
    "\u0400\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u03e3\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u03e5\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u03e7\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u03e9\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u03eb\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u03ed\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u03ef\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u03f1\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u03f3" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u03f5\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u03f7\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u03f9\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u03fb\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u03fd\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\013\uff58\025\215\026\217\001" +
    "\002\000\024\003\u027a\012\211\025\215\026\217\034\u041d" +
    "\054\041\055\062\107\212\111\207\001\002\000\024\003" +
    "\uff98\012\uff98\025\205\026\206\034\u0401\054\uff98\055\uff98" +
    "\107\uff98\111\uff98\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0403\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0405\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0407\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0409\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u040b\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u040d\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u040f\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0411\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0413\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0415\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0417" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0419\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u041b\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\013\uff57\025\215\026\217\001\002\000\016\003\u043a\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u041f\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0421\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0423\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0425\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u0427\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0429\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u042b\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u042d\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u042f\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0431" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0433\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0435\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0437\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\013\uff56\025\215\026\217\001\002\000\024\003" +
    "\u027a\012\211\025\215\026\217\034\u0455\054\041\055\062" +
    "\107\212\111\207\001\002\000\024\003\uff98\012\uff98\025" +
    "\205\026\206\034\u043b\054\uff98\055\uff98\107\uff98\111\uff98" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u043d\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u043f\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0441\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0443\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0445\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0447\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0449\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u044b\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u044d\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u044f\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0451\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0453\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\013\uff55\025\215\026\217" +
    "\001\002\000\016\003\u0470\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0457\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0459\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u045b\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u045d\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u045f\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0461\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0463\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u0465\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0467\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0469\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u046b\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u046d\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\013\uff54\025\215\026\217" +
    "\001\002\000\024\003\u027a\012\211\025\215\026\217\034" +
    "\u0489\054\041\055\062\107\212\111\207\001\002\000\024" +
    "\003\uff98\012\uff98\025\205\026\206\034\u0471\054\uff98\055" +
    "\uff98\107\uff98\111\uff98\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0473\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0475\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0477\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0479" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u047b\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u047d\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u047f\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0481\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0483\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0485\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0487\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\013\uff53\025" +
    "\215\026\217\001\002\000\016\003\u04a2\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u048b\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u048d\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u048f\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0491\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0493" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0495\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0497\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0499\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u049b\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u049d\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u049f\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\013\uff52\025\215\026" +
    "\217\001\002\000\024\003\u027a\012\211\025\215\026\217" +
    "\034\u04b9\054\041\055\062\107\212\111\207\001\002\000" +
    "\024\003\uff98\012\uff98\025\205\026\206\034\u04a3\054\uff98" +
    "\055\uff98\107\uff98\111\uff98\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u04a5\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u04a7\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u04a9\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u04ab\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u04ad\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u04af\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u04b1\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u04b3\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u04b5\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u04b7" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\013\uff51\025\215" +
    "\026\217\001\002\000\016\003\u04d0\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u04bb\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u04bd\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u04bf\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u04c1\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u04c3\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u04c5\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u04c7\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u04c9\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u04cb\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u04cd\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\013\uff50\025\215\026\217\001\002" +
    "\000\024\003\u027a\012\211\025\215\026\217\034\u04e5\054" +
    "\041\055\062\107\212\111\207\001\002\000\024\003\uff98" +
    "\012\uff98\025\205\026\206\034\u04d1\054\uff98\055\uff98\107" +
    "\uff98\111\uff98\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u04d3\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u04d5\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u04d7\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u04d9\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u04db" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u04dd\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u04df\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u04e1\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u04e3\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\013\uff4f\025\215\026\217\001\002\000" +
    "\016\003\u04fa\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u04e7\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u04e9\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u04eb\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u04ed\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u04ef\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u04f1\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u04f3\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u04f5" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u04f7\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\013\uff4e" +
    "\025\215\026\217\001\002\000\024\003\u027a\012\211\025" +
    "\215\026\217\034\u050d\054\041\055\062\107\212\111\207" +
    "\001\002\000\024\003\uff98\012\uff98\025\205\026\206\034" +
    "\u04fb\054\uff98\055\uff98\107\uff98\111\uff98\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u04fd\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u04ff" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0501\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0503\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0505\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0507\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0509\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u050b\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\013\uff4d\025\215\026" +
    "\217\001\002\000\016\003\u0520\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u050f\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0511\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0513\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0515\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0517\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0519" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u051b\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u051d\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\013\uff4c\025\215\026\217\001\002\000\024\003\u027a\012" +
    "\211\025\215\026\217\034\u0531\054\041\055\062\107\212" +
    "\111\207\001\002\000\024\003\uff98\012\uff98\025\205\026" +
    "\206\034\u0521\054\uff98\055\uff98\107\uff98\111\uff98\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0523" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0525\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u0527\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0529\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u052b\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u052d\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u052f\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\013\uff4b\025\215\026" +
    "\217\001\002\000\016\003\u0542\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u0533\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0535\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0537\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0539\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u053b\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u053d" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u053f\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\013\uff4a" +
    "\025\215\026\217\001\002\000\024\003\u027a\012\211\025" +
    "\215\026\217\034\u0551\054\041\055\062\107\212\111\207" +
    "\001\002\000\024\003\uff98\012\uff98\025\205\026\206\034" +
    "\u0543\054\uff98\055\uff98\107\uff98\111\uff98\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0545\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u0547" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u0549\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u054b\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u054d\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u054f\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\013\uff49\025\215\026\217\001\002\000" +
    "\016\003\u0560\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0553\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0555\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\025\215\026" +
    "\217\034\u0557\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0559\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u055b\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u055d\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\013\uff48\025\215\026\217\001\002" +
    "\000\024\003\u027a\012\211\025\215\026\217\034\u056d\054" +
    "\041\055\062\107\212\111\207\001\002\000\024\003\uff98" +
    "\012\uff98\025\205\026\206\034\u0561\054\uff98\055\uff98\107" +
    "\uff98\111\uff98\001\002\000\016\003\214\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0563\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0565\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0567\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0569\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\025\215\026\217\034\u056b" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\013\uff47\025\215" +
    "\026\217\001\002\000\016\003\u057a\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u056f\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u0571\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u0573\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u0575\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0577\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\013\uff46\025\215\026" +
    "\217\001\002\000\024\003\u027a\012\211\025\215\026\217" +
    "\034\u0585\054\041\055\062\107\212\111\207\001\002\000" +
    "\024\003\uff98\012\uff98\025\205\026\206\034\u057b\054\uff98" +
    "\055\uff98\107\uff98\111\uff98\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u057d\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u057f\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\025\215\026\217\034\u0581\001" +
    "\002\000\016\003\214\012\211\054\041\055\062\107\212" +
    "\111\207\001\002\000\012\003\216\025\215\026\217\034" +
    "\u0583\001\002\000\016\003\214\012\211\054\041\055\062" +
    "\107\212\111\207\001\002\000\012\003\216\013\uff45\025" +
    "\215\026\217\001\002\000\016\003\u0590\012\211\054\041" +
    "\055\062\107\212\111\207\001\002\000\012\003\216\025" +
    "\215\026\217\034\u0587\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0589\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u058b\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u058d\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\013\uff44\025\215\026\217" +
    "\001\002\000\024\003\u027a\012\211\025\215\026\217\034" +
    "\u0599\054\041\055\062\107\212\111\207\001\002\000\024" +
    "\003\uff98\012\uff98\025\205\026\206\034\u0591\054\uff98\055" +
    "\uff98\107\uff98\111\uff98\001\002\000\016\003\214\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\012\003" +
    "\216\025\215\026\217\034\u0593\001\002\000\016\003\214" +
    "\012\211\054\041\055\062\107\212\111\207\001\002\000" +
    "\012\003\216\025\215\026\217\034\u0595\001\002\000\016" +
    "\003\214\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\012\003\216\025\215\026\217\034\u0597\001\002" +
    "\000\016\003\214\012\211\054\041\055\062\107\212\111" +
    "\207\001\002\000\012\003\216\013\uff43\025\215\026\217" +
    "\001\002\000\016\003\u05a2\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u059b\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u059d\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u059f\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\013\uff42\025\215\026\217\001\002\000\024\003" +
    "\u027a\012\211\025\215\026\217\034\u05a9\054\041\055\062" +
    "\107\212\111\207\001\002\000\024\003\uff98\012\uff98\025" +
    "\205\026\206\034\u05a3\054\uff98\055\uff98\107\uff98\111\uff98" +
    "\001\002\000\016\003\214\012\211\054\041\055\062\107" +
    "\212\111\207\001\002\000\012\003\216\025\215\026\217" +
    "\034\u05a5\001\002\000\016\003\214\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\012\003\216\025\215" +
    "\026\217\034\u05a7\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\013\uff41\025\215\026\217\001\002\000\016\003\u05b0\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\025\215\026\217\034\u05ab\001\002\000\016\003" +
    "\214\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u05ad\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\013\uff40\025\215\026\217\001" +
    "\002\000\024\003\u027a\012\211\025\215\026\217\034\u05b5" +
    "\054\041\055\062\107\212\111\207\001\002\000\024\003" +
    "\uff98\012\uff98\025\205\026\206\034\u05b1\054\uff98\055\uff98" +
    "\107\uff98\111\uff98\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\025\215\026\217\034\u05b3\001\002\000\016\003\214\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\013\uff3f\025\215\026\217\001\002\000\016\003" +
    "\u05ba\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\012\003\216\025\215\026\217\034\u05b7\001\002\000" +
    "\016\003\214\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\012\003\216\013\uff3e\025\215\026\217\001" +
    "\002\000\024\003\u027a\012\211\025\215\026\217\034\u05bd" +
    "\054\041\055\062\107\212\111\207\001\002\000\024\003" +
    "\uff98\012\uff98\025\205\026\206\034\u05bb\054\uff98\055\uff98" +
    "\107\uff98\111\uff98\001\002\000\016\003\214\012\211\054" +
    "\041\055\062\107\212\111\207\001\002\000\012\003\216" +
    "\013\uff3d\025\215\026\217\001\002\000\016\003\u05c0\012" +
    "\211\054\041\055\062\107\212\111\207\001\002\000\012" +
    "\003\216\013\uff3c\025\215\026\217\001\002\000\012\003" +
    "\216\013\uff64\025\215\026\217\001\002\000\012\003\uff98" +
    "\013\uff98\025\205\026\206\001\002\000\004\007\u05c2\001" +
    "\002\000\052\002\uff6d\003\uff6d\006\uff6d\027\uff6d\030\uff6d" +
    "\031\uff6d\032\uff6d\037\uff6d\040\uff6d\043\uff6d\045\uff6d\046" +
    "\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d\077\uff6d" +
    "\100\uff6d\107\uff6d\001\002\000\004\107\u05c4\001\002\000" +
    "\004\034\u05c5\001\002\000\010\003\233\107\231\110\052" +
    "\001\002\000\004\034\u05c7\001\002\000\010\003\233\107" +
    "\231\110\052\001\002\000\004\013\u05c9\001\002\000\004" +
    "\007\u05ca\001\002\000\052\002\uff8c\003\uff8c\006\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\037\uff8c\040\uff8c\043\uff8c" +
    "\045\uff8c\046\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\077\uff8c\100\uff8c\107\uff8c\001\002\000\022\003\247" +
    "\012\u05e1\047\241\050\244\054\041\055\062\107\246\111" +
    "\207\001\002\000\022\003\247\012\245\047\241\050\244" +
    "\054\041\055\062\107\246\111\207\001\002\000\006\005" +
    "\u05ce\013\u05cf\001\002\000\050\003\u05d3\006\u05d2\027\025" +
    "\030\016\031\014\032\374\037\u010c\040\367\043\372\045" +
    "\371\046\u0104\051\377\052\u0105\053\u0103\054\041\055\062" +
    "\077\376\100\366\107\373\001\002\000\006\003\u05d1\005" +
    "\u05d0\001\002\000\050\003\u05d3\006\u05d2\027\025\030\016" +
    "\031\014\032\374\037\u010c\040\367\043\372\045\371\046" +
    "\u0104\051\377\052\u0105\053\u0103\054\041\055\062\077\376" +
    "\100\366\107\373\001\002\000\050\003\u05d3\006\u05d2\027" +
    "\025\030\016\031\014\032\374\037\u010c\040\367\043\372" +
    "\045\371\046\u0104\051\377\052\u0105\053\u0103\054\041\055" +
    "\062\077\376\100\366\107\373\001\002\000\056\002\uff38" +
    "\003\uff38\005\uff38\006\uff38\027\uff38\030\uff38\031\uff38\032" +
    "\uff38\037\uff38\040\uff38\043\uff38\044\uff38\045\uff38\046\uff38" +
    "\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\077\uff38\100" +
    "\uff38\107\uff38\001\002\000\062\002\uff36\003\uffc9\005\uff36" +
    "\006\uff8e\007\u0197\011\337\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\037\uff8e\040\uff8e\043\uff8e\044\uff36\045\uff8e\046\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\077\uff8e\100" +
    "\uff8e\107\u0196\001\002\000\052\002\ufebc\003\ufebc\006\ufebc" +
    "\027\ufebc\030\ufebc\031\ufebc\032\ufebc\037\ufebc\040\ufebc\043" +
    "\ufebc\045\ufebc\046\ufebc\051\ufebc\052\ufebc\053\ufebc\054\ufebc" +
    "\055\ufebc\077\ufebc\100\ufebc\107\ufebc\001\002\000\050\003" +
    "\u05d3\006\u05d2\027\025\030\016\031\014\032\374\037\u010c" +
    "\040\367\043\372\045\371\046\u0104\051\377\052\u0105\053" +
    "\u0103\054\041\055\062\077\376\100\366\107\373\001\002" +
    "\000\056\002\uff37\003\uff37\005\uff37\006\uff37\027\uff37\030" +
    "\uff37\031\uff37\032\uff37\037\uff37\040\uff37\043\uff37\044\uff37" +
    "\045\uff37\046\uff37\051\uff37\052\uff37\053\uff37\054\uff37\055" +
    "\uff37\077\uff37\100\uff37\107\uff37\001\002\000\056\002\ufec1" +
    "\003\ufec1\005\u05d8\006\ufec1\027\ufec1\030\ufec1\031\ufec1\032" +
    "\ufec1\037\ufec1\040\ufec1\043\ufec1\044\u05da\045\ufec1\046\ufec1" +
    "\051\ufec1\052\ufec1\053\ufec1\054\ufec1\055\ufec1\077\ufec1\100" +
    "\ufec1\107\ufec1\001\002\000\050\003\u05d3\006\u05d2\027\025" +
    "\030\016\031\014\032\374\037\u010c\040\367\043\372\045" +
    "\371\046\u0104\051\377\052\u0105\053\u0103\054\041\055\062" +
    "\077\376\100\366\107\373\001\002\000\052\002\ufebb\003" +
    "\ufebb\006\ufebb\027\ufebb\030\ufebb\031\ufebb\032\ufebb\037\ufebb" +
    "\040\ufebb\043\ufebb\045\ufebb\046\ufebb\051\ufebb\052\ufebb\053" +
    "\ufebb\054\ufebb\055\ufebb\077\ufebb\100\ufebb\107\ufebb\001\002" +
    "\000\052\003\u05d3\005\u05db\006\u05d2\027\025\030\016\031" +
    "\014\032\374\037\u010c\040\367\043\372\045\371\046\u0104" +
    "\051\377\052\u0105\053\u0103\054\041\055\062\077\376\100" +
    "\366\107\373\001\002\000\050\003\u05d3\006\u05d2\027\025" +
    "\030\016\031\014\032\374\037\u010c\040\367\043\372\045" +
    "\371\046\u0104\051\377\052\u0105\053\u0103\054\041\055\062" +
    "\077\376\100\366\107\373\001\002\000\052\002\ufeba\003" +
    "\ufeba\006\ufeba\027\ufeba\030\ufeba\031\ufeba\032\ufeba\037\ufeba" +
    "\040\ufeba\043\ufeba\045\ufeba\046\ufeba\051\ufeba\052\ufeba\053" +
    "\ufeba\054\ufeba\055\ufeba\077\ufeba\100\ufeba\107\ufeba\001\002" +
    "\000\052\002\ufec0\003\ufec0\006\ufec0\027\ufec0\030\ufec0\031" +
    "\ufec0\032\ufec0\037\ufec0\040\ufec0\043\ufec0\045\ufec0\046\ufec0" +
    "\051\ufec0\052\ufec0\053\ufec0\054\ufec0\055\ufec0\077\ufec0\100" +
    "\ufec0\107\ufec0\001\002\000\052\002\ufeb9\003\ufeb9\006\ufeb9" +
    "\027\ufeb9\030\ufeb9\031\ufeb9\032\ufeb9\037\ufeb9\040\ufeb9\043" +
    "\ufeb9\045\ufeb9\046\ufeb9\051\ufeb9\052\ufeb9\053\ufeb9\054\ufeb9" +
    "\055\ufeb9\077\ufeb9\100\ufeb9\107\ufeb9\001\002\000\052\002" +
    "\ufebd\003\ufebd\006\ufebd\027\ufebd\030\ufebd\031\ufebd\032\ufebd" +
    "\037\ufebd\040\ufebd\043\ufebd\045\ufebd\046\ufebd\051\ufebd\052" +
    "\ufebd\053\ufebd\054\ufebd\055\ufebd\077\ufebd\100\ufebd\107\ufebd" +
    "\001\002\000\004\013\u05e6\001\002\000\022\003\247\012" +
    "\245\047\241\050\244\054\041\055\062\107\246\111\207" +
    "\001\002\000\004\013\u05e3\001\002\000\014\003\uffa2\005" +
    "\u05e4\013\uffa2\015\uffa2\016\uffa2\001\002\000\050\003\u05d3" +
    "\006\u05d2\027\025\030\016\031\014\032\374\037\u010c\040" +
    "\367\043\372\045\371\046\u0104\051\377\052\u0105\053\u0103" +
    "\054\041\055\062\077\376\100\366\107\373\001\002\000" +
    "\052\002\ufebe\003\ufebe\006\ufebe\027\ufebe\030\ufebe\031\ufebe" +
    "\032\ufebe\037\ufebe\040\ufebe\043\ufebe\045\ufebe\046\ufebe\051" +
    "\ufebe\052\ufebe\053\ufebe\054\ufebe\055\ufebe\077\ufebe\100\ufebe" +
    "\107\ufebe\001\002\000\004\005\u05e7\001\002\000\050\003" +
    "\u05d3\006\u05d2\027\025\030\016\031\014\032\374\037\u010c" +
    "\040\367\043\372\045\371\046\u0104\051\377\052\u0105\053" +
    "\u0103\054\041\055\062\077\376\100\366\107\373\001\002" +
    "\000\052\002\ufebf\003\ufebf\006\ufebf\027\ufebf\030\ufebf\031" +
    "\ufebf\032\ufebf\037\ufebf\040\ufebf\043\ufebf\045\ufebf\046\ufebf" +
    "\051\ufebf\052\ufebf\053\ufebf\054\ufebf\055\ufebf\077\ufebf\100" +
    "\ufebf\107\ufebf\001\002\000\004\013\u05fa\001\002\000\022" +
    "\003\247\012\245\047\241\050\244\054\041\055\062\107" +
    "\246\111\207\001\002\000\050\003\247\012\245\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\205\026\206\047\241\050\244\054\041" +
    "\055\062\107\246\111\207\001\002\000\004\013\u05ed\001" +
    "\002\000\004\005\u05ee\001\002\000\050\003\u05d3\006\u05d2" +
    "\027\025\030\016\031\014\032\374\037\u010c\040\367\043" +
    "\372\045\371\046\u0104\051\377\052\u0105\053\u0103\054\041" +
    "\055\062\077\376\100\366\107\373\001\002\000\052\002" +
    "\ufeb7\003\ufeb7\006\ufeb7\027\ufeb7\030\ufeb7\031\ufeb7\032\ufeb7" +
    "\037\ufeb7\040\ufeb7\043\ufeb7\045\ufeb7\046\ufeb7\051\ufeb7\052" +
    "\ufeb7\053\ufeb7\054\ufeb7\055\ufeb7\077\ufeb7\100\ufeb7\107\ufeb7" +
    "\001\002\000\052\003\u05f2\006\u05d2\013\u05f1\027\025\030" +
    "\016\031\014\032\374\037\u010c\040\367\043\372\045\371" +
    "\046\u0104\051\377\052\u0105\053\u0103\054\041\055\062\077" +
    "\376\100\366\107\373\001\002\000\014\003\uffa2\005\u05f6" +
    "\013\uffa2\015\uffa2\016\uffa2\001\002\000\060\002\uff36\003" +
    "\uffc9\005\u05f4\006\uff8e\007\u0197\011\337\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\037\uff8e\040\uff8e\043\uff8e\045\uff8e\046" +
    "\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\077\uff8e" +
    "\100\uff8e\107\u0196\001\002\000\052\002\ufeb4\003\ufeb4\006" +
    "\ufeb4\027\ufeb4\030\ufeb4\031\ufeb4\032\ufeb4\037\ufeb4\040\ufeb4" +
    "\043\ufeb4\045\ufeb4\046\ufeb4\051\ufeb4\052\ufeb4\053\ufeb4\054" +
    "\ufeb4\055\ufeb4\077\ufeb4\100\ufeb4\107\ufeb4\001\002\000\050" +
    "\003\u05d3\006\u05d2\027\025\030\016\031\014\032\374\037" +
    "\u010c\040\367\043\372\045\371\046\u0104\051\377\052\u0105" +
    "\053\u0103\054\041\055\062\077\376\100\366\107\373\001" +
    "\002\000\052\002\ufeb6\003\ufeb6\006\ufeb6\027\ufeb6\030\ufeb6" +
    "\031\ufeb6\032\ufeb6\037\ufeb6\040\ufeb6\043\ufeb6\045\ufeb6\046" +
    "\ufeb6\051\ufeb6\052\ufeb6\053\ufeb6\054\ufeb6\055\ufeb6\077\ufeb6" +
    "\100\ufeb6\107\ufeb6\001\002\000\050\003\u05d3\006\u05d2\027" +
    "\025\030\016\031\014\032\374\037\u010c\040\367\043\372" +
    "\045\371\046\u0104\051\377\052\u0105\053\u0103\054\041\055" +
    "\062\077\376\100\366\107\373\001\002\000\050\003\u05d3" +
    "\006\u05d2\027\025\030\016\031\014\032\374\037\u010c\040" +
    "\367\043\372\045\371\046\u0104\051\377\052\u0105\053\u0103" +
    "\054\041\055\062\077\376\100\366\107\373\001\002\000" +
    "\052\002\ufeb5\003\ufeb5\006\ufeb5\027\ufeb5\030\ufeb5\031\ufeb5" +
    "\032\ufeb5\037\ufeb5\040\ufeb5\043\ufeb5\045\ufeb5\046\ufeb5\051" +
    "\ufeb5\052\ufeb5\053\ufeb5\054\ufeb5\055\ufeb5\077\ufeb5\100\ufeb5" +
    "\107\ufeb5\001\002\000\052\002\ufeb8\003\ufeb8\006\ufeb8\027" +
    "\ufeb8\030\ufeb8\031\ufeb8\032\ufeb8\037\ufeb8\040\ufeb8\043\ufeb8" +
    "\045\ufeb8\046\ufeb8\051\ufeb8\052\ufeb8\053\ufeb8\054\ufeb8\055" +
    "\ufeb8\077\ufeb8\100\ufeb8\107\ufeb8\001\002\000\050\003\u05d3" +
    "\006\u05d2\027\025\030\016\031\014\032\374\037\u010c\040" +
    "\367\043\372\045\371\046\u0104\051\377\052\u0105\053\u0103" +
    "\054\041\055\062\077\376\100\366\107\373\001\002\000" +
    "\052\002\ufeb3\003\ufeb3\006\ufeb3\027\ufeb3\030\ufeb3\031\ufeb3" +
    "\032\ufeb3\037\ufeb3\040\ufeb3\043\ufeb3\045\ufeb3\046\ufeb3\051" +
    "\ufeb3\052\ufeb3\053\ufeb3\054\ufeb3\055\ufeb3\077\ufeb3\100\ufeb3" +
    "\107\ufeb3\001\002\000\006\003\u0605\011\u0606\001\002\000" +
    "\004\011\u05fe\001\002\000\004\033\u05ff\001\002\000\004" +
    "\040\u0600\001\002\000\004\012\u0601\001\002\000\016\003" +
    "\u024f\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\004\013\u0603\001\002\000\004\007\u0604\001\002\000" +
    "\052\002\uff6c\003\uff6c\006\uff6c\027\uff6c\030\uff6c\031\uff6c" +
    "\032\uff6c\037\uff6c\040\uff6c\043\uff6c\045\uff6c\046\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\077\uff6c\100\uff6c" +
    "\107\uff6c\001\002\000\004\033\u0622\001\002\000\006\003" +
    "\u0608\033\u0607\001\002\000\006\003\u060e\040\u060f\001\002" +
    "\000\004\040\u0609\001\002\000\004\012\u060a\001\002\000" +
    "\016\003\u024f\012\211\054\041\055\062\107\212\111\207" +
    "\001\002\000\004\013\u060c\001\002\000\004\007\u060d\001" +
    "\002\000\052\002\uff6a\003\uff6a\006\uff6a\027\uff6a\030\uff6a" +
    "\031\uff6a\032\uff6a\037\uff6a\040\uff6a\043\uff6a\045\uff6a\046" +
    "\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\077\uff6a" +
    "\100\uff6a\107\uff6a\001\002\000\004\012\u061e\001\002\000" +
    "\006\003\u0610\012\u0611\001\002\000\016\003\u024f\012\211" +
    "\054\041\055\062\107\212\111\207\001\002\000\016\003" +
    "\u0613\012\211\054\041\055\062\107\212\111\207\001\002" +
    "\000\006\003\u0616\013\u0617\001\002\000\026\003\uff98\012" +
    "\uff98\013\u0614\025\205\026\206\034\u0250\054\uff98\055\uff98" +
    "\107\uff98\111\uff98\001\002\000\004\007\u0615\001\002\000" +
    "\052\002\uff67\003\uff67\006\uff67\027\uff67\030\uff67\031\uff67" +
    "\032\uff67\037\uff67\040\uff67\043\uff67\045\uff67\046\uff67\051" +
    "\uff67\052\uff67\053\uff67\054\uff67\055\uff67\077\uff67\100\uff67" +
    "\107\uff67\001\002\000\004\007\u061a\001\002\000\006\003" +
    "\u0618\007\u0619\001\002\000\052\002\uff65\003\uff65\006\uff65" +
    "\027\uff65\030\uff65\031\uff65\032\uff65\037\uff65\040\uff65\043" +
    "\uff65\045\uff65\046\uff65\051\uff65\052\uff65\053\uff65\054\uff65" +
    "\055\uff65\077\uff65\100\uff65\107\uff65\001\002\000\052\002" +
    "\uff6e\003\uff6e\006\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e" +
    "\037\uff6e\040\uff6e\043\uff6e\045\uff6e\046\uff6e\051\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\077\uff6e\100\uff6e\107\uff6e" +
    "\001\002\000\052\002\uff66\003\uff66\006\uff66\027\uff66\030" +
    "\uff66\031\uff66\032\uff66\037\uff66\040\uff66\043\uff66\045\uff66" +
    "\046\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66\077" +
    "\uff66\100\uff66\107\uff66\001\002\000\004\013\u061c\001\002" +
    "\000\004\007\u061d\001\002\000\052\002\uff68\003\uff68\006" +
    "\uff68\027\uff68\030\uff68\031\uff68\032\uff68\037\uff68\040\uff68" +
    "\043\uff68\045\uff68\046\uff68\051\uff68\052\uff68\053\uff68\054" +
    "\uff68\055\uff68\077\uff68\100\uff68\107\uff68\001\002\000\016" +
    "\003\u024f\012\211\054\041\055\062\107\212\111\207\001" +
    "\002\000\004\013\u0620\001\002\000\004\007\u0621\001\002" +
    "\000\052\002\uff69\003\uff69\006\uff69\027\uff69\030\uff69\031" +
    "\uff69\032\uff69\037\uff69\040\uff69\043\uff69\045\uff69\046\uff69" +
    "\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\077\uff69\100" +
    "\uff69\107\uff69\001\002\000\004\040\u0623\001\002\000\004" +
    "\012\u0624\001\002\000\016\003\u024f\012\211\054\041\055" +
    "\062\107\212\111\207\001\002\000\004\013\u0626\001\002" +
    "\000\004\007\u0627\001\002\000\052\002\uff6b\003\uff6b\006" +
    "\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\037\uff6b\040\uff6b" +
    "\043\uff6b\045\uff6b\046\uff6b\051\uff6b\052\uff6b\053\uff6b\054" +
    "\uff6b\055\uff6b\077\uff6b\100\uff6b\107\uff6b\001\002\000\010" +
    "\003\233\107\231\110\052\001\002\000\010\003\u062b\107" +
    "\231\110\052\001\002\000\006\003\u062e\013\u062f\001\002" +
    "\000\010\003\uffba\013\u062c\025\uffb6\001\002\000\004\007" +
    "\u062d\001\002\000\052\002\uff0c\003\uff0c\006\uff0c\027\uff0c" +
    "\030\uff0c\031\uff0c\032\uff0c\037\uff0c\040\uff0c\043\uff0c\045" +
    "\uff0c\046\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c\055\uff0c" +
    "\077\uff0c\100\uff0c\107\uff0c\001\002\000\004\007\u0632\001" +
    "\002\000\006\003\u0630\007\u0631\001\002\000\052\002\uff0a" +
    "\003\uff0a\006\uff0a\027\uff0a\030\uff0a\031\uff0a\032\uff0a\037" +
    "\uff0a\040\uff0a\043\uff0a\045\uff0a\046\uff0a\051\uff0a\052\uff0a" +
    "\053\uff0a\054\uff0a\055\uff0a\077\uff0a\100\uff0a\107\uff0a\001" +
    "\002\000\052\002\uff0e\003\uff0e\006\uff0e\027\uff0e\030\uff0e" +
    "\031\uff0e\032\uff0e\037\uff0e\040\uff0e\043\uff0e\045\uff0e\046" +
    "\uff0e\051\uff0e\052\uff0e\053\uff0e\054\uff0e\055\uff0e\077\uff0e" +
    "\100\uff0e\107\uff0e\001\002\000\052\002\uff0b\003\uff0b\006" +
    "\uff0b\027\uff0b\030\uff0b\031\uff0b\032\uff0b\037\uff0b\040\uff0b" +
    "\043\uff0b\045\uff0b\046\uff0b\051\uff0b\052\uff0b\053\uff0b\054" +
    "\uff0b\055\uff0b\077\uff0b\100\uff0b\107\uff0b\001\002\000\004" +
    "\013\u0634\001\002\000\004\007\u0635\001\002\000\052\002" +
    "\uff0d\003\uff0d\006\uff0d\027\uff0d\030\uff0d\031\uff0d\032\uff0d" +
    "\037\uff0d\040\uff0d\043\uff0d\045\uff0d\046\uff0d\051\uff0d\052" +
    "\uff0d\053\uff0d\054\uff0d\055\uff0d\077\uff0d\100\uff0d\107\uff0d" +
    "\001\002\000\056\002\uffc6\003\uffc6\006\uffc6\007\u063a\011" +
    "\337\027\uffc6\030\uffc6\031\uffc6\032\uffc6\037\uffc6\040\uffc6" +
    "\043\uffc6\045\uffc6\046\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\077\uffc6\100\uffc6\107\uffc6\001\002\000\006" +
    "\003\u0638\007\u0639\001\002\000\052\002\uffd5\003\uffd5\006" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\037\uffd5\040\uffd5" +
    "\043\uffd5\045\uffd5\046\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\077\uffd5\100\uffd5\107\uffd5\001\002\000\052" +
    "\002\uffdb\003\uffdb\006\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\037\uffdb\040\uffdb\043\uffdb\045\uffdb\046\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\077\uffdb\100\uffdb\107" +
    "\uffdb\001\002\000\052\002\uffd6\003\uffd6\006\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\037\uffd6\040\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\077\uffd6\100\uffd6\107\uffd6\001\002\000\004\002\ufff2\001" +
    "\002\000\052\002\uffd7\003\uffd7\006\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\037\uffd7\040\uffd7\043\uffd7\045\uffd7\046" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\077\uffd7" +
    "\100\uffd7\107\uffd7\001\002\000\052\002\uffdc\003\uffdc\006" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\037\uffdc\040\uffdc" +
    "\043\uffdc\045\uffdc\046\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\077\uffdc\100\uffdc\107\uffdc\001\002\000\004" +
    "\005\u063f\001\002\000\046\003\u0100\027\025\030\016\031" +
    "\014\032\374\037\u010c\040\367\043\372\045\371\046\u0104" +
    "\051\377\052\u0105\053\u0103\054\041\055\062\077\376\100" +
    "\366\107\373\001\002\000\004\006\u0641\001\002\000\004" +
    "\002\ufffc\001\002\000\016\003\022\006\015\027\025\030" +
    "\016\031\014\107\021\001\002\000\010\003\uffdf\005\uffdf" +
    "\010\uffdf\001\002\000\016\003\022\006\015\027\025\030" +
    "\016\031\014\107\021\001\002\000\004\010\u0646\001\002" +
    "\000\004\005\u0647\001\002\000\046\003\u0100\027\025\030" +
    "\016\031\014\032\374\037\u010c\040\367\043\372\045\371" +
    "\046\u0104\051\377\052\u0105\053\u0103\054\041\055\062\077" +
    "\376\100\366\107\373\001\002\000\004\006\u0649\001\002" +
    "\000\004\002\ufff3\001\002\000\004\005\u064b\001\002\000" +
    "\046\003\u0100\027\025\030\016\031\014\032\374\037\u010c" +
    "\040\367\043\372\045\371\046\u0104\051\377\052\u0105\053" +
    "\u0103\054\041\055\062\077\376\100\366\107\373\001\002" +
    "\000\004\006\u064d\001\002\000\004\002\ufffa\001\002\000" +
    "\004\010\u0680\001\002\000\016\003\022\006\015\027\025" +
    "\030\016\031\014\107\021\001\002\000\026\003\022\005" +
    "\u0652\006\015\007\033\010\uffe5\011\036\027\025\030\016" +
    "\031\014\107\035\001\002\000\004\010\u0658\001\002\000" +
    "\016\003\022\006\015\027\025\030\016\031\014\107\021" +
    "\001\002\000\004\010\u0654\001\002\000\004\005\u0655\001" +
    "\002\000\046\003\u0100\027\025\030\016\031\014\032\374" +
    "\037\u010c\040\367\043\372\045\371\046\u0104\051\377\052" +
    "\u0105\053\u0103\054\041\055\062\077\376\100\366\107\373" +
    "\001\002\000\004\006\u0657\001\002\000\004\002\ufff1\001" +
    "\002\000\004\005\u0659\001\002\000\046\003\u0100\027\025" +
    "\030\016\031\014\032\374\037\u010c\040\367\043\372\045" +
    "\371\046\u0104\051\377\052\u0105\053\u0103\054\041\055\062" +
    "\077\376\100\366\107\373\001\002\000\004\006\u065b\001" +
    "\002\000\004\002\ufff0\001\002\000\010\003\u065e\005\u065d" +
    "\010\u065f\001\002\000\046\003\u0100\027\025\030\016\031" +
    "\014\032\374\037\u010c\040\367\043\372\045\371\046\u0104" +
    "\051\377\052\u0105\053\u0103\054\041\055\062\077\376\100" +
    "\366\107\373\001\002\000\006\005\u0677\010\u0678\001\002" +
    "\000\050\003\u0662\005\u0661\027\025\030\016\031\014\032" +
    "\374\037\u010c\040\367\043\372\045\371\046\u0104\051\377" +
    "\052\u0105\053\u0103\054\041\055\062\077\376\100\366\107" +
    "\373\001\002\000\004\002\ufffd\001\002\000\046\003\u0100" +
    "\027\025\030\016\031\014\032\374\037\u010c\040\367\043" +
    "\372\045\371\046\u0104\051\377\052\u0105\053\u0103\054\041" +
    "\055\062\077\376\100\366\107\373\001\002\000\056\002" +
    "\uff8e\003\u0100\005\u0664\007\u0197\011\337\027\025\030\016" +
    "\031\014\032\374\037\u010c\040\367\043\372\045\371\046" +
    "\u0104\051\377\052\u0105\053\u0103\054\041\055\062\077\376" +
    "\100\366\107\u0665\001\002\000\004\006\u0673\001\002\000" +
    "\046\003\u0100\027\025\030\016\031\014\032\374\037\u010c" +
    "\040\367\043\372\045\371\046\u0104\051\377\052\u0105\053" +
    "\u0103\054\041\055\062\077\376\100\366\107\373\001\002" +
    "\000\054\002\uffc7\003\343\007\uffc7\011\u0666\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\037\uffc7\040\uffc7\043\uffc7\045\uffc7" +
    "\046\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\077" +
    "\uffc7\100\uffc7\107\uffc7\001\002\000\026\003\346\012\043" +
    "\033\u0667\047\042\050\057\054\041\055\062\107\044\110" +
    "\052\111\046\001\002\000\012\032\u0240\037\u0668\040\u023e" +
    "\041\u023f\001\002\000\004\012\u0669\001\002\000\004\107" +
    "\u066a\001\002\000\004\034\u066b\001\002\000\010\003\233" +
    "\107\231\110\052\001\002\000\004\034\u066d\001\002\000" +
    "\010\003\233\107\231\110\052\001\002\000\004\013\u066f" +
    "\001\002\000\004\007\u0670\001\002\000\052\002\uff8b\003" +
    "\uff8c\006\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\037\uff8c" +
    "\040\uff8c\043\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\077\uff8c\100\uff8c\107\uff8c\001\002" +
    "\000\004\006\u0672\001\002\000\004\002\uffed\001\002\000" +
    "\004\002\uffec\001\002\000\006\002\ufff6\006\u0675\001\002" +
    "\000\006\002\000\003\u0676\001\002\000\004\002\ufff5\001" +
    "\002\000\046\003\u0100\027\025\030\016\031\014\032\374" +
    "\037\u010c\040\367\043\372\045\371\046\u0104\051\377\052" +
    "\u0105\053\u0103\054\041\055\062\077\376\100\366\107\373" +
    "\001\002\000\004\005\u0679\001\002\000\046\003\u0100\027" +
    "\025\030\016\031\014\032\374\037\u010c\040\367\043\372" +
    "\045\371\046\u0104\051\377\052\u0105\053\u0103\054\041\055" +
    "\062\077\376\100\366\107\373\001\002\000\004\006\u067b" +
    "\001\002\000\004\002\uffef\001\002\000\004\006\u067d\001" +
    "\002\000\004\002\uffee\001\002\000\004\006\u067f\001\002" +
    "\000\004\002\ufff7\001\002\000\050\003\u0100\005\u0682\027" +
    "\025\030\016\031\014\032\374\037\u010c\040\367\043\372" +
    "\045\371\046\u0104\051\377\052\u0105\053\u0103\054\041\055" +
    "\062\077\376\100\366\107\373\001\002\000\006\002\uffff" +
    "\006\u0685\001\002\000\046\003\u0100\027\025\030\016\031" +
    "\014\032\374\037\u010c\040\367\043\372\045\371\046\u0104" +
    "\051\377\052\u0105\053\u0103\054\041\055\062\077\376\100" +
    "\366\107\373\001\002\000\006\002\ufffe\006\u0684\001\002" +
    "\000\004\002\ufff8\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0683\000\004\002\006\001\001\000\014\003\u064d\005" +
    "\017\006\011\007\022\060\023\001\001\000\014\003\u0649" +
    "\005\017\006\011\007\022\060\023\001\001\000\014\003" +
    "\012\005\017\006\011\007\022\060\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\347\005\017\006\011\007" +
    "\022\060\023\001\001\000\004\006\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\030\005\017\006" +
    "\011\007\022\060\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\026\005\017\006\011\007\022\060" +
    "\023\001\001\000\002\001\001\000\014\003\324\005\017" +
    "\006\011\007\022\060\023\001\001\000\002\001\001\000" +
    "\014\003\033\005\017\006\011\007\022\060\023\001\001" +
    "\000\014\003\323\005\017\006\011\007\022\060\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\044" +
    "\011\053\012\054\013\060\035\036\044\055\045\062\047" +
    "\052\050\047\051\046\061\037\062\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\266\011\053\012\054\013\270\035\036" +
    "\044\055\045\062\047\052\050\047\051\267\061\037\062" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\253\001\001\000\002\001\001\000" +
    "\004\015\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\200\001\001\000\004\046\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\203\001\001\000\002\001\001" +
    "\000\014\035\036\044\055\045\062\050\047\061\225\001" +
    "\001\000\014\035\036\044\055\045\062\050\047\061\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\212\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\035\036\044\055\045\062\050\047\061\223\001\001" +
    "\000\014\035\036\044\055\045\062\050\047\061\222\001" +
    "\001\000\014\035\036\044\055\045\062\050\047\061\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\233\047\052\001\001\000" +
    "\006\011\231\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\012\054\013\265\035\036\044\055\045\062" +
    "\050\047\051\241\061\037\062\050\001\001\000\002\001" +
    "\001\000\024\012\054\013\242\035\036\044\055\045\062" +
    "\050\047\051\241\061\037\062\050\001\001\000\002\001" +
    "\001\000\004\016\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\012\054\013\250\035\036\044\055\045" +
    "\062\050\047\051\247\061\037\062\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\264\061\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\263\061\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\010\322\011" +
    "\053\012\054\013\060\035\036\044\055\045\062\047\052" +
    "\050\047\051\046\061\037\062\050\001\001\000\032\010" +
    "\320\011\053\012\054\013\060\035\036\044\055\045\062" +
    "\047\052\050\047\051\046\061\037\062\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\332\005\017\006\011" +
    "\007\022\060\023\001\001\000\014\003\335\005\017\006" +
    "\011\007\022\060\023\001\001\000\002\001\001\000\014" +
    "\003\334\005\017\006\011\007\022\060\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\341\011\053" +
    "\012\054\013\060\035\036\044\055\045\062\047\052\050" +
    "\047\051\046\061\037\062\050\001\001\000\014\003\340" +
    "\005\017\006\011\007\022\060\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\010\346\011\053\012\054" +
    "\013\060\035\036\044\055\045\062\047\052\050\047\051" +
    "\046\061\037\062\050\001\001\000\032\010\344\011\053" +
    "\012\054\013\060\035\036\044\055\045\062\047\052\050" +
    "\047\051\046\061\037\062\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\360\005\364\006\353\007\u0106" +
    "\020\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101\031" +
    "\u0107\033\362\034\355\035\u010a\036\357\037\361\040\367" +
    "\041\356\042\u0108\043\u0105\044\055\045\062\052\354\053" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0636\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\012\054" +
    "\013\u05e8\035\036\044\055\045\062\050\047\051\241\061" +
    "\037\062\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\u0168" +
    "\005\364\006\353\007\u0106\020\u0100\021\374\022\u010c\023" +
    "\352\024\u0109\030\u0101\031\u0107\033\362\034\355\035\u010a" +
    "\036\357\037\361\040\367\041\356\042\u0108\043\u0105\044" +
    "\055\045\062\052\354\053\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\u0115\047\052\001\001" +
    "\000\002\001\001\000\006\011\u0117\047\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\u0122\047\052\001\001\000\002\001\001\000" +
    "\006\011\u0124\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u012c" +
    "\047\052\001\001\000\002\001\001\000\006\011\u012e\047" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\u0136\047\052\001\001" +
    "\000\002\001\001\000\006\011\u0138\047\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\u0151\047\052\001\001\000\006\011\u013e\047\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u014a" +
    "\047\052\001\001\000\006\011\u0141\047\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u014e\047" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u0153\047\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\u0158\047\052\001\001\000" +
    "\002\001\001\000\006\011\u015a\047\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\u0162\047\052\001\001\000\002\001\001\000" +
    "\006\011\u0164\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\u019d\047\052\001\001\000\002\001\001\000\006\011\u019f" +
    "\047\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\u01b8\026\u01b6\047\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\u01b8\026\u01bf\047\052\001\001\000\010\011\u01b8\026\u01bb" +
    "\047\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\u01b8\026\u01be\047\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\u01b8\026\u01c7\047\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\u01b8\026\u01d6\047\052\001\001\000\010\011\u01b8\026" +
    "\u01cc\047\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\u01b8" +
    "\026\u01db\047\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u01e8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u01f5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u0201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u021c\001\001\000\004\025\u0209\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u0223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u022b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u0235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\344\011\053\012\054\013\060\035\036\044\055" +
    "\045\062\047\052\050\047\051\046\061\037\062\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\u01b8\026\u0248\047\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u0243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\027\u024c\035" +
    "\036\044\055\045\062\050\047\051\u024d\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0278\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0250\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0252\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0254\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0256\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0258\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u025a\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u025c" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u025e\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0260\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0262\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0264\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0266\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0268\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u026a\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u026c\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u026e\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0270\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0272\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0274\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0276" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u02a0\061\037\001\001\000\002" +
    "\001\001\000\014\035\036\044\055\045\062\050\047\061" +
    "\222\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u027b\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u027d\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u027f\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0281\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0283\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0285\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0287\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0289\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u028b\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u028d" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u028f\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0291\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0293\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0295\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0297\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0299\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u029b\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u029d\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u029f\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u02c9\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u02a3\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u02a5\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u02a7" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u02a9\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u02ab\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u02ad\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u02af\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u02b1\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u02b3\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u02b5\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u02b7\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u02b9\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u02bb\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u02bd\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u02bf\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u02c1" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u02c3\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u02c5\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u02c7\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u02ee\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u02cb\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u02cd\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u02cf\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u02d1\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u02d3\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u02d5\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u02d7\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u02d9\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u02db" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u02dd\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u02df\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u02e1\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u02e3\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u02e5\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u02e7\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u02e9\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u02eb\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u02ed\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0315\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u02f1\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u02f3\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u02f5" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u02f7\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u02f9\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u02fb\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u02fd\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u02ff\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0301\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0303\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0305\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0307\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0309\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u030b\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u030d\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u030f" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0311\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0313\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0338\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0317\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0319\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u031b\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u031d\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u031f\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0321\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0323\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0325\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0327\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0329" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u032b\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u032d\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u032f\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0331\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0333\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0335\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0337\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u035d\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u033b\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u033d\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u033f\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0341\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0343" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0345\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0347\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0349\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u034b\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u034d\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u034f\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0351\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0353\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0355\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0357\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0359\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u035b\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u037e" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u035f\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0361\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0363\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0365\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0367\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0369\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u036b\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u036d\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u036f\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0371\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0373\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0375\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0377" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0379\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u037b\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u037d\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u03a1\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0381\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0383\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0385\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0387\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0389\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u038b\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u038d\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u038f\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0391" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0393\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0395\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0397\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0399\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u039b\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u039d\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u039f\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u03c0\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u03a3\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u03a5\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u03a7\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u03a9\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u03ab" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u03ad\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u03af\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u03b1\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u03b3\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u03b5\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u03b7\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u03b9\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u03bb\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u03bd\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u03bf\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u03e1\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u03c3\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u03c5" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u03c7\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u03c9\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u03cb\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u03cd\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u03cf\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u03d1\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u03d3\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u03d5\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u03d7\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u03d9\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u03db\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u03dd\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u03df" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u03fe\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u03e3\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u03e5\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u03e7\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u03e9\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u03eb\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u03ed\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u03ef\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u03f1\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u03f3\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u03f5\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u03f7\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u03f9" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u03fb\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u03fd\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u041d\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0401\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0403\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0405\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0407\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0409\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u040b\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u040d\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u040f\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0411\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0413" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0415\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0417\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0419\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u041b\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0438\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u041f\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0421\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0423\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0425\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0427\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0429\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u042b\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u042d" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u042f\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0431\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0433\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0435\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0437\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0455\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u043b\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u043d\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u043f\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0441\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0443\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0445\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0447" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0449\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u044b\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u044d\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u044f\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0451\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0453\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u046e\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0457\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0459\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u045b\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u045d\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u045f\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0461" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0463\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0465\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0467\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0469\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u046b\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u046d\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0489\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0471\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0473\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0475\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0477\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0479\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u047b" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u047d\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u047f\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0481\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0483\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0485\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0487\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u04a0\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u048b\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u048d\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u048f\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0491\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0493\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0495" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0497\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0499\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u049b\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u049d\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u049f\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u04b9\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u04a3\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u04a5\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u04a7\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u04a9\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u04ab\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u04ad\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u04af" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u04b1\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u04b3\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u04b5\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u04b7\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u04ce\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u04bb\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u04bd\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u04bf\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u04c1\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u04c3\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u04c5\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u04c7\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u04c9" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u04cb\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u04cd\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u04e5\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u04d1\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u04d3\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u04d5\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u04d7\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u04d9\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u04db\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u04dd\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u04df\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u04e1\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u04e3" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u04f8\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u04e7\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u04e9\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u04eb\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u04ed\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u04ef\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u04f1\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u04f3\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u04f5\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u04f7\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u050d\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u04fb\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u04fd" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u04ff\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0501\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0503\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0505\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0507\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0509\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u050b\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u051e\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u050f\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0511\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0513\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0515\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0517" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0519\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u051b\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u051d\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0531\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0521\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0523\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0525\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0527\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0529\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u052b\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u052d\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u052f\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0540" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0533\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0535\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u0537\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0539\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u053b\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u053d\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u053f\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0551\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0543\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0545\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0547\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0549\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u054b" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u054d\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u054f\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u055e\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0553\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0555\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0557\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0559\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u055b\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u055d\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u056d\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0561\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0563\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u0565" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0567\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0569\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u056b\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0578\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u056f\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u0571\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u0573\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0575\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0577\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0585\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u057b\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u057d\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u057f" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u0581\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u0583\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u058e\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u0587\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u0589\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u058b\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u058d\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u0599\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u0591\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u0593\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u0595\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u0597\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u05a0" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u059b\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u059d\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u059f\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u05a9\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u05a3\061\037\001\001" +
    "\000\002\001\001\000\016\035\036\044\055\045\062\050" +
    "\047\051\u05a5\061\037\001\001\000\002\001\001\000\016" +
    "\035\036\044\055\045\062\050\047\051\u05a7\061\037\001" +
    "\001\000\002\001\001\000\016\035\036\044\055\045\062" +
    "\050\047\051\u05ae\061\037\001\001\000\002\001\001\000" +
    "\016\035\036\044\055\045\062\050\047\051\u05ab\061\037" +
    "\001\001\000\002\001\001\000\016\035\036\044\055\045" +
    "\062\050\047\051\u05ad\061\037\001\001\000\002\001\001" +
    "\000\016\035\036\044\055\045\062\050\047\051\u05b5\061" +
    "\037\001\001\000\002\001\001\000\016\035\036\044\055" +
    "\045\062\050\047\051\u05b1\061\037\001\001\000\002\001" +
    "\001\000\016\035\036\044\055\045\062\050\047\051\u05b3" +
    "\061\037\001\001\000\002\001\001\000\016\035\036\044" +
    "\055\045\062\050\047\051\u05b8\061\037\001\001\000\002" +
    "\001\001\000\016\035\036\044\055\045\062\050\047\051" +
    "\u05b7\061\037\001\001\000\002\001\001\000\016\035\036" +
    "\044\055\045\062\050\047\051\u05bd\061\037\001\001\000" +
    "\002\001\001\000\016\035\036\044\055\045\062\050\047" +
    "\051\u05bb\061\037\001\001\000\002\001\001\000\016\035" +
    "\036\044\055\045\062\050\047\051\u05be\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\u05c5\047\052\001\001\000\002\001" +
    "\001\000\006\011\u05c7\047\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\012\054\013" +
    "\u05df\035\036\044\055\045\062\050\047\051\241\061\037" +
    "\062\050\001\001\000\024\012\054\013\u05cc\035\036\044" +
    "\055\045\062\050\047\051\241\061\037\062\050\001\001" +
    "\000\002\001\001\000\062\005\364\006\353\007\u0106\017" +
    "\u05de\020\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101" +
    "\031\u05d4\033\362\034\355\035\u010a\036\357\037\361\040" +
    "\367\041\356\042\u0108\043\u0105\044\055\045\062\052\354" +
    "\053\363\001\001\000\002\001\001\000\062\005\364\006" +
    "\353\007\u0106\017\u05d6\020\u0100\021\374\022\u010c\023\352" +
    "\024\u0109\030\u0101\031\u05d4\033\362\034\355\035\u010a\036" +
    "\357\037\361\040\367\041\356\042\u0108\043\u0105\044\055" +
    "\045\062\052\354\053\363\001\001\000\062\005\364\006" +
    "\353\007\u0106\017\u05d3\020\u0100\021\374\022\u010c\023\352" +
    "\024\u0109\030\u0101\031\u05d4\033\362\034\355\035\u010a\036" +
    "\357\037\361\040\367\041\356\042\u0108\043\u0105\044\055" +
    "\045\062\052\354\053\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\005\364\006\353" +
    "\007\u0106\017\u05d5\020\u0100\021\374\022\u010c\023\352\024" +
    "\u0109\030\u0101\031\u05d4\033\362\034\355\035\u010a\036\357" +
    "\037\361\040\367\041\356\042\u0108\043\u0105\044\055\045" +
    "\062\052\354\053\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\005\364\006\353\007\u0106\017\u05dd\020" +
    "\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101\031\u05d4" +
    "\033\362\034\355\035\u010a\036\357\037\361\040\367\041" +
    "\356\042\u0108\043\u0105\044\055\045\062\052\354\053\363" +
    "\001\001\000\002\001\001\000\062\005\364\006\353\007" +
    "\u0106\017\u05db\020\u0100\021\374\022\u010c\023\352\024\u0109" +
    "\030\u0101\031\u05d4\033\362\034\355\035\u010a\036\357\037" +
    "\361\040\367\041\356\042\u0108\043\u0105\044\055\045\062" +
    "\052\354\053\363\001\001\000\062\005\364\006\353\007" +
    "\u0106\017\u05dc\020\u0100\021\374\022\u010c\023\352\024\u0109" +
    "\030\u0101\031\u05d4\033\362\034\355\035\u010a\036\357\037" +
    "\361\040\367\041\356\042\u0108\043\u0105\044\055\045\062" +
    "\052\354\053\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\054\013\u05e1\035\036\044\055\045\062\050" +
    "\047\051\247\061\037\062\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\005\364\006\353\007\u0106\017" +
    "\u05e4\020\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101" +
    "\031\u05d4\033\362\034\355\035\u010a\036\357\037\361\040" +
    "\367\041\356\042\u0108\043\u0105\044\055\045\062\052\354" +
    "\053\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\005\364\006\353\007\u0106\017\u05e7\020\u0100\021\374" +
    "\022\u010c\023\352\024\u0109\030\u0101\031\u05d4\033\362\034" +
    "\355\035\u010a\036\357\037\361\040\367\041\356\042\u0108" +
    "\043\u0105\044\055\045\062\052\354\053\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\054\013\u05ef" +
    "\035\036\044\055\045\062\050\047\051\247\061\037\062" +
    "\050\001\001\000\024\012\054\013\u05eb\035\036\044\055" +
    "\045\062\050\047\051\241\061\037\062\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\005\364\006\353" +
    "\007\u0106\017\u05ee\020\u0100\021\374\022\u010c\023\352\024" +
    "\u0109\030\u0101\031\u05d4\033\362\034\355\035\u010a\036\357" +
    "\037\361\040\367\041\356\042\u0108\043\u0105\044\055\045" +
    "\062\052\354\053\363\001\001\000\002\001\001\000\062" +
    "\005\364\006\353\007\u0106\017\u05f2\020\u0100\021\374\022" +
    "\u010c\023\352\024\u0109\030\u0101\031\u05d4\033\362\034\355" +
    "\035\u010a\036\357\037\361\040\367\041\356\042\u0108\043" +
    "\u0105\044\055\045\062\052\354\053\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\005" +
    "\364\006\353\007\u0106\017\u05f4\020\u0100\021\374\022\u010c" +
    "\023\352\024\u0109\030\u0101\031\u05d4\033\362\034\355\035" +
    "\u010a\036\357\037\361\040\367\041\356\042\u0108\043\u0105" +
    "\044\055\045\062\052\354\053\363\001\001\000\002\001" +
    "\001\000\062\005\364\006\353\007\u0106\017\u05f8\020\u0100" +
    "\021\374\022\u010c\023\352\024\u0109\030\u0101\031\u05d4\033" +
    "\362\034\355\035\u010a\036\357\037\361\040\367\041\356" +
    "\042\u0108\043\u0105\044\055\045\062\052\354\053\363\001" +
    "\001\000\062\005\364\006\353\007\u0106\017\u05f7\020\u0100" +
    "\021\374\022\u010c\023\352\024\u0109\030\u0101\031\u05d4\033" +
    "\362\034\355\035\u010a\036\357\037\361\040\367\041\356" +
    "\042\u0108\043\u0105\044\055\045\062\052\354\053\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\005\364" +
    "\006\353\007\u0106\017\u05fa\020\u0100\021\374\022\u010c\023" +
    "\352\024\u0109\030\u0101\031\u05d4\033\362\034\355\035\u010a" +
    "\036\357\037\361\040\367\041\356\042\u0108\043\u0105\044" +
    "\055\045\062\052\354\053\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\027\u0601\035\036" +
    "\044\055\045\062\050\047\051\u024d\061\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\027\u060a\035\036\044\055" +
    "\045\062\050\047\051\u024d\061\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\027\u061a\035\036\044\055\045" +
    "\062\050\047\051\u024d\061\037\001\001\000\020\027\u0611" +
    "\035\036\044\055\045\062\050\047\051\u024d\061\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\027" +
    "\u061e\035\036\044\055\045\062\050\047\051\u024d\061\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\027\u0624" +
    "\035\036\044\055\045\062\050\047\051\u024d\061\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\u0632\047\052\001\001\000\006\011\u0629\047" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\u063f" +
    "\005\364\006\353\007\u0106\020\u0100\021\374\022\u010c\023" +
    "\352\024\u0109\030\u0101\031\u0107\033\362\034\355\035\u010a" +
    "\036\357\037\361\040\367\041\356\042\u0108\043\u0105\044" +
    "\055\045\062\052\354\053\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0642\005\017\006\011\007" +
    "\022\060\023\001\001\000\002\001\001\000\014\003\u0644" +
    "\005\017\006\011\007\022\060\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\u0647\005\364\006\353" +
    "\007\u0106\020\u0100\021\374\022\u010c\023\352\024\u0109\030" +
    "\u0101\031\u0107\033\362\034\355\035\u010a\036\357\037\361" +
    "\040\367\041\356\042\u0108\043\u0105\044\055\045\062\052" +
    "\354\053\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\u064b\005\364\006\353\007" +
    "\u0106\020\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101" +
    "\031\u0107\033\362\034\355\035\u010a\036\357\037\361\040" +
    "\367\041\356\042\u0108\043\u0105\044\055\045\062\052\354" +
    "\053\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u065b\005\017\006\011\007\022" +
    "\060\023\001\001\000\014\003\u0650\005\017\006\011\007" +
    "\022\060\023\001\001\000\002\001\001\000\014\003\u0652" +
    "\005\017\006\011\007\022\060\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\u0655\005\364\006\353" +
    "\007\u0106\020\u0100\021\374\022\u010c\023\352\024\u0109\030" +
    "\u0101\031\u0107\033\362\034\355\035\u010a\036\357\037\361" +
    "\040\367\041\356\042\u0108\043\u0105\044\055\045\062\052" +
    "\354\053\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\u0659\005\364\006\353\007" +
    "\u0106\020\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101" +
    "\031\u0107\033\362\034\355\035\u010a\036\357\037\361\040" +
    "\367\041\356\042\u0108\043\u0105\044\055\045\062\052\354" +
    "\053\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\u067d\005\364\006\353\007\u0106" +
    "\020\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101\031" +
    "\u0107\033\362\034\355\035\u010a\036\357\037\361\040\367" +
    "\041\356\042\u0108\043\u0105\044\055\045\062\052\354\053" +
    "\363\001\001\000\002\001\001\000\062\004\u065f\005\364" +
    "\006\353\007\u0106\020\u0100\021\374\022\u010c\023\352\024" +
    "\u0109\030\u0101\031\u0107\033\362\034\355\035\u010a\036\357" +
    "\037\361\040\367\041\356\042\u0108\043\u0105\044\055\045" +
    "\062\052\354\053\363\001\001\000\002\001\001\000\062" +
    "\004\u0673\005\364\006\353\007\u0106\020\u0100\021\374\022" +
    "\u010c\023\352\024\u0109\030\u0101\031\u0107\033\362\034\355" +
    "\035\u010a\036\357\037\361\040\367\041\356\042\u0108\043" +
    "\u0105\044\055\045\062\052\354\053\363\001\001\000\062" +
    "\004\u0662\005\364\006\353\007\u0106\020\u0100\021\374\022" +
    "\u010c\023\352\024\u0109\030\u0101\031\u0107\033\362\034\355" +
    "\035\u010a\036\357\037\361\040\367\041\356\042\u0108\043" +
    "\u0105\044\055\045\062\052\354\053\363\001\001\000\002" +
    "\001\001\000\062\004\u0670\005\364\006\353\007\u0106\020" +
    "\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101\031\u0107" +
    "\033\362\034\355\035\u010a\036\357\037\361\040\367\041" +
    "\356\042\u0108\043\u0105\044\055\045\062\052\354\053\363" +
    "\001\001\000\002\001\001\000\032\010\344\011\053\012" +
    "\054\013\060\035\036\044\055\045\062\047\052\050\047" +
    "\051\046\061\037\062\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\u066b\047\052\001\001\000\002\001\001\000\006\011" +
    "\u066d\047\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\004\u067b\005\364\006\353\007\u0106\020" +
    "\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101\031\u0107" +
    "\033\362\034\355\035\u010a\036\357\037\361\040\367\041" +
    "\356\042\u0108\043\u0105\044\055\045\062\052\354\053\363" +
    "\001\001\000\002\001\001\000\062\004\u0679\005\364\006" +
    "\353\007\u0106\020\u0100\021\374\022\u010c\023\352\024\u0109" +
    "\030\u0101\031\u0107\033\362\034\355\035\u010a\036\357\037" +
    "\361\040\367\041\356\042\u0108\043\u0105\044\055\045\062" +
    "\052\354\053\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\u0680\005\364\006\353\007" +
    "\u0106\020\u0100\021\374\022\u010c\023\352\024\u0109\030\u0101" +
    "\031\u0107\033\362\034\355\035\u010a\036\357\037\361\040" +
    "\367\041\356\042\u0108\043\u0105\044\055\045\062\052\354" +
    "\053\363\001\001\000\002\001\001\000\062\004\u0682\005" +
    "\364\006\353\007\u0106\020\u0100\021\374\022\u010c\023\352" +
    "\024\u0109\030\u0101\031\u0107\033\362\034\355\035\u010a\036" +
    "\357\037\361\040\367\041\356\042\u0108\043\u0105\044\055" +
    "\045\062\052\354\053\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Asintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Asintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Asintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    boolean esDAssig=false;
    int fl;

    public Asintactico(java_cup.runtime.Scanner s,ArrayList<Error1> m,int tfl) {
        super(s); 
        ManejadorDeErrores =m; 
        fl = tfl;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Asintactico$actions {


void print(String msj)
   {System.out.println(msj);
    }

  private final Asintactico parser;

  /** Constructor */
  CUP$Asintactico$actions(Asintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action_part00000000(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Asintactico$result;

      /* select the action based on the action number */
      switch (CUP$Asintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		RESULT = start_val;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Asintactico$parser.done_parsing();
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BEGIN ::= DECLARE DECLARE_BODY MAIN MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",dleft-1,dright,"Syntax Error: curly braces '{' '}' expected for 'MAIN block', are missing. Line: "+(dleft+1)+", column: "+(dright+5)+"."));
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly brace '{' expected after reserved word 'DECLARE', is missing. Line: "+(eleft+1)+", column: "+(eright+8)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BEGIN ::= DECLARE DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly brace '{' expected after reserved word DECLARE, is missing. Line: "+(eleft+1)+", column: "+(eright+8)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
  parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly brace '{' expected after reserved word 'MAIN' is missing. Line: "+(eleft+1)+", column: "+(eright-1)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BEGIN ::= error DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		
   parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: reserved word 'DECLARE' and left curly brace '{' are missing. Line: "+(eleft+1)+", column: "+(eright+8)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BEGIN ::= DECLARE DECLARE_BODY MAIN MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly brace '{' expected after reserved word 'DECLARE', is missing. Line: "+(eleft+1)+", column: "+(eright+8)+"."));
 parser.ManejadorDeErrores.add(new Error1("ES",dleft-1,dright,"Syntax Error: left curly brace '{' expected after reserved word 'MAIN', is missing. Line: "+(dleft+1)+", column: "+(dright+5)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BEGIN ::= CURLY_BR1 DECLARE_BODY CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected reserved word 'DECLARE', is missing. Line: "+(eleft+1)+", column: "+(eright)+"."));
 parser.ManejadorDeErrores.add(new Error1("ES",dleft-1,dright,"Syntax Error: expected reserved word 'MAIN', is missing. Line: "+(dleft+1)+", column: "+(dright)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BEGIN ::= error CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected value 'DECLARE' Missing. Line: "+(eleft+1)+", column: "+(eright+8)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BEGIN ::= DECLARE DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",dleft-1,dright,"Syntax Error: left curly brace '{' expected after reserved word 'DECLARE', is missing. Line: "+(dleft+1)+", column: "+(dright+8)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",cleft-1,cright,"Syntax Error: reserved word 'MAIN' expected after 'DECLARE block', is missing. Line: "+(cleft+1)+", column: "+(cright)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",fl,0,"Syntax Error: right curly brace '}' expected for closing 'MAIN block', is missing. Line: " + fl + "."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected after 'MAIN block'. Line: "+(eleft+1)+", column: "+(eright)+"."));

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BEGIN ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax error: malformed program structure. Line: "+(eleft+1)+", column: "+(eright)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BEGIN ::= error DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected before 'DECLARE block'. Line: "+(eleft+1)+", column: "+(eright)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BEGIN ::= error CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected value reserved word 'DECLARE' is missing. Line: "+(eleft+1)+", column: "+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BEGIN ::= DECLARE error CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected after reserved word 'DECLARE'. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BEGIN ::= DECLARE error DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly bracket expected '{' after reserved word 'DECLARE'. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY error MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected before 'MAIN block'. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY error CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected reserved word 'MAIN' is missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN error CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected after reserved word 'MAIN'. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN error MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left curly bracket expected '{' after reserved word 'MAIN' is missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARE_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARE_BODY ::= DEC SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARE_BODY ::= DEC DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: semicolon ';' at the end of the sentence is missing. Line: "+(eleft+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARE_BODY ::= DATA_TYPE ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		
    try{
    if(parser.esDAssig){
        boolean insert = FCompiler.ts.insertar(parser.tipoActual+"");
        if (!(i.toString().equalsIgnoreCase(parser.tipoActual))){
            if(parser.tipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error: identifier: "+"\""+parser.salidaTipoActual+"\" has "+parser.tipoActual+" type. Type expected: "+ i +"."+" Line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }else{
                        String error = "Semantic error: Found: "+"\""+parser.salidaTipoActual+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ i+". Line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }
                    
                }
        }else{  
            if(insert){
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","tipo",i);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "linea", parser.fil);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "columna", parser.col);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","valor",parser.valorActual+"");
                System.out.println("Valores "+parser.tipoActual+". Fila: "+parser.fil+". Columna: "+parser.col+". Valor: "+parser.valorActual);
            }else{
                String error = "Semantic error: identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+(iright)+".";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
            }
        }
    }
    parser.esDAssig = false;
 }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARE_BODY ::= DATA_TYPE ASSIG DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: semicolon ';' expected at the end of the sentence, is missing. Line: "+(eleft+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARE_BODY ::= ASSIG2 SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		
    if(parser.esDAssig){
        //String error = "Semantic error in line: "+(parser.fil)+", column: "+parser.col+". Identifier: "+"\""+parser.tipoActual+"\" not declared.";
        //parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
    } else{
        System.out.println("NO SE QUE HACES AQUI XD");
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARE_BODY ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  malformed 'declare body' structure. Line: "+(eleft+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARE_BODY ::= error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION expected before semicolon ';', is missing. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARE_BODY ::= DEC error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  semicolon ';' expected at the end of the sentence is missing. Line: "+(eleft+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARE_BODY ::= DATA_TYPE error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: assignment statement expected. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARE_BODY ::= DATA_TYPE ASSIG error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: semicolon ';' is missing. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARE_BODY ::= error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION expected before semicolon ';', is missing. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARE_BODY ::= ASSIG error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  semicolon ';' expected ath the end of the sentence is missing. Line: "+(eleft+1)+", column: "+(eright+1)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARE_BODY2 ::= DEC SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARE_BODY2 ::= DEC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON (';') Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARE_BODY2 ::= ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;
		
    if(parser.esDAssig){
        String error = "Semantic error: Identifier: "+"\""+parser.tipoActual+"\" not declared. Line: "+(parser.fil)+", column: "+parser.col+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARE_BODY2 ::= DATA_TYPE ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
    try{
    if(parser.esDAssig){
        boolean insert = FCompiler.ts.insertar(parser.tipoActual+"");
        if (!(i.toString().equalsIgnoreCase(parser.tipoActual))){
            if(parser.tipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error: Identifier: "+"\""+parser.salidaTipoActual+"\" has "+parser.tipoActual+" type. Type expected: "+ i +". Line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }else{
                        String error = "Semantic error: Found: "+"\""+parser.salidaTipoActual+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ i+". Line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }

                }
        }else{
            if(insert){
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","tipo",i);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "linea", parser.fil);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "columna", parser.col);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","valor",parser.valorActual+"");
                System.out.println("Valores "+parser.tipoActual+". Fila: "+parser.fil+". Columna: "+parser.col+". Valor: "+parser.valorActual);
            }else{
                String error = "Semantic error: Identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
            }
        }
    }
    parser.esDAssig = false;
  }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARE_BODY2 ::= error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARE_BODY2 ::= DEC error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARE_BODY2 ::= error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARE_BODY2 ::= ASSIG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARE_BODY2 ::= DATA_TYPE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Expected assignment statement. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARE_BODY2 ::= DATA_TYPE ASSIG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASSIG ::= ID ASSIG_OP EXP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 try{
    TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
        if(datoEncontrado != null ){
            if (!(datoEncontrado.tipo.equalsIgnoreCase(parser.tipoActual))){
                if(parser.salidaTipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error: Identifier: "+"\""+e+"\" has "+parser.tipoActual+" type. Type expected: "+ datoEncontrado.tipo+". Line: "+(ileft+1)+", column: "+iright+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
                    }else{
                        String error = "Semantic error: Found: "+"\""+e+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ datoEncontrado.tipo+". Line: "+(ileft+1)+", column: "+iright+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
                    }

                }
            }else{
                datoEncontrado.valor = e;
                System.out.println("Valor insertado es "+e);
            }

        }else{
            parser.valorActual = e;
            System.out.println("Valor insertado es "+e);
            parser.col = iright+"";
            parser.fil = (ileft+1)+"";
            if(parser.esId){
                parser.esDAssig = true;
            }

        }
  }catch(java.lang.NullPointerException ex){ }
  parser.tipoActual = null;
   parser.salidaTipoActual = null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASSIG ::= error ASSIG_OP EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Identifier expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASSIG ::= ID error EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ASSIG operator '=' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASSIG ::= ID ASSIG_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASSIG2 ::= ID ASSIG_OP EXP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 try{
    TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
        if(datoEncontrado != null ){
            if (!(datoEncontrado.tipo.equalsIgnoreCase(parser.tipoActual))){
                if(parser.salidaTipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error: Identifier: "+"\""+e+"\" has "+parser.tipoActual+" type. Type expected: "+ datoEncontrado.tipo+". Line: "+(ileft+1)+", column: "+iright+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
                    }else{
                        String error = "Semantic error: Found: "+"\""+e+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ datoEncontrado.tipo+". Line: "+(ileft+1)+", column: "+iright+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
                    }

                }
            }else{
                datoEncontrado.valor = e;
                System.out.println("Valor insertado es "+e);
            }

        }else{
            String error = "Semantic error: Identifier: "+"\""+i+"\" has not been declared. Line: "+(ileft+1)+", column: "+iright+".";
            parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
        }
  }catch(java.lang.NullPointerException ex){ }
    parser.tipoActual = null;
    parser.salidaTipoActual = null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG2",46, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASSIG2 ::= error ASSIG_OP EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Identifier expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG2",46, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASSIG2 ::= ID error EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ASSIG operator '=' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG2",46, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASSIG2 ::= ID ASSIG_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG2",46, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DATA_TYPE ::= STRING_WORD 
            {
              Object RESULT =null;
		 try{ parser.tipoActual="STRING"; RESULT = parser.tipoActual; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DATA_TYPE ::= INT_WORD 
            {
              Object RESULT =null;
		 parser.tipoActual="INT"; RESULT = parser.tipoActual; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DATA_TYPE ::= BOOLEAN_WORD 
            {
              Object RESULT =null;
		 parser.tipoActual="BOOLEAN"; RESULT = parser.tipoActual;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DATA_TYPE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Data type expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DEC ::= DATA_TYPE ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
    boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        FCompiler.ts.actualizar(i+"","tipo",d);
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
    }else{
        String duplicado = "Semantic error: Identifier: "+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEC ::= error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Data Type expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEC ::= DATA_TYPE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
  try{
        TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
        if(datoEncontrado != null){
            //SINTETIZAR TIPO

            parser.tipoActual = datoEncontrado.tipo;
            parser.salidaTipoActual = i;
            parser.esId = true;
            if(datoEncontrado.valor != null){
                RESULT = datoEncontrado.valor;
            }else{
                String error = "Semantic error: Identifier:"+"\""+i+"\" not initialized. Line: "+(ileft+1)+", column: "+iright+".";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
            }
        }else{
            String error = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
            parser.esId = true;
            parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
        }
   }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
        //SINTETIZAR TIPO
        parser.tipoActual = "INT";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;
       }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= TRUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
        //SINTETIZAR TIPO
        parser.tipoActual = "BOOLEAN";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;
        }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= FALSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
        //SINTETIZAR TIPO
        parser.tipoActual = "BOOLEAN";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;
        }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
        //SINTETIZAR TIPO
        parser.tipoActual = "STRING";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;
        }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
        //SINTETIZAR TIPO
        parser.tipoActual = "INT";
        parser.salidaTipoActual = e1+"";
        parser.esId = false;
        RESULT = (int) e1;
      }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= PARENTH1 EXP PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
    try{
        //SINTETIZAR TIPO
        RESULT = i;
       }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= COND 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        try{
        //SINTETIZAR TIPO
        parser.tipoActual = "BOOLEAN";
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;
        }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  malformed expression structure. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STRINGVAL ::= STRINGVALAUX 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
    if(s1!=null){
        RESULT=s1.toString();
    }
    }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STRINGVAL ::= STRINGVALAUX ADD_OP STRINGVAL 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
    if(s1!=null && s2 !=null){
        RESULT=s1.toString()+s2.toString();
    }
    }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STRINGVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  VALUE Missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // STRINGVAL ::= STRINGVALAUX error STRINGVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SUM operator '+' Missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STRINGVALAUX ::= STRING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
String sincomillas= f.replace('"',' ');
sincomillas=sincomillas.replaceAll(" ","");
RESULT=sincomillas;
parser.valorActual= f;
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STRINGVALAUX ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
 boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("String")){
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS PARA YA PODER MANDARSELO SINTENTIZADAMENTE*/
          if(identificador.valor != null){
              parser.valorActual=identificador.valor.toString();
               parser.valorActual=identificador.valor;
               RESULT=identificador.valor;
               /*PENDIENTE PARA QUE QUEDE BIEN CUANDO SE LE AGREGA EL VALOR*/
           }else{
              String valorNulo = "Semantic error: Identifier: "+"\""+i+"\" not initialized. Line: "+(ileft+1)+", column: "+iright+".";
              parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,valorNulo));
            }
        }else{
        String TipoError = "Semantic error. Identifier: "+"\""+i+"\" is not STRING type. Expected: STRING type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STRINGVALAUX ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRING value Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BOOLEANVAL ::= TRUE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		try{ RESULT=f; parser.valorActual=f; }catch(java.lang.NullPointerException ex){ } 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BOOLEANVAL ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		try { RESULT=f; parser.valorActual=f; }catch(java.lang.NullPointerException ex){ } 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BOOLEANVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
 boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Boolean")){
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          if(identificador.valor != null){
              parser.valorActual=identificador.valor.toString();
               parser.valorActual=identificador.valor;
               RESULT=identificador.valor;
           }else{
              String valorNulo = "Semantic error: The value of the identifier: "+"\""+i+"\" is not initialized. Line: "+(ileft+1)+", column: "+iright+".";
              parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,valorNulo));
            }
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not Boolean type. Expected: BOOLEAN type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BOOLEANVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Boolean datatype expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_ARIT ::= ADD_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		try {RESULT="ADD_OP"; }catch(java.lang.NullPointerException ex){ } 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_ARIT ::= SUBS_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		 try{ RESULT="SUBS_OP"; }catch(java.lang.NullPointerException ex){ } 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_LOG ::= AND_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		 try{ RESULT="AND_OP"; }catch(java.lang.NullPointerException ex){ } 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_LOG ::= OR_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		 try{ RESULT="OR_OP"; }catch(java.lang.NullPointerException ex){ } 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_REL ::= EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
    RESULT = "EQUAL_OP";
    }catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_REL ::= GREATER_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
    RESULT = "GREATER_EQUAL_OP";
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_REL ::= LESS_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
    RESULT = "LESS_EQUAL_OP";
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_REL ::= NOT_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
    RESULT = "NOT_EQUAL_OP";
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_REL ::= LESS_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
    RESULT = "LESS_OP";
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_REL ::= GREATER_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
    RESULT = "GREATER_OP";
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COND ::= F OP_LOG COND 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
    if(o.toString().equalsIgnoreCase("AND_OP")){
        if(e1.toString().equalsIgnoreCase("TRUE")){
            if(e2.toString().equalsIgnoreCase("TRUE")){
                RESULT = "TRUE";
            }else if(e2.toString().equalsIgnoreCase("FALSE")){
                RESULT = "FALSE";
            } else{
                parser.ManejadorDeErrores.add(new Error1("ES",e1left-1,e1right,"Syntax Error: Boolean value expected. Line: "+(e1left+1)+", column: "+e1right+"."));
            }
        } else if(e1.toString().equalsIgnoreCase("FALSE")){
            RESULT = "FALSE";
        }
    }else if (o.toString().equalsIgnoreCase("OR_OP")){
        if(e1.toString().equalsIgnoreCase("TRUE") || e2.toString().equalsIgnoreCase("TRUE")){
                RESULT = "TRUE";
        } else {
            RESULT = "FALSE";
        }
    }else{
        parser.ManejadorDeErrores.add(new Error1("ES",oleft-1,oright,"Syntax Error: Logical operator expected. Line: "+(oleft+1)+", column: "+oright+"."));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COND ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		 try { RESULT=f; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= F error COND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Logical operator expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // F ::= BOOLEANVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		 try{ RESULT = i;}catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("F",48, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // F ::= EXPNUM OP_REL EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 try{
    if(o.equals("EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) == Integer.parseInt(e2.toString());
        System.out.println("Primera expresion "+e1+". Segunda expresion "+e2+". Result "+ RESULT);
    }else if(o.equals("GREATER_OP")){
        RESULT = Integer.parseInt(e1.toString()) > Integer.parseInt(e2.toString());
    }else if(o.equals("LESS_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) <= Integer.parseInt(e2.toString());
    }else if(o.equals("NOT_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) != Integer.parseInt(e2.toString());
    }else if(o.equals("LESS_OP")){
        RESULT = Integer.parseInt(e1.toString()) < Integer.parseInt(e2.toString());
    }else if(o.equals("GEATER_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) >= Integer.parseInt(e2.toString());
    }
}catch(java.lang.NullPointerException ex){ }
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("F",48, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // F ::= PARENTH1 COND PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		 try{RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("F",48, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F ::= EXPNUM error EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Relational operator expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("F",48, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPNUM ::= T 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
        RESULT = (int) i;
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPNUM ::= EXPNUM SUBS_OP T 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
        RESULT = (int) e1 - (int) e2;
        System.out.print("exp1 "+e1 +"- exp2 " + e2 + " = " + RESULT); 
}catch(java.lang.NullPointerException ex){ } 
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPNUM ::= EXPNUM ADD_OP T 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
        RESULT = (int) e1+ (int) e2;
}catch(java.lang.NullPointerException ex){ }
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPNUM ::= error ADD_OP T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+".")); 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPNUM ::= EXPNUM error T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Addition/Substraction operator expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPNUM ::= EXPNUM ADD_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPNUM ::= error SUBS_OP T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPNUM ::= EXPNUM SUBS_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPNUM ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // T ::= INTVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
        RESULT = (int) i;
}catch(java.lang.NullPointerException ex){ }
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("T",47, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // T ::= PARENTH1 EXPNUM PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
try{
        RESULT = (int) i;
}catch(java.lang.NullPointerException ex){ }
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("T",47, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INTVAL ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        try{
        parser.tipoActual = "INT";    
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INTVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    try{
    TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
    if(datoEncontrado != null){
        if(datoEncontrado.tipo.equalsIgnoreCase("INT")){
            //SINTETIZAR TIPO
            parser.tipoActual = datoEncontrado.tipo;
            parser.salidaTipoActual = i;
            parser.esId = true;
            if(datoEncontrado.valor != null){
                RESULT = datoEncontrado.valor;
            }else{
                String error = "Semantic error: Identifier: "+"\""+i+"\" not initialized. Line: "+(ileft+1)+", column: "+iright+".";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
            }
        }else{
            String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not an INT type. Expected: INT type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
            parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String error = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INTVAL ::= FUNCT 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
    RESULT=g;
}catch(java.lang.NullPointerException ex){ }
 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DATA_STR ::= NODE_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DATA_STR ::= ARRAYSTRING_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DATA_STR ::= FEATURES_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DATA_STR ::= GROUP_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DATA_STR ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft+1,eright,"Syntax Error: Invalid sentence. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
try{
  boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        FCompiler.ts.actualizar(i+"","tipo","NODE");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
       
         
/*COMPROBANDO QUE EL SEGUNDO ID:f sea de tipo FEATURES*/
        boolean search = FCompiler.ts.buscarLex(f+"");
        if(search){
        String Tipo=FCompiler.ts.RegresarTipo(f+"");
        if(Tipo.equalsIgnoreCase("FEATURES")){


         /*AQUI IRIA LA ASIGNACION DEL VALOR DE FEATURES Y LOS STRING VAL*/
          FCompiler.ts.actualizar(i+"","nombre",j);
        FCompiler.ts.actualizar(i+"", "trabajo", k);
        FCompiler.ts.actualizar(i+"", "setfeatures", f);
           
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+f+"\" is not type FEATURES. Expected: FEATURES type identifier/value. Line: "+(fleft+1)+", column: "+fright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+f+"\" not declared. Line: "+(fleft+1)+", column: "+fright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,NoExiste));
    }


    }else{
        String duplicado = "Semantic error: Identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }


}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NODE_STR ::= ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: NODE word expected before identifier. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NODE_STR ::= error ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'NODE' word expected  before identifier. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NODE_STR ::= NODE error ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Identifier expected  before assignment. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NODE_STR ::= NODE ID error NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Assignment operator '=' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NODE_STR ::= NODE ID ASSIG_OP error NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'NEW' word expected after assignment operator. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NODE_STR ::= NODE ID ASSIG_OP NEW error PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'NODE' word expected after 'NEW' word. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE error ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left Parenthesis '(' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 error COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ID expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID error STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMMA_SIGN ',' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN error COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRINGVAL expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL error STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMMA_SIGN ',' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Right Parenthesis ')' expected .Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SEMICOLON ';' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
try{
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        FCompiler.ts.actualizar(i+"","tipo","ARRAYSTRING");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
         FCompiler.ts.actualizar(i+"","valor",j);
         RESULT=i;

    }else{
        String duplicado = "Semantic error: Identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Braket ']' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ARRAYSTRING_STR ::= ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ARRAYSTRING word expected before identifier. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ARRAYSTRING_STR ::= ARRAYSTRING error ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ARRAYSTRING_STR ::= ARRAYSTRING ID error NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: ASSIG '=' missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP error BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: 'NEW' word expected after assignment operator. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW error ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Braket '[' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 error BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: String value/identifier expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Braket ']'  missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARRAYVAL ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
 RESULT=i;
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARRAYVAL ::= STRINGVAL COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
RESULT= i+","+j;
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ARRAYVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ARRAYVAL ::= error COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ARRAYVAL ::= STRINGVAL error ARRAYVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMMA SING ',' expected . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARRAYVAL ::= STRINGVAL COMMA_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
try{
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        FCompiler.ts.actualizar(i+"","tipo","FEATURES");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
        /*voy a introducir el valor del features val*/
        String valores[]=e.toString().split(",");
        if(valores.length==21){
         
            FCompiler.ts.actualizar(i+"","Affability",valores[0]);
            FCompiler.ts.actualizar(i+"","Reasoning",valores[1]);
            FCompiler.ts.actualizar(i+"","Stability",valores[2]);
            FCompiler.ts.actualizar(i+"","Dominance",valores[3]);
            FCompiler.ts.actualizar(i+"","Liveliness",valores[4]);
            FCompiler.ts.actualizar(i+"","CareToStandards",valores[5]);
            FCompiler.ts.actualizar(i+"","Dare",valores[6]);
            FCompiler.ts.actualizar(i+"","Sensitivity",valores[7]);
            FCompiler.ts.actualizar(i+"","Surveillance",valores[8]);
            FCompiler.ts.actualizar(i+"","Abstraction",valores[9]);
            FCompiler.ts.actualizar(i+"","Privacy",valores[10]);
            FCompiler.ts.actualizar(i+"","apprehension",valores[11]);
            FCompiler.ts.actualizar(i+"","OpennessToChange",valores[12]);
            FCompiler.ts.actualizar(i+"","SelfSufficiency",valores[13]);
            FCompiler.ts.actualizar(i+"","Perfectionism",valores[14]);
            FCompiler.ts.actualizar(i+"","Tension",valores[15]);
            FCompiler.ts.actualizar(i+"","Sociability",valores[16]);
            FCompiler.ts.actualizar(i+"","Anxiety",valores[17]);
            FCompiler.ts.actualizar(i+"","Hardness",valores[18]);
            FCompiler.ts.actualizar(i+"","Independence",valores[19]);
            FCompiler.ts.actualizar(i+"","SelfControl",valores[20]);
        
        }
    }else{
        String duplicado = "Semantic error: Identifier:"+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FEATURES_STR ::= ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: FEATURES word expected before identifier. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FEATURES_STR ::= FEATURES error ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ID expected after 'FEATURES' word. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FEATURES_STR ::= FEATURES ID error NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Assignment operator ('=') Missing. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FEATURES_STR ::= FEATURES ID ASSIG_OP error FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'NEW' word expected after assignment operator. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW error PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'FEATURES' word expected after identifier. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES error FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left Parenthesis '(' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  FeaturesVal type expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Right Parenthesis ')' expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SEMICOLON(';') missing . Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).value;
		int e11left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).right;
		Object e11 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).value;
		int e12left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).right;
		Object e12 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).value;
		int e13left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).left;
		int e13right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).right;
		Object e13 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).value;
		int e14left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).left;
		int e14right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).right;
		Object e14 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		int e16left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int e16right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e16 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		int e17left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int e17right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e17 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		int e18left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int e18right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e18 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int e19left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int e19right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e19 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int e20left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e20right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e20 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int e21left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e21right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e21 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
RESULT=e1+","+e2+","+e3+","+e4+","+e5+","+e6+","+e7+","+e8+","+e9+","+e10+","+e11+","+e12+","+e13+","+e14+","+e15+","+e16+","+e17+","+e18+","+e19+","+e20+","+e21;
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FEATURESVAL ::= error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FEATURESVAL ::= EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FEATURESVAL ::= EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING ',' expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // MAIN_BODY ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // MAIN_BODY ::= SENTEN MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // BODY ::= SENTEN BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // BODY ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right curly brace '}' expected for closing IF/ELSE body, is missing. Line: "+(eleft+1)+", column: "+eright));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCES ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTENCES",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCES ::= SENTEN SENTENCES 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTENCES",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTEN ::= INPUT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTEN ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTEN ::= DATA_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTEN ::= DECLARE_BODY2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTEN ::= CTRL_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTEN ::= FUNCT SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft+1,eright,"Syntax Error: Function returns a value that needs to be assigned. Line: "+(eleft+1)+", column: "+eright+".")); 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
try{
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        FCompiler.ts.actualizar(i+"","tipo","GROUP");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
        /*COMPROBAR QUE EL PRIMER ID SEA FEATURES Y EL SEGUNDO ARRAYSTRING*/
        
        /*COMPROBANDO QUE EL SEGUNDO ID:f sea de tipo FEATURES*/
        boolean search = FCompiler.ts.buscarLex(f+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(f+"");
        if(Tipo.equalsIgnoreCase("FEATURES")){
          //TSDatos identificador=FCompiler.ts.buscar(f+"");
          /*COMPROBANDO QUE EL SEGUNDO ID:c sea de tipo ARRAYSTRING*/
        boolean search2 = FCompiler.ts.buscarLex(c+"");
    if(search2){
        String Tipo2=FCompiler.ts.RegresarTipo(c+"");
        if(Tipo2.equalsIgnoreCase("ARRAYSTRING")){
          //TSDatos identificador=FCompiler.ts.buscar(c+"");


                   /*AQUI YA LE VAMOS AGREGAR LOS VALORES A GROUP*/

                   /*Â¿que ocupo? - un metodo que me de el atributo features. , un atributo que guarde max o min, valor*/
                    FCompiler.ts.actualizar(i+"", "valor", c);
                    FCompiler.ts.actualizar(i+"", "maxomin", j);
                    FCompiler.ts.actualizar(i+"", "setfeatures", f);



          
        }else{
        String TipoError = "Semantic error: Identifier:"+"\""+c+"\" is not ArrayString type. Line:  "+(cleft+1)+", column: "+cright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,TipoError));
        }
        }else{
        String NoExiste = "Semantic error: Identifier:"+"\""+c+"\" has not been declared. Line: "+(cleft+1)+", column: "+cright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,NoExiste));
         }
          
        }else{
        String TipoError = "Semantic error: Identifier:"+"\""+f+"\" is not Features type. Line: "+(fleft+1)+", column: "+fright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error:  Identifier:"+"\""+f+"\" is not ArrayString type. Line: "+(fleft+1)+", column: "+fright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,NoExiste));
    }
    
    /*COMPROBANDO QUE EL SEGUNDO ID:c sea de tipo ARRAYSTRING*/
        boolean search2 = FCompiler.ts.buscarLex(c+"");
    if(search2){
        String Tipo2=FCompiler.ts.RegresarTipo(c+"");
        if(Tipo2.equalsIgnoreCase("ARRAYSTRING")){
          //TSDatos identificador=FCompiler.ts.buscar(c+"");
          
          
        }else{
        String TipoError = "Semantic error:  Identifier:"+"\""+c+"\" is not type ArrayString. Line: "+(cleft+1)+", column: "+cright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+c+"\" not declared. Line: "+(cleft+1)+", column: "+cright +".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,NoExiste));
    }

    }else{
        
        
        String duplicado = "Semantic error: Identifier: "+"\""+i+"\" is duplicated. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // GROUP_STR ::= ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: GROUP word expected before identifier. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // GROUP_STR ::= GROUP error ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // GROUP_STR ::= GROUP ID error NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ASSIG('=') missing . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // GROUP_STR ::= GROUP ID ASSIG_OP error GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'NEW' expected before missing . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // GROUP_STR ::= GROUP ID ASSIG_OP NEW error PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'GROUP' expected before missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP error ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 error COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID error MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMA SING ',' expected missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN error COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: sentence 'MAX' or 'MIN' expected . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMA SING ',' expected missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')' . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // MAXMIN ::= MAX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
RESULT=i;
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // MAXMIN ::= MIN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
RESULT=i;
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INPUT ::= READFEAT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INPUT ::= READS 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // READFEAT ::= READFEATVAL PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
try{
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Int")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS, pero creo que falta para poderle meter datos con esta funcion.*/
          
        }else{
       String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type INT. Expected: INT type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // READFEAT ::= READFEATVAL error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // READFEAT ::= READFEATVAL PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // READFEAT ::= READFEATVAL PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // READFEAT ::= READFEATVAL PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // READS ::= READSTRING PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
try{
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("String")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS, pero creo que falta para poderle meter datos con esta funcion.*/
          
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type STRING. Expected: STRING type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // READS ::= READSTRING error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // READS ::= READSTRING PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // READS ::= READSTRING PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // READS ::= READSTRING PARENTH1 ID PARENTH2 error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' Missing . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // OUTPUT ::= PLN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // OUTPUT ::= GNGROUP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // OUTPUT ::= PGPH 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // PLN ::= PRINTLN error STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // PLN ::= PRINTLN PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRINGVAL type expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // PLN ::= PRINTLN PARENTH1 STRINGVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
try{
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Group")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
          
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type GROUP. Expected: GROUP type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // GNGROUP ::= GENERATEGROUP error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // GNGROUP ::= GENERATEGROUP PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // GNGROUP ::= GENERATEGROUP PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' Missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
try{
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Group")){

        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type GROUP. Expected: GROUP type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
         String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // PGPH ::= PRINTGRAPH error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // PGPH ::= PRINTGRAPH PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // PGPH ::= PRINTGRAPH PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON ';' is missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FUNCT ::= GSIMILITUDE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		 try{ RESULT=i; }catch(java.lang.NullPointerException ex){ } 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FUNCT ::= GFEATURES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		 try{ RESULT=i; }catch(java.lang.NullPointerException ex){ } 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
try{
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Node")){
        boolean search2 = FCompiler.ts.buscarLex(j+"");
        if(search2){
        String Tipo2=FCompiler.ts.RegresarTipo(j+"");
        if(Tipo2.equalsIgnoreCase("Node")){
          //TSDatos identificador=FCompiler.ts.buscar(j+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
            int SumaFeaturesNodo1=FCompiler.ts.regresarSumaFeatures(i+"");
            int SumaFeaturesNodo2=FCompiler.ts.regresarSumaFeatures(j+"");
             System.out.println("Esto ES GETSIMILITUDE: "+(SumaFeaturesNodo1 - SumaFeaturesNodo2));
            RESULT = SumaFeaturesNodo1 - SumaFeaturesNodo2 ;
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+j+"\" is not type NODE. Expected: NODE type identifier/value. Line: "+(jleft+1)+", column: "+jright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(jleft+1),jright,TipoError));
        }
        }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+j+"\" not declared. Line: "+(jleft+1)+", column: "+jright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(jleft+1),jright,NoExiste));
    }
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type NODE. Expected: NODE type identifier/value. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
       String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // GSIMILITUDE ::= GETSIMILITUDE error ID COMMA_SIGN ID PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 error COMMA_SIGN ID PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID error ID PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMMA_SIGN ',' missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
try{
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Node")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
            int valor= FCompiler.ts.RegresarValorFeatures(i+"",j+"");
            RESULT=valor;
        }else{
        String TipoError = "Semantic error: Identifier: "+"\""+i+"\" is not type NODE. Expected: NODE type identifier/value. Line: "+(ileft+1)+", columnn: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error: Identifier: "+"\""+i+"\" not declared. Line: "+(ileft+1)+", column: "+iright+".";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
}catch(java.lang.NullPointerException ex){ }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // GFEATURES ::= GETFEATURES PARENTH1 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'ID.FEATUREWORD)' expected. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // GFEATURES ::= GETFEATURES error ID POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // GFEATURES ::= GETFEATURES PARENTH1 error POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before '.' . Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // GFEATURES ::= GETFEATURES PARENTH1 ID error FEATURE_WORD 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  dot '.' expected after identifier "+c+", is missing. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: FEATURE WORD expected. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // GFEATURES ::= GETFEATURES PARENTH1 PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'ID.FEATUREWORD' expected. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // GFEATURES ::= GETFEATURES PARENTH1 error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: 'ID.FEATUREWORD' expected. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // FEATURE_WORD ::= ABSTRACTION PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		 try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // FEATURE_WORD ::= AFFABILITY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // FEATURE_WORD ::= APPREHESION PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // FEATURE_WORD ::= ANXIETY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FEATURE_WORD ::= CARETOSTANDARDS PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FEATURE_WORD ::= DARE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FEATURE_WORD ::= DOMINANCE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FEATURE_WORD ::= HARDNESS PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // FEATURE_WORD ::= INDEPENDENCE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // FEATURE_WORD ::= LIVELINESS PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FEATURE_WORD ::= OPENNESSTOCHANGE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FEATURE_WORD ::= PERFECTIONISM PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // FEATURE_WORD ::= PRIVACY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // FEATURE_WORD ::= REASONING PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // FEATURE_WORD ::= SELFCONTROL PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // FEATURE_WORD ::= SELFSUFFICIENCY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // FEATURE_WORD ::= SENSITIVITY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // FEATURE_WORD ::= SOCIABILITY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // FEATURE_WORD ::= STABILITY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // FEATURE_WORD ::= STRESS PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // FEATURE_WORD ::= SURVEILLANCE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		try { RESULT=i; }catch(java.lang.NullPointerException ex){ }
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // FEATURE_WORD ::= ABSTRACTION error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // FEATURE_WORD ::= AFFABILITY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // FEATURE_WORD ::= APPREHESION error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // FEATURE_WORD ::= ANXIETY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // FEATURE_WORD ::= CARETOSTANDARDS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Asintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action_part00000001(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Asintactico$result;

      /* select the action based on the action number */
      switch (CUP$Asintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // FEATURE_WORD ::= DARE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // FEATURE_WORD ::= DOMINANCE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // FEATURE_WORD ::= HARDNESS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // FEATURE_WORD ::= APPREHESION error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // FEATURE_WORD ::= INDEPENDENCE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // FEATURE_WORD ::= LIVELINESS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // FEATURE_WORD ::= OPENNESSTOCHANGE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // FEATURE_WORD ::= PERFECTIONISM error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // FEATURE_WORD ::= PRIVACY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // FEATURE_WORD ::= REASONING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // FEATURE_WORD ::= SELFCONTROL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // FEATURE_WORD ::= SELFSUFFICIENCY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // FEATURE_WORD ::= SENSITIVITY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // FEATURE_WORD ::= SOCIABILITY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // FEATURE_WORD ::= STABILITY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // FEATURE_WORD ::= STRESS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // FEATURE_WORD ::= SURVEILLANCE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // FEATURE_WORD ::= error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: FEATURE WORD expected. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // CTRL_STR ::= LOOP_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // CTRL_STR ::= IF_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY ELSE CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // IF_STR ::= IF error COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // IF_STR ::= IF error PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // IF_STR ::= IF PARENTH1 COND CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Rigth parenthesis expected ')'. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // IF_STR ::= IF PARENTH1 COND PARENTH2 error BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left curly brace '{' expected after condition clause. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Else malformed. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY ELSE BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left curly brace '{' expected after condition clause. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Else malformed. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // LOOP_STR ::= LOOP PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // LOOP_STR ::= LOOP error COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // LOOP_STR ::= LOOP PARENTH1 COND error CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'.  Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // LOOP_STR ::= LOOP PARENTH1 COND PARENTH2 error BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left curly brace '{' expected after condition clause. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // LOOP_STR ::= LOOP PARENTH1 COND BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected ')'.  Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // LOOP_STR ::= LOOP COND PARENTH2 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected '('. Line: "+(eleft+1)+", column: "+(eright+2)+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Asintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Asintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Asintactico$do_action_part00000000(
                               CUP$Asintactico$act_num,
                               CUP$Asintactico$parser,
                               CUP$Asintactico$stack,
                               CUP$Asintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Asintactico$do_action_part00000001(
                               CUP$Asintactico$act_num,
                               CUP$Asintactico$parser,
                               CUP$Asintactico$stack,
                               CUP$Asintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
