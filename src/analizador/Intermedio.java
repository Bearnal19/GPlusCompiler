
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Intermedio extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Intermedio() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Intermedio(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Intermedio(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\011\000\002\003" +
    "\003\000\002\003\005\000\002\003\006\000\002\003\005" +
    "\000\002\052\004\000\002\052\004\000\002\052\005\000" +
    "\002\006\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\010\003\000\002\011\003\000" +
    "\002\011\005\000\002\047\003\000\002\047\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\055" +
    "\003\000\002\055\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\003\000\002\054\003\000\002\050\003\000" +
    "\002\050\003\000\002\007\004\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\024" +
    "\017\000\002\020\017\000\002\021\012\000\002\026\003" +
    "\000\002\026\005\000\002\022\013\000\002\027\053\000" +
    "\002\004\003\000\002\004\004\000\002\017\003\000\002" +
    "\017\004\000\002\032\003\000\002\032\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\025\003\000" +
    "\002\025\003\000\002\033\003\000\002\033\003\000\002" +
    "\037\007\000\002\040\007\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\041\007\000\002\042\007" +
    "\000\002\043\007\000\002\035\003\000\002\035\003\000" +
    "\002\044\011\000\002\045\007\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\023\003\000\002\023\003\000\002\030\010\000" +
    "\002\030\013\000\002\036\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\006\013\027\020\030\015\031\012\107\016\001" +
    "\002\000\004\007\u0135\001\002\000\004\010\106\001\002" +
    "\000\004\107\ufff5\001\002\000\004\010\uffff\001\002\000" +
    "\004\107\102\001\002\000\004\107\ufff6\001\002\000\004" +
    "\011\023\001\002\000\004\007\021\001\002\000\004\107" +
    "\ufff7\001\002\000\014\006\013\027\020\030\015\031\012" +
    "\107\016\001\002\000\004\010\ufffe\001\002\000\016\012" +
    "\036\047\027\050\035\107\037\110\031\111\024\001\002" +
    "\000\026\007\ufff3\013\ufff3\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\001\002\000\012" +
    "\007\uffd8\013\uffd8\015\uffd8\016\uffd8\001\002\000\006\007" +
    "\ufff0\013\ufff0\001\002\000\012\007\ufff2\013\ufff2\015\uffe8" +
    "\016\uffe8\001\002\000\030\007\uffd4\013\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\076\026\077" +
    "\034\uffd4\001\002\000\014\007\uffea\013\uffea\025\uffea\034" +
    "\uffea\042\uffea\001\002\000\022\007\uffef\013\uffef\017\057" +
    "\020\060\021\064\022\063\023\061\024\065\001\002\000" +
    "\030\007\uffd3\013\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\034\uffd3\001\002\000" +
    "\004\007\uffed\001\002\000\012\007\ufff1\013\ufff1\015\uffe7" +
    "\016\uffe7\001\002\000\016\012\036\047\027\050\035\107" +
    "\037\110\031\111\024\001\002\000\032\007\ufff4\013\ufff4" +
    "\015\uffe6\016\uffe6\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffe9\026\uffd1\001\002\000\014\007\uffec" +
    "\013\uffec\025\070\034\uffec\042\uffec\001\002\000\004\007" +
    "\ufff8\001\002\000\012\007\uffd9\013\uffd9\015\044\016\043" +
    "\001\002\000\014\012\uffe2\047\uffe2\050\uffe2\107\uffe2\111" +
    "\uffe2\001\002\000\014\012\uffe3\047\uffe3\050\uffe3\107\uffe3" +
    "\111\uffe3\001\002\000\014\012\053\047\047\050\051\107" +
    "\054\111\046\001\002\000\030\007\uffd2\013\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\034\uffd2\001\002\000\012\007\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\001\002\000\016\017\057\020\060\021\064\022" +
    "\063\023\061\024\065\001\002\000\012\007\uffe7\013\uffe7" +
    "\015\uffe7\016\uffe7\001\002\000\006\007\uffdb\013\uffdb\001" +
    "\002\000\014\012\053\047\047\050\051\107\054\111\046" +
    "\001\002\000\032\007\uffe6\013\uffe6\015\uffe6\016\uffe6\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\001\002\000\004\013\056\001\002\000\012\007" +
    "\uffd7\013\uffd7\015\uffd7\016\uffd7\001\002\000\006\107\uffe1" +
    "\111\uffe1\001\002\000\006\107\uffe0\111\uffe0\001\002\000" +
    "\006\107\uffdd\111\uffdd\001\002\000\006\107\066\111\046" +
    "\001\002\000\006\107\uffde\111\uffde\001\002\000\006\107" +
    "\uffdf\111\uffdf\001\002\000\006\107\uffdc\111\uffdc\001\002" +
    "\000\030\007\uffd1\013\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\034\uffd1\001\002" +
    "\000\006\007\uffda\013\uffda\001\002\000\006\107\071\110" +
    "\031\001\002\000\014\007\uffe9\013\uffe9\025\uffe9\034\uffe9" +
    "\042\uffe9\001\002\000\012\007\uffeb\013\uffeb\034\uffeb\042" +
    "\uffeb\001\002\000\004\013\056\001\002\000\004\013\075" +
    "\001\002\000\006\007\uffee\013\uffee\001\002\000\006\107" +
    "\066\111\046\001\002\000\006\107\066\111\046\001\002" +
    "\000\024\007\uffd6\013\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\034\uffd6\001\002\000\024\007\uffd5" +
    "\013\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\034\uffd5\001\002\000\006\007\uffd0\011\023\001\002" +
    "\000\004\007\104\001\002\000\014\006\013\027\020\030" +
    "\015\031\012\107\016\001\002\000\004\010\ufffd\001\002" +
    "\000\004\005\107\001\002\000\044\027\020\030\015\031" +
    "\012\032\133\037\152\040\125\043\131\045\130\046\143" +
    "\051\137\052\144\053\142\054\115\055\127\077\135\100" +
    "\124\107\016\001\002\000\046\006\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\037\uffb9\040\uffb9\043\uffb9\045\uffb9\046" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\077\uffb9" +
    "\100\uffb9\107\uffb9\001\002\000\004\007\u0134\001\002\000" +
    "\046\006\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\037\uffbd" +
    "\040\uffbd\043\uffbd\045\uffbd\046\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\077\uffbd\100\uffbd\107\uffbd\001\002" +
    "\000\046\006\uffba\027\uffba\030\uffba\031\uffba\032\uffba\037" +
    "\uffba\040\uffba\043\uffba\045\uffba\046\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\077\uffba\100\uffba\107\uffba\001" +
    "\002\000\046\006\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\037\uffb2\040\uffb2\043\uffb2\045\uffb2\046\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\077\uffb2\100\uffb2\107\uffb2" +
    "\001\002\000\004\012\u012e\001\002\000\046\006\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\037\uff93\040\uff93\043\uff93" +
    "\045\uff93\046\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055" +
    "\uff93\077\uff93\100\uff93\107\uff93\001\002\000\046\006\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\037\uffbe\040\uffbe\043" +
    "\uffbe\045\uffbe\046\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\077\uffbe\100\uffbe\107\uffbe\001\002\000\004\006" +
    "\u012d\001\002\000\046\006\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\037\uffb6\040\uffb6\043\uffb6\045\uffb6\046\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\077\uffb6\100\uffb6" +
    "\107\uffb6\001\002\000\046\006\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\037\uffbb\040\uffbb\043\uffbb\045\uffbb\046\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\077\uffbb\100" +
    "\uffbb\107\uffbb\001\002\000\004\107\102\001\002\000\004" +
    "\012\u0127\001\002\000\004\107\366\001\002\000\046\006" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\037\uffb5\040\uffb5" +
    "\043\uffb5\045\uffb5\046\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\077\uffb5\100\uffb5\107\uffb5\001\002\000\004" +
    "\012\263\001\002\000\004\012\256\001\002\000\004\012" +
    "\243\001\002\000\046\006\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\037\uffab\040\uffab\043\uffab\045\uffab\046\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\077\uffab\100\uffab" +
    "\107\uffab\001\002\000\004\107\225\001\002\000\046\006" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\037\uffce\040\uffce" +
    "\043\uffce\045\uffce\046\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\077\uffce\100\uffce\107\uffce\001\002\000\004" +
    "\107\213\001\002\000\046\006\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\037\uffac\040\uffac\043\uffac\045\uffac\046\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\077\uffac\100" +
    "\uffac\107\uffac\001\002\000\004\012\207\001\002\000\046" +
    "\006\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\037\uffcf\040" +
    "\uffcf\043\uffcf\045\uffcf\046\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\077\uffcf\100\uffcf\107\uffcf\001\002\000" +
    "\046\006\uff92\027\uff92\030\uff92\031\uff92\032\uff92\037\uff92" +
    "\040\uff92\043\uff92\045\uff92\046\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\077\uff92\100\uff92\107\uff92\001\002" +
    "\000\004\012\203\001\002\000\004\012\177\001\002\000" +
    "\004\012\173\001\002\000\046\006\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\037\uffb0\040\uffb0\043\uffb0\045\uffb0\046" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\077\uffb0" +
    "\100\uffb0\107\uffb0\001\002\000\004\007\172\001\002\000" +
    "\046\006\uffc4\027\020\030\015\031\012\032\133\037\152" +
    "\040\125\043\131\045\130\046\143\051\137\052\144\053" +
    "\142\054\115\055\127\077\135\100\124\107\016\001\002" +
    "\000\046\006\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\037" +
    "\uffb1\040\uffb1\043\uffb1\045\uffb1\046\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\077\uffb1\100\uffb1\107\uffb1\001" +
    "\002\000\046\006\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\037\uffcc\040\uffcc\043\uffcc\045\uffcc\046\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\077\uffcc\100\uffcc\107\uffcc" +
    "\001\002\000\004\107\155\001\002\000\046\006\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\037\uffbc\040\uffbc\043\uffbc" +
    "\045\uffbc\046\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\077\uffbc\100\uffbc\107\uffbc\001\002\000\046\006\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\037\uffcd\040\uffcd\043" +
    "\uffcd\045\uffcd\046\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\077\uffcd\100\uffcd\107\uffcd\001\002\000\004\011" +
    "\156\001\002\000\004\033\157\001\002\000\004\037\160" +
    "\001\002\000\004\012\161\001\002\000\004\107\162\001" +
    "\002\000\004\034\163\001\002\000\006\107\071\110\031" +
    "\001\002\000\004\034\165\001\002\000\006\107\071\110" +
    "\031\001\002\000\004\013\167\001\002\000\004\007\170" +
    "\001\002\000\046\006\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\037\uffca\040\uffca\043\uffca\045\uffca\046\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\055\uffca\077\uffca\100\uffca\107" +
    "\uffca\001\002\000\004\006\uffc3\001\002\000\046\006\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\037\ufffb\040\ufffb\043" +
    "\ufffb\045\ufffb\046\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\077\ufffb\100\ufffb\107\ufffb\001\002\000\004\107" +
    "\174\001\002\000\004\013\175\001\002\000\004\007\176" +
    "\001\002\000\046\006\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\037\uffae\040\uffae\043\uffae\045\uffae\046\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\077\uffae\100\uffae\107" +
    "\uffae\001\002\000\004\107\200\001\002\000\004\013\201" +
    "\001\002\000\004\007\202\001\002\000\046\006\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\037\uffb4\040\uffb4\043\uffb4" +
    "\045\uffb4\046\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\077\uffb4\100\uffb4\107\uffb4\001\002\000\004\107\204" +
    "\001\002\000\004\013\205\001\002\000\004\007\206\001" +
    "\002\000\046\006\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\037\uffad\040\uffad\043\uffad\045\uffad\046\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\055\uffad\077\uffad\100\uffad\107\uffad" +
    "\001\002\000\004\107\210\001\002\000\004\013\211\001" +
    "\002\000\004\007\212\001\002\000\046\006\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\037\uffb3\040\uffb3\043\uffb3\045" +
    "\uffb3\046\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\077\uffb3\100\uffb3\107\uffb3\001\002\000\004\011\214\001" +
    "\002\000\004\033\215\001\002\000\004\041\216\001\002" +
    "\000\006\107\071\110\031\001\002\000\004\042\223\001" +
    "\002\000\006\034\221\042\uffc8\001\002\000\006\107\071" +
    "\110\031\001\002\000\004\042\uffc7\001\002\000\004\007" +
    "\224\001\002\000\046\006\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\037\uffc9\040\uffc9\043\uffc9\045\uffc9\046\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\077\uffc9\100\uffc9" +
    "\107\uffc9\001\002\000\004\011\226\001\002\000\004\033" +
    "\227\001\002\000\004\032\230\001\002\000\004\012\231" +
    "\001\002\000\004\107\232\001\002\000\004\034\233\001" +
    "\002\000\006\035\236\036\234\001\002\000\004\034\uffb7" +
    "\001\002\000\004\034\237\001\002\000\004\034\uffb8\001" +
    "\002\000\004\107\240\001\002\000\004\013\241\001\002" +
    "\000\004\007\242\001\002\000\046\006\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\037\uffcb\040\uffcb\043\uffcb\045\uffcb" +
    "\046\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\077" +
    "\uffcb\100\uffcb\107\uffcb\001\002\000\014\012\053\047\047" +
    "\050\051\107\054\111\046\001\002\000\004\013\245\001" +
    "\002\000\004\005\246\001\002\000\046\006\247\027\020" +
    "\030\015\031\012\032\133\037\152\040\125\043\131\045" +
    "\130\046\143\051\137\052\144\053\142\054\115\055\127" +
    "\077\135\100\124\107\016\001\002\000\050\006\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\037\uffc2\040\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\077\uffc2\100\uffc2\107\uffc2\001\002\000\050" +
    "\006\uff91\027\uff91\030\uff91\031\uff91\032\uff91\037\uff91\040" +
    "\uff91\043\uff91\044\253\045\uff91\046\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\077\uff91\100\uff91\107\uff91\001" +
    "\002\000\046\006\247\027\020\030\015\031\012\032\133" +
    "\037\152\040\125\043\131\045\130\046\143\051\137\052" +
    "\144\053\142\054\115\055\127\077\135\100\124\107\016" +
    "\001\002\000\050\006\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\037\uffc1\040\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\077\uffc1\100" +
    "\uffc1\107\uffc1\001\002\000\004\005\254\001\002\000\046" +
    "\006\247\027\020\030\015\031\012\032\133\037\152\040" +
    "\125\043\131\045\130\046\143\051\137\052\144\053\142" +
    "\054\115\055\127\077\135\100\124\107\016\001\002\000" +
    "\046\006\uff90\027\uff90\030\uff90\031\uff90\032\uff90\037\uff90" +
    "\040\uff90\043\uff90\045\uff90\046\uff90\051\uff90\052\uff90\053" +
    "\uff90\054\uff90\055\uff90\077\uff90\100\uff90\107\uff90\001\002" +
    "\000\014\012\053\047\047\050\051\107\054\111\046\001" +
    "\002\000\004\013\260\001\002\000\004\005\261\001\002" +
    "\000\046\006\247\027\020\030\015\031\012\032\133\037" +
    "\152\040\125\043\131\045\130\046\143\051\137\052\144" +
    "\053\142\054\115\055\127\077\135\100\124\107\016\001" +
    "\002\000\046\006\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\037\uff8f\040\uff8f\043\uff8f\045\uff8f\046\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\077\uff8f\100\uff8f\107\uff8f" +
    "\001\002\000\004\107\264\001\002\000\004\076\265\001" +
    "\002\000\054\056\267\057\275\060\273\061\274\062\305" +
    "\063\300\064\306\065\276\066\302\067\310\070\311\071" +
    "\304\072\307\073\313\074\303\075\272\101\270\102\266" +
    "\103\271\104\312\105\301\001\002\000\004\013\364\001" +
    "\002\000\004\013\362\001\002\000\004\013\360\001\002" +
    "\000\004\013\356\001\002\000\004\013\354\001\002\000" +
    "\004\013\352\001\002\000\004\013\350\001\002\000\004" +
    "\013\346\001\002\000\004\013\344\001\002\000\046\006" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\037\uffa9\040\uffa9" +
    "\043\uffa9\045\uffa9\046\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\077\uffa9\100\uffa9\107\uffa9\001\002\000\004" +
    "\013\342\001\002\000\004\013\340\001\002\000\004\013" +
    "\336\001\002\000\004\013\334\001\002\000\004\013\332" +
    "\001\002\000\004\013\330\001\002\000\004\013\326\001" +
    "\002\000\004\013\324\001\002\000\004\013\322\001\002" +
    "\000\004\013\320\001\002\000\004\013\316\001\002\000" +
    "\004\013\314\001\002\000\004\007\315\001\002\000\046" +
    "\006\uff96\027\uff96\030\uff96\031\uff96\032\uff96\037\uff96\040" +
    "\uff96\043\uff96\045\uff96\046\uff96\051\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\077\uff96\100\uff96\107\uff96\001\002\000" +
    "\004\007\317\001\002\000\046\006\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\037\uff9c\040\uff9c\043\uff9c\045\uff9c\046" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\077\uff9c" +
    "\100\uff9c\107\uff9c\001\002\000\004\007\321\001\002\000" +
    "\046\006\uff99\027\uff99\030\uff99\031\uff99\032\uff99\037\uff99" +
    "\040\uff99\043\uff99\045\uff99\046\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\077\uff99\100\uff99\107\uff99\001\002" +
    "\000\004\007\323\001\002\000\046\006\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\037\uff9a\040\uff9a\043\uff9a\045\uff9a" +
    "\046\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\077" +
    "\uff9a\100\uff9a\107\uff9a\001\002\000\004\007\325\001\002" +
    "\000\046\006\uff97\027\uff97\030\uff97\031\uff97\032\uff97\037" +
    "\uff97\040\uff97\043\uff97\045\uff97\046\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\055\uff97\077\uff97\100\uff97\107\uff97\001" +
    "\002\000\004\007\327\001\002\000\046\006\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\037\uffa2\040\uffa2\043\uffa2\045" +
    "\uffa2\046\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\077\uffa2\100\uffa2\107\uffa2\001\002\000\004\007\331\001" +
    "\002\000\046\006\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\037\uffa4\040\uffa4\043\uffa4\045\uffa4\046\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\055\uffa4\077\uffa4\100\uffa4\107\uffa4" +
    "\001\002\000\004\007\333\001\002\000\046\006\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\037\uff98\040\uff98\043\uff98" +
    "\045\uff98\046\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\077\uff98\100\uff98\107\uff98\001\002\000\004\007\335" +
    "\001\002\000\046\006\uff95\027\uff95\030\uff95\031\uff95\032" +
    "\uff95\037\uff95\040\uff95\043\uff95\045\uff95\046\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\077\uff95\100\uff95\107" +
    "\uff95\001\002\000\004\007\337\001\002\000\046\006\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\037\uffa0\040\uffa0\043" +
    "\uffa0\045\uffa0\046\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\077\uffa0\100\uffa0\107\uffa0\001\002\000\004\007" +
    "\341\001\002\000\046\006\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\037\uff9b\040\uff9b\043\uff9b\045\uff9b\046\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\077\uff9b\100\uff9b" +
    "\107\uff9b\001\002\000\004\007\343\001\002\000\046\006" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\037\uffa3\040\uffa3" +
    "\043\uffa3\045\uffa3\046\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\077\uffa3\100\uffa3\107\uffa3\001\002\000\004" +
    "\007\345\001\002\000\046\006\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\037\uffa1\040\uffa1\043\uffa1\045\uffa1\046\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\077\uffa1\100" +
    "\uffa1\107\uffa1\001\002\000\004\007\347\001\002\000\046" +
    "\006\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\037\uffa7\040" +
    "\uffa7\043\uffa7\045\uffa7\046\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\077\uffa7\100\uffa7\107\uffa7\001\002\000" +
    "\004\007\351\001\002\000\046\006\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\037\uffa5\040\uffa5\043\uffa5\045\uffa5\046" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\077\uffa5" +
    "\100\uffa5\107\uffa5\001\002\000\004\007\353\001\002\000" +
    "\046\006\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\037\uffa6" +
    "\040\uffa6\043\uffa6\045\uffa6\046\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\077\uffa6\100\uffa6\107\uffa6\001\002" +
    "\000\004\007\355\001\002\000\046\006\uff94\027\uff94\030" +
    "\uff94\031\uff94\032\uff94\037\uff94\040\uff94\043\uff94\045\uff94" +
    "\046\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\077" +
    "\uff94\100\uff94\107\uff94\001\002\000\004\007\357\001\002" +
    "\000\046\006\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\037" +
    "\uff9d\040\uff9d\043\uff9d\045\uff9d\046\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\077\uff9d\100\uff9d\107\uff9d\001" +
    "\002\000\004\007\361\001\002\000\046\006\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\037\uff9f\040\uff9f\043\uff9f\045" +
    "\uff9f\046\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\077\uff9f\100\uff9f\107\uff9f\001\002\000\004\007\363\001" +
    "\002\000\046\006\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\037\uffa8\040\uffa8\043\uffa8\045\uffa8\046\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\077\uffa8\100\uffa8\107\uffa8" +
    "\001\002\000\004\007\365\001\002\000\046\006\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\037\uff9e\040\uff9e\043\uff9e" +
    "\045\uff9e\046\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\077\uff9e\100\uff9e\107\uff9e\001\002\000\004\011\367" +
    "\001\002\000\004\033\370\001\002\000\004\040\371\001" +
    "\002\000\004\012\372\001\002\000\006\107\066\111\046" +
    "\001\002\000\004\013\u0125\001\002\000\004\034\375\001" +
    "\002\000\006\107\066\111\046\001\002\000\004\034\377" +
    "\001\002\000\006\107\066\111\046\001\002\000\004\034" +
    "\u0101\001\002\000\006\107\066\111\046\001\002\000\004" +
    "\034\u0103\001\002\000\006\107\066\111\046\001\002\000" +
    "\004\034\u0105\001\002\000\006\107\066\111\046\001\002" +
    "\000\004\034\u0107\001\002\000\006\107\066\111\046\001" +
    "\002\000\004\034\u0109\001\002\000\006\107\066\111\046" +
    "\001\002\000\004\034\u010b\001\002\000\006\107\066\111" +
    "\046\001\002\000\004\034\u010d\001\002\000\006\107\066" +
    "\111\046\001\002\000\004\034\u010f\001\002\000\006\107" +
    "\066\111\046\001\002\000\004\034\u0111\001\002\000\006" +
    "\107\066\111\046\001\002\000\004\034\u0113\001\002\000" +
    "\006\107\066\111\046\001\002\000\004\034\u0115\001\002" +
    "\000\006\107\066\111\046\001\002\000\004\034\u0117\001" +
    "\002\000\006\107\066\111\046\001\002\000\004\034\u0119" +
    "\001\002\000\006\107\066\111\046\001\002\000\004\034" +
    "\u011b\001\002\000\006\107\066\111\046\001\002\000\004" +
    "\034\u011d\001\002\000\006\107\066\111\046\001\002\000" +
    "\004\034\u011f\001\002\000\006\107\066\111\046\001\002" +
    "\000\004\034\u0121\001\002\000\006\107\066\111\046\001" +
    "\002\000\004\034\u0123\001\002\000\006\107\066\111\046" +
    "\001\002\000\004\013\uffc5\001\002\000\004\007\u0126\001" +
    "\002\000\046\006\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\037\uffc6\040\uffc6\043\uffc6\045\uffc6\046\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\077\uffc6\100\uffc6\107\uffc6" +
    "\001\002\000\006\107\071\110\031\001\002\000\004\013" +
    "\u0129\001\002\000\004\007\u012a\001\002\000\046\006\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\037\uffaf\040\uffaf\043" +
    "\uffaf\045\uffaf\046\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\077\uffaf\100\uffaf\107\uffaf\001\002\000\004\007" +
    "\u012c\001\002\000\046\006\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\037\ufff9\040\ufff9\043\ufff9\045\ufff9\046\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\077\ufff9\100\ufff9" +
    "\107\ufff9\001\002\000\004\002\000\001\002\000\004\107" +
    "\u012f\001\002\000\004\034\u0130\001\002\000\004\107\u0131" +
    "\001\002\000\004\013\u0132\001\002\000\004\007\u0133\001" +
    "\002\000\046\006\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\037\uffaa\040\uffaa\043\uffaa\045\uffaa\046\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\077\uffaa\100\uffaa\107\uffaa" +
    "\001\002\000\046\006\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\037\ufffa\040\ufffa\043\ufffa\045\ufffa\046\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\077\ufffa\100\ufffa\107" +
    "\ufffa\001\002\000\014\006\013\027\020\030\015\031\012" +
    "\107\016\001\002\000\004\010\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\010\005\013" +
    "\006\007\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\021\005\013\006\007" +
    "\007\016\001\001\000\002\001\001\000\024\010\040\011" +
    "\025\012\024\013\033\047\037\050\032\051\031\054\027" +
    "\055\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\073\011\025" +
    "\012\024\013\072\047\037\050\032\051\031\054\027\055" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\024\013\051\050\032\051\047" +
    "\054\027\055\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\024\013\054\050\032\051\047\054" +
    "\027\055\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\050\032\051\066\054\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\071\047\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\050\032" +
    "\051\100\054\027\001\001\000\010\050\032\051\077\054" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\104\005\013\006" +
    "\007\007\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\117\005\122\006\110\007\145\020\137\021" +
    "\133\022\153\023\107\024\150\030\140\031\146\033\116" +
    "\034\111\035\152\036\115\037\120\040\125\041\113\042" +
    "\147\043\144\044\135\045\131\052\112\053\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\170" +
    "\005\122\006\110\007\145\020\137\021\133\022\153\023" +
    "\107\024\150\030\140\031\146\033\116\034\111\035\152" +
    "\036\115\037\120\040\125\041\113\042\147\043\144\044" +
    "\135\045\131\052\112\053\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\163\047\037\001\001\000\002\001\001" +
    "\000\006\011\165\047\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\217\026\216\047\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\217\026\221\047\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\024\013\243" +
    "\050\032\051\047\054\027\055\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\122\006\110\007\145" +
    "\017\247\020\137\021\133\022\153\023\107\024\150\030" +
    "\140\031\250\033\116\034\111\035\152\036\115\037\120" +
    "\040\125\041\113\042\147\043\144\044\135\045\131\052" +
    "\112\053\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\005\122\006\110\007\145\017\251\020\137\021" +
    "\133\022\153\023\107\024\150\030\140\031\250\033\116" +
    "\034\111\035\152\036\115\037\120\040\125\041\113\042" +
    "\147\043\144\044\135\045\131\052\112\053\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\005\122\006" +
    "\110\007\145\017\254\020\137\021\133\022\153\023\107" +
    "\024\150\030\140\031\250\033\116\034\111\035\152\036" +
    "\115\037\120\040\125\041\113\042\147\043\144\044\135" +
    "\045\131\052\112\053\121\001\001\000\002\001\001\000" +
    "\016\012\024\013\256\050\032\051\047\054\027\055\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\005" +
    "\122\006\110\007\145\017\261\020\137\021\133\022\153" +
    "\023\107\024\150\030\140\031\250\033\116\034\111\035" +
    "\152\036\115\037\120\040\125\041\113\042\147\043\144" +
    "\044\135\045\131\052\112\053\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\372\050\032\051\373\054\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\032\051" +
    "\375\054\027\001\001\000\002\001\001\000\010\050\032" +
    "\051\377\054\027\001\001\000\002\001\001\000\010\050" +
    "\032\051\u0101\054\027\001\001\000\002\001\001\000\010" +
    "\050\032\051\u0103\054\027\001\001\000\002\001\001\000" +
    "\010\050\032\051\u0105\054\027\001\001\000\002\001\001" +
    "\000\010\050\032\051\u0107\054\027\001\001\000\002\001" +
    "\001\000\010\050\032\051\u0109\054\027\001\001\000\002" +
    "\001\001\000\010\050\032\051\u010b\054\027\001\001\000" +
    "\002\001\001\000\010\050\032\051\u010d\054\027\001\001" +
    "\000\002\001\001\000\010\050\032\051\u010f\054\027\001" +
    "\001\000\002\001\001\000\010\050\032\051\u0111\054\027" +
    "\001\001\000\002\001\001\000\010\050\032\051\u0113\054" +
    "\027\001\001\000\002\001\001\000\010\050\032\051\u0115" +
    "\054\027\001\001\000\002\001\001\000\010\050\032\051" +
    "\u0117\054\027\001\001\000\002\001\001\000\010\050\032" +
    "\051\u0119\054\027\001\001\000\002\001\001\000\010\050" +
    "\032\051\u011b\054\027\001\001\000\002\001\001\000\010" +
    "\050\032\051\u011d\054\027\001\001\000\002\001\001\000" +
    "\010\050\032\051\u011f\054\027\001\001\000\002\001\001" +
    "\000\010\050\032\051\u0121\054\027\001\001\000\002\001" +
    "\001\000\010\050\032\051\u0123\054\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\u0127\047\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\u0135\005\013\006\007" +
    "\007\016\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Intermedio$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Intermedio$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Intermedio$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    int fl;
    int op_relacional=0;
    boolean esDAssig=false;

    public String generarSinTemp(String tipo, String op1,String op2){
    String codigo="";
    switch(tipo){
        case "ASIG": 
            codigo = Generador.gc(Generador.ASIG, op1, null, op2);
            break;

        }
        FCompiler.codigointermedio += codigo; 
        return op2;
    }
    
    public String generar(String tipo, String op1,String op2){
    String t="";
    String t2="";
    String codigo="";
    switch(tipo){
        case "PRINTLN":
            System.out.println("Entro a imprimir");        
                codigo = Generador.gc(Generador.PRINTLN, null, null, op2);     
            break;
        case "ADD_OP": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ADD_OP, op1, op2, t);
            break;
        case "SUBS_OPP": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.SUBS_OPP, op1, op2, t);
            break;
        case "OP_REL":
            switch(op_relacional){
                case 6: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.GREATER_OP, op1, op2, t);
                    break;
                case 2: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.GREATER_EQUAL_OP, op1, op2, t);
                    break;
                case 1: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.EQUAL_OP, op1, op2, t);
                    break;
                case 3: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.LESS_EQUAL_OP, op1, op2, t);
                    break;
                case 5: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.LESS_OP, op1, op2, t);
                    break;
                case 4: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.NOT_EQUAL_OP, op1, op2, t);
                    break;
                }
            break;
       /* case "RECIBIR":
            codigo = Generador.gc(Generador.RECIBIR, null, null, op2);
            break;
        case "RECIBIR2":
            t = Generador.nuevaTemp();
            if(tipoPrint==0){
            codigo = Generador.gc(Generador.RECIBIR, null, null, op1);}
            else{
                if(tipoPrint==2){codigo = Generador.gc(Generador.RECIBIR3, null, null, op1);//Impresion de string
                    }else{
                codigo = Generador.gc(Generador.RECIBIR2, null, null, op1);
                }
            }
            codigo += Generador.gc(Generador.ASIG, op1, null, t);
            break;
        case "INCMAS":
              t = Generador.nuevaTemp();
              t2 = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ASIG, op1, null, t);
            codigo += Generador.gc(Generador.MAS, t, "1", t2);
            codigo += Generador.gc(Generador.ASIG, t2, null, op1);
            break;
        case "INCMENOS":
            t = Generador.nuevaTemp();
            t2 = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ASIG, op1, null, t);
            codigo += Generador.gc(Generador.MENOS, t, "1", t2);
            codigo += Generador.gc(Generador.ASIG, t2, null, op1);
            break;
        case "AND": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.AND, op1, op2, t);
            break;
        case "OR": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.OR, op1, op2, t);
            break;
        
        case "MAS": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.MAS, op1, op2, t);
            break;
        case "MENOS": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.MENOS, op1, op2, t);
            break;
        
        case "ASIG": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ASIG, op1, op2, t);
            break;
        case "ASIG_DSC": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ASIG, op1, null, t);
            break;*/
        }
    FCompiler.codigointermedio += codigo; 
    return t;
    }

    public Intermedio(java_cup.runtime.Scanner s,ArrayList<Error1> m,int fdl) {
        super(s); 
        ManejadorDeErrores = m;
        fl = fdl;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Intermedio$actions {


void print(String msj)
   {System.out.println(msj);}

  private final Intermedio parser;

  /** Constructor */
  CUP$Intermedio$actions(Intermedio parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Intermedio$do_action_part00000000(
    int                        CUP$Intermedio$act_num,
    java_cup.runtime.lr_parser CUP$Intermedio$parser,
    java.util.Stack            CUP$Intermedio$stack,
    int                        CUP$Intermedio$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Intermedio$result;

      /* select the action based on the action number */
      switch (CUP$Intermedio$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT = start_val;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Intermedio$parser.done_parsing();
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARE_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_BODY ::= DEC SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_BODY ::= DATA_TYPE ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARE_BODY ::= ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARE_BODY2 ::= DEC SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARE_BODY2 ::= ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARE_BODY2 ::= DATA_TYPE ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASSIG ::= ID ASSIG_OP EXP 
            {
              Object RESULT =null;
		int miIdleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int miIdright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		String miId = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    RESULT = parser.generarSinTemp("ASIG", v.toString(), miId.toString());
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATA_TYPE ::= STRING_WORD 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATA_TYPE ::= INT_WORD 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATA_TYPE ::= BOOLEAN_WORD 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= ID 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		 RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= TRUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= FALSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= EXPNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= PARENTH1 EXP PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= COND 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STRINGVAL ::= STRINGVALAUX 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    if(s1!=null){
        RESULT=s1.toString();
    }

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRINGVAL ::= STRINGVALAUX ADD_OP STRINGVAL 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    if(s1!=null && s2 !=null){
        String t= Generador.nuevaTemp();
        FCompiler.codigointermedio += Generador.gc(Generador.ADD_OP,s1.toString(),s2.toString(),t);
        RESULT=t;
    }

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STRINGVALAUX ::= STRING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        String sincomillas= f.replace('"','-');
        sincomillas=sincomillas.replaceAll("-","");
        RESULT=sincomillas;
        parser.valorActual= f;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STRINGVALAUX ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          parser.valorActual=identificador.valor.toString();
          parser.valorActual=identificador.valor;
          RESULT=identificador.valor;


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BOOLEANVAL ::= TRUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOLEANVAL ::= FALSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BOOLEANVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          parser.valorActual=identificador.valor.toString();
          parser.valorActual=identificador.valor;
          RESULT=identificador.valor;


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_ARIT ::= ADD_OP 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_ARIT ::= SUBS_OP 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_LOG ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_LOG ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_REL ::= EQUAL_OP 
            {
              Object RESULT =null;
		 
parser.op_relacional=1;
 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_REL ::= GREATER_EQUAL_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=2;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_REL ::= LESS_EQUAL_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=3;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP_REL ::= NOT_EQUAL_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=4;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_REL ::= LESS_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=5;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP_REL ::= GREATER_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=6;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND ::= F OP_LOG COND 
            {
              Object RESULT =null;
		

    //RESULT = parser.generar("SUBS_OPP", i.toString(), f.toString());


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND ::= EXPNUM OP_REL EXPNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		

RESULT = parser.generar("OP_REL", i.toString(), f.toString());


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND ::= F 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F ::= BOOLEANVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		 RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("F",43, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // F ::= PARENTH1 COND PARENTH2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("F",43, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPNUM ::= T SUBS_OP EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    RESULT = parser.generar("SUBS_OPP", e1.toString(), e2.toString()); 

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPNUM ::= T ADD_OP EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    RESULT = parser.generar("ADD_OP", e1.toString(), e2.toString()); 

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPNUM ::= T 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    RESULT = e1;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // T ::= INTVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		 RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("T",42, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INTVAL ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		 RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INTVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          parser.valorActual=identificador.valor.toString();
          parser.valorActual=identificador.valor;
          RESULT=identificador.valor;


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEC ::= DATA_TYPE ID 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DATA_STR ::= NODE_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DATA_STR ::= ARRAYSTRING_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DATA_STR ::= FEATURES_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DATA_STR ::= GROUP_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-12)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-12)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARRAYVAL ::= STRINGVAL 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARRAYVAL ::= STRINGVAL COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-8)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-40)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MAIN_BODY ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MAIN_BODY ::= SENTEN MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY ::= SENTEN BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCES ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTENCES",24, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCES ::= SENTEN SENTENCES 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTENCES",24, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTEN ::= INPUT 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTEN ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTEN ::= FUNCT 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTEN ::= DATA_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTEN ::= DECLARE_BODY2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTEN ::= CTRL_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MAXMIN ::= MAX 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MAXMIN ::= MIN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INPUT ::= READFEAT 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INPUT",25, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INPUT ::= READS 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INPUT",25, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // READFEAT ::= READFEATVAL PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // READS ::= READSTRING PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OUTPUT ::= PLN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OUTPUT ::= GNGROUP 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OUTPUT ::= PGPH 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
if(val!=null){String codigo = parser.generar("PRINTLN", "", val.toString());}


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCT ::= GSIMILITUDE 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCT ::= GFEATURES 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FEATURE_WORD ::= ABSTRACTION PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FEATURE_WORD ::= AFFABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FEATURE_WORD ::= APPREHESION PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FEATURE_WORD ::= ANXIETY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FEATURE_WORD ::= CARETOSTANDARDS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FEATURE_WORD ::= DARE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FEATURE_WORD ::= DOMINANCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FEATURE_WORD ::= HARDNESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FEATURE_WORD ::= INDEPENDENCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FEATURE_WORD ::= LIVELINESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FEATURE_WORD ::= OPENNESSTOCHANGE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FEATURE_WORD ::= PERFECTIONISM PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FEATURE_WORD ::= PRIVACY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FEATURE_WORD ::= REASONING PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FEATURE_WORD ::= SELFCONTROL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FEATURE_WORD ::= SELFSUFFICIENCY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FEATURE_WORD ::= SENSITIVITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FEATURE_WORD ::= SOCIABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FEATURE_WORD ::= STABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FEATURE_WORD ::= STRESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FEATURE_WORD ::= SURVEILLANCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CTRL_STR ::= LOOP_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CTRL_STR ::= IF_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY ELSE CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-8)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LOOP_STR ::= LOOP PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Intermedio$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Intermedio$do_action(
    int                        CUP$Intermedio$act_num,
    java_cup.runtime.lr_parser CUP$Intermedio$parser,
    java.util.Stack            CUP$Intermedio$stack,
    int                        CUP$Intermedio$top)
    throws java.lang.Exception
    {
              return CUP$Intermedio$do_action_part00000000(
                               CUP$Intermedio$act_num,
                               CUP$Intermedio$parser,
                               CUP$Intermedio$stack,
                               CUP$Intermedio$top);
    }
}

}
