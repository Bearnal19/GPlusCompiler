
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 02 19:57:36 MST 2016
//----------------------------------------------------

package analizador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 02 19:57:36 MST 2016
  */
public class Intermedio extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Intermedio() {super();}

  /** Constructor which sets the default scanner. */
  public Intermedio(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Intermedio(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\011\000\002\003" +
    "\003\000\002\003\005\000\002\003\006\000\002\003\005" +
    "\000\002\054\004\000\002\054\004\000\002\054\005\000" +
    "\002\006\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\010\003\000\002\011\003\000" +
    "\002\011\005\000\002\051\003\000\002\051\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\013\005\000\002\013\003\000\002\057\003\000\002\057" +
    "\005\000\002\057\005\000\002\053\003\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\003\000\002\056\003\000\002\056\005\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\007\004" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\024\017\000\002\020\017\000\002" +
    "\021\012\000\002\026\003\000\002\026\005\000\002\022" +
    "\013\000\002\027\053\000\002\004\003\000\002\004\004" +
    "\000\002\017\003\000\002\017\004\000\002\034\003\000" +
    "\002\034\004\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\025" +
    "\003\000\002\025\003\000\002\035\003\000\002\035\003" +
    "\000\002\041\007\000\002\042\007\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\043\007\000\002" +
    "\044\007\000\002\045\007\000\002\037\003\000\002\037" +
    "\003\000\002\046\010\000\002\047\007\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\023\003\000\002\023\003\000\002\060" +
    "\002\000\002\061\002\000\002\062\002\000\002\030\016" +
    "\000\002\031\003\000\002\063\002\000\002\064\002\000" +
    "\002\040\012\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\006\013\027\020\030\015\031\012\107\016\001" +
    "\002\000\004\007\u0134\001\002\000\004\010\214\001\002" +
    "\000\004\107\ufff5\001\002\000\004\010\uffff\001\002\000" +
    "\004\107\210\001\002\000\004\107\ufff6\001\002\000\004" +
    "\011\023\001\002\000\004\007\021\001\002\000\004\107" +
    "\ufff7\001\002\000\014\006\013\027\020\030\015\031\012" +
    "\107\016\001\002\000\004\010\ufffe\001\002\000\024\003" +
    "\045\012\027\047\030\050\044\054\026\055\047\107\031" +
    "\110\037\111\033\001\002\000\036\003\uffc9\007\uffc9\013" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\034\uffc9\001\002\000" +
    "\036\003\uffd6\007\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\034\uffd6\001\002\000\004\012\203\001\002\000\024" +
    "\003\045\012\027\047\030\050\044\054\026\055\047\107" +
    "\031\110\037\111\033\001\002\000\012\007\ufff2\013\ufff2" +
    "\015\uffe8\016\uffe8\001\002\000\034\003\uffca\007\ufff4\013" +
    "\ufff4\015\uffe6\016\uffe6\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffe9\026\uffca\001\002\000\004\007" +
    "\ufff8\001\002\000\030\003\uffcb\007\ufff3\013\ufff3\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\001\002\000\026\003\137\007\uffef\017\174\020\173" +
    "\021\167\022\175\023\171\024\172\025\136\026\140\001" +
    "\002\000\036\003\uffcd\007\uffcd\013\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\034\uffcd\001\002\000\012\007\uffda\013\uffda" +
    "\015\154\016\153\001\002\000\014\007\uffea\013\uffea\025" +
    "\uffea\034\uffea\042\uffea\001\002\000\014\007\uffec\013\uffec" +
    "\025\150\034\uffec\042\uffec\001\002\000\006\007\ufff0\013" +
    "\ufff0\001\002\000\012\007\uffd9\013\uffd9\015\uffd9\016\uffd9" +
    "\001\002\000\036\003\uffa5\007\uffa5\013\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\034\uffa5\001\002\000\012\007\ufff1\013" +
    "\ufff1\015\uffe7\016\uffe7\001\002\000\036\003\uffce\007\uffce" +
    "\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\127\026\130\034\uffce\001\002" +
    "\000\004\007\uffed\001\002\000\004\012\051\001\002\000" +
    "\036\003\uffa4\007\uffa4\013\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\034\uffa4\001\002\000\004\107\052\001\002\000\004" +
    "\076\053\001\002\000\054\056\055\057\063\060\061\061" +
    "\062\062\073\063\066\064\074\065\064\066\070\067\077" +
    "\070\076\071\072\072\075\073\101\074\071\075\060\101" +
    "\056\102\054\103\057\104\100\105\067\001\002\000\004" +
    "\013\126\001\002\000\004\013\125\001\002\000\004\013" +
    "\124\001\002\000\004\013\123\001\002\000\004\013\122" +
    "\001\002\000\004\013\121\001\002\000\004\013\120\001" +
    "\002\000\004\013\117\001\002\000\004\013\116\001\002" +
    "\000\036\003\uffa2\007\uffa2\013\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\034\uffa2\001\002\000\004\013\115\001\002\000" +
    "\004\013\114\001\002\000\004\013\113\001\002\000\004" +
    "\013\112\001\002\000\004\013\111\001\002\000\004\013" +
    "\110\001\002\000\004\013\107\001\002\000\004\013\106" +
    "\001\002\000\004\013\105\001\002\000\004\013\104\001" +
    "\002\000\004\013\103\001\002\000\004\013\102\001\002" +
    "\000\036\003\uff8f\007\uff8f\013\uff8f\015\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\034\uff8f\001\002\000\036\003\uff95\007\uff95\013" +
    "\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\034\uff95\001\002\000" +
    "\036\003\uff93\007\uff93\013\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\034\uff93\001\002\000\036\003\uff92\007\uff92\013\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\025\uff92\026\uff92\034\uff92\001\002\000\036" +
    "\003\uff90\007\uff90\013\uff90\015\uff90\016\uff90\017\uff90\020" +
    "\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90" +
    "\034\uff90\001\002\000\036\003\uff9b\007\uff9b\013\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\034\uff9b\001\002\000\036\003" +
    "\uff9d\007\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\034" +
    "\uff9d\001\002\000\036\003\uff91\007\uff91\013\uff91\015\uff91" +
    "\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024" +
    "\uff91\025\uff91\026\uff91\034\uff91\001\002\000\036\003\uff8e" +
    "\007\uff8e\013\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021" +
    "\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\034\uff8e" +
    "\001\002\000\036\003\uff99\007\uff99\013\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\034\uff99\001\002\000\036\003\uff94\007" +
    "\uff94\013\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\034\uff94\001" +
    "\002\000\036\003\uff9c\007\uff9c\013\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\034\uff9c\001\002\000\036\003\uff9a\007\uff9a" +
    "\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\034\uff9a\001\002" +
    "\000\036\003\uffa0\007\uffa0\013\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\034\uffa0\001\002\000\036\003\uff9e\007\uff9e\013" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\026\uff9e\034\uff9e\001\002\000" +
    "\036\003\uff9f\007\uff9f\013\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\034\uff9f\001\002\000\036\003\uff8d\007\uff8d\013\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\034\uff8d\001\002\000\036" +
    "\003\uff96\007\uff96\013\uff96\015\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96" +
    "\034\uff96\001\002\000\036\003\uff98\007\uff98\013\uff98\015" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\025\uff98\026\uff98\034\uff98\001\002\000\036\003" +
    "\uffa1\007\uffa1\013\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\034" +
    "\uffa1\001\002\000\036\003\uff97\007\uff97\013\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\034\uff97\001\002\000\014\012\133" +
    "\054\026\055\047\107\134\111\131\001\002\000\014\012" +
    "\133\054\026\055\047\107\134\111\131\001\002\000\036" +
    "\003\uffcb\007\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\034\uffcb\001\002\000\036\003\uffd0\007\uffd0\013\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\034\uffd0\001\002\000\016\003" +
    "\045\012\133\054\026\055\047\107\134\111\131\001\002" +
    "\000\036\003\uffca\007\uffca\013\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\034\uffca\001\002\000\012\003\137\013\141\025" +
    "\136\026\140\001\002\000\016\003\146\012\133\054\026" +
    "\055\047\107\134\111\131\001\002\000\014\012\133\054" +
    "\026\055\047\107\134\111\131\001\002\000\016\003\143" +
    "\012\133\054\026\055\047\107\134\111\131\001\002\000" +
    "\036\003\uffcc\007\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\034\uffcc\001\002\000\036\003\uffd5\007\uffd5\013\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\034\uffd5\001\002\000\036" +
    "\003\uffcf\007\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\034\uffcf\001\002\000\036\003\uffd2\007\uffd2\013\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\034\uffd2\001\002\000\036\003" +
    "\uffd4\007\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\034" +
    "\uffd4\001\002\000\036\003\uffd1\007\uffd1\013\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\034\uffd1\001\002\000\036\003\uffd3" +
    "\007\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\034\uffd3" +
    "\001\002\000\006\107\151\110\037\001\002\000\014\007" +
    "\uffe9\013\uffe9\025\uffe9\034\uffe9\042\uffe9\001\002\000\012" +
    "\007\uffeb\013\uffeb\034\uffeb\042\uffeb\001\002\000\022\003" +
    "\uffe2\012\uffe2\047\uffe2\050\uffe2\054\uffe2\055\uffe2\107\uffe2" +
    "\111\uffe2\001\002\000\022\003\uffe3\012\uffe3\047\uffe3\050" +
    "\uffe3\054\uffe3\055\uffe3\107\uffe3\111\uffe3\001\002\000\022" +
    "\003\045\012\162\047\156\050\160\054\026\055\047\107" +
    "\163\111\131\001\002\000\012\007\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\001\002\000\024\003\137\017\174\020\173\021" +
    "\167\022\175\023\171\024\172\025\136\026\140\001\002" +
    "\000\012\007\uffe7\013\uffe7\015\uffe7\016\uffe7\001\002\000" +
    "\006\007\uffdb\013\uffdb\001\002\000\022\003\045\012\162" +
    "\047\156\050\160\054\026\055\047\107\163\111\131\001" +
    "\002\000\034\003\uffca\007\uffe6\013\uffe6\015\uffe6\016\uffe6" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\001\002\000\026\003\137\013\141\017\174" +
    "\020\173\021\167\022\175\023\171\024\172\025\136\026" +
    "\140\001\002\000\004\013\166\001\002\000\012\007\uffd7" +
    "\013\uffd7\015\uffd7\016\uffd7\001\002\000\016\003\uffdf\012" +
    "\uffdf\054\uffdf\055\uffdf\107\uffdf\111\uffdf\001\002\000\016" +
    "\003\045\012\133\054\026\055\047\107\134\111\131\001" +
    "\002\000\016\003\uffdd\012\uffdd\054\uffdd\055\uffdd\107\uffdd" +
    "\111\uffdd\001\002\000\016\003\uffdc\012\uffdc\054\uffdc\055" +
    "\uffdc\107\uffdc\111\uffdc\001\002\000\016\003\uffe0\012\uffe0" +
    "\054\uffe0\055\uffe0\107\uffe0\111\uffe0\001\002\000\016\003" +
    "\uffe1\012\uffe1\054\uffe1\055\uffe1\107\uffe1\111\uffe1\001\002" +
    "\000\016\003\uffde\012\uffde\054\uffde\055\uffde\107\uffde\111" +
    "\uffde\001\002\000\020\003\137\007\uffd8\013\uffd8\015\uffd8" +
    "\016\uffd8\025\136\026\140\001\002\000\004\013\202\001" +
    "\002\000\026\003\137\013\141\017\174\020\173\021\167" +
    "\022\175\023\171\024\172\025\136\026\140\001\002\000" +
    "\004\013\166\001\002\000\006\007\uffee\013\uffee\001\002" +
    "\000\004\107\204\001\002\000\004\034\205\001\002\000" +
    "\004\107\206\001\002\000\004\013\207\001\002\000\036" +
    "\003\uffa3\007\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\034\uffa3\001\002\000\006\007\uffc8\011\023\001\002\000" +
    "\004\007\212\001\002\000\014\006\013\027\020\030\015" +
    "\031\012\107\016\001\002\000\004\010\ufffd\001\002\000" +
    "\004\005\215\001\002\000\040\027\020\030\015\031\012" +
    "\032\236\037\255\040\232\043\235\045\234\046\246\051" +
    "\241\052\247\053\245\077\240\100\231\107\016\001\002" +
    "\000\042\006\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\037" +
    "\uffb2\040\uffb2\043\uffb2\045\uffb2\046\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\077\uffb2\100\uffb2\107\uffb2\001\002\000\004\007" +
    "\u0133\001\002\000\042\006\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\037\uffb5\040\uffb5\043\uffb5\045\uffb5\046\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\077\uffb5\100\uffb5\107\uffb5\001\002" +
    "\000\042\006\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\037" +
    "\uffb3\040\uffb3\043\uffb3\045\uffb3\046\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\077\uffb3\100\uffb3\107\uffb3\001\002\000\042\006" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\037\uffab\040\uffab" +
    "\043\uffab\045\uffab\046\uffab\051\uffab\052\uffab\053\uffab\077" +
    "\uffab\100\uffab\107\uffab\001\002\000\042\006\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\037\uff8c\040\uff8c\043\uff8c\045" +
    "\uff8c\046\uff8c\051\uff8c\052\uff8c\053\uff8c\077\uff8c\100\uff8c" +
    "\107\uff8c\001\002\000\004\006\u0132\001\002\000\042\006" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\037\uffaf\040\uffaf" +
    "\043\uffaf\045\uffaf\046\uffaf\051\uffaf\052\uffaf\053\uffaf\077" +
    "\uffaf\100\uffaf\107\uffaf\001\002\000\042\006\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\037\uffb6\040\uffb6\043\uffb6\045" +
    "\uffb6\046\uffb6\051\uffb6\052\uffb6\053\uffb6\077\uffb6\100\uffb6" +
    "\107\uffb6\001\002\000\042\006\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\037\uffb4\040\uffb4\043\uffb4\045\uffb4\046\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\077\uffb4\100\uffb4\107\uffb4\001" +
    "\002\000\004\107\210\001\002\000\004\012\u012c\001\002" +
    "\000\004\107\373\001\002\000\042\006\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\037\uffae\040\uffae\043\uffae\045\uffae" +
    "\046\uffae\051\uffae\052\uffae\053\uffae\077\uffae\100\uffae\107" +
    "\uffae\001\002\000\004\012\uff82\001\002\000\004\012\uff86" +
    "\001\002\000\004\107\355\001\002\000\042\006\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\037\uffc6\040\uffc6\043\uffc6" +
    "\045\uffc6\046\uffc6\051\uffc6\052\uffc6\053\uffc6\077\uffc6\100" +
    "\uffc6\107\uffc6\001\002\000\004\107\343\001\002\000\004" +
    "\012\337\001\002\000\004\012\324\001\002\000\042\006" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\037\uffc7\040\uffc7" +
    "\043\uffc7\045\uffc7\046\uffc7\051\uffc7\052\uffc7\053\uffc7\077" +
    "\uffc7\100\uffc7\107\uffc7\001\002\000\042\006\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\037\uff8b\040\uff8b\043\uff8b\045" +
    "\uff8b\046\uff8b\051\uff8b\052\uff8b\053\uff8b\077\uff8b\100\uff8b" +
    "\107\uff8b\001\002\000\004\012\320\001\002\000\004\012" +
    "\314\001\002\000\004\012\310\001\002\000\042\006\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\037\uffa9\040\uffa9\043" +
    "\uffa9\045\uffa9\046\uffa9\051\uffa9\052\uffa9\053\uffa9\077\uffa9" +
    "\100\uffa9\107\uffa9\001\002\000\004\007\307\001\002\000" +
    "\042\006\uffbc\027\020\030\015\031\012\032\236\037\255" +
    "\040\232\043\235\045\234\046\246\051\241\052\247\053" +
    "\245\077\240\100\231\107\016\001\002\000\042\006\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\037\uffaa\040\uffaa\043" +
    "\uffaa\045\uffaa\046\uffaa\051\uffaa\052\uffaa\053\uffaa\077\uffaa" +
    "\100\uffaa\107\uffaa\001\002\000\042\006\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\037\uffc4\040\uffc4\043\uffc4\045\uffc4" +
    "\046\uffc4\051\uffc4\052\uffc4\053\uffc4\077\uffc4\100\uffc4\107" +
    "\uffc4\001\002\000\004\107\272\001\002\000\042\006\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\037\uffc5\040\uffc5\043" +
    "\uffc5\045\uffc5\046\uffc5\051\uffc5\052\uffc5\053\uffc5\077\uffc5" +
    "\100\uffc5\107\uffc5\001\002\000\004\012\260\001\002\000" +
    "\022\003\uff85\012\uff85\047\uff85\050\uff85\054\uff85\055\uff85" +
    "\107\uff85\111\uff85\001\002\000\022\003\045\012\162\047" +
    "\156\050\160\054\026\055\047\107\163\111\131\001\002" +
    "\000\004\013\263\001\002\000\004\005\264\001\002\000" +
    "\042\006\uff84\027\uff84\030\uff84\031\uff84\032\uff84\037\uff84" +
    "\040\uff84\043\uff84\045\uff84\046\uff84\051\uff84\052\uff84\053" +
    "\uff84\077\uff84\100\uff84\107\uff84\001\002\000\042\006\266" +
    "\027\020\030\015\031\012\032\236\037\255\040\232\043" +
    "\235\045\234\046\246\051\241\052\247\053\245\077\240" +
    "\100\231\107\016\001\002\000\044\006\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\037\uffba\040\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\051\uffba\052\uffba\053\uffba\077\uffba\100" +
    "\uffba\107\uffba\001\002\000\042\006\uff83\027\uff83\030\uff83" +
    "\031\uff83\032\uff83\037\uff83\040\uff83\043\uff83\045\uff83\046" +
    "\uff83\051\uff83\052\uff83\053\uff83\077\uff83\100\uff83\107\uff83" +
    "\001\002\000\042\006\266\027\020\030\015\031\012\032" +
    "\236\037\255\040\232\043\235\045\234\046\246\051\241" +
    "\052\247\053\245\077\240\100\231\107\016\001\002\000" +
    "\044\006\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\037\uffb9" +
    "\040\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\077\uffb9\100\uffb9\107\uffb9\001\002\000\004" +
    "\011\273\001\002\000\004\033\274\001\002\000\004\037" +
    "\275\001\002\000\004\012\276\001\002\000\004\107\277" +
    "\001\002\000\004\034\300\001\002\000\006\107\151\110" +
    "\037\001\002\000\004\034\302\001\002\000\006\107\151" +
    "\110\037\001\002\000\004\013\304\001\002\000\004\007" +
    "\305\001\002\000\042\006\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\037\uffc2\040\uffc2\043\uffc2\045\uffc2\046\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\077\uffc2\100\uffc2\107\uffc2\001\002" +
    "\000\004\006\uffbb\001\002\000\042\006\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\037\ufffb\040\ufffb\043\ufffb\045\ufffb" +
    "\046\ufffb\051\ufffb\052\ufffb\053\ufffb\077\ufffb\100\ufffb\107" +
    "\ufffb\001\002\000\004\107\311\001\002\000\004\013\312" +
    "\001\002\000\004\007\313\001\002\000\042\006\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\037\uffa7\040\uffa7\043\uffa7" +
    "\045\uffa7\046\uffa7\051\uffa7\052\uffa7\053\uffa7\077\uffa7\100" +
    "\uffa7\107\uffa7\001\002\000\004\107\315\001\002\000\004" +
    "\013\316\001\002\000\004\007\317\001\002\000\042\006" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\037\uffad\040\uffad" +
    "\043\uffad\045\uffad\046\uffad\051\uffad\052\uffad\053\uffad\077" +
    "\uffad\100\uffad\107\uffad\001\002\000\004\107\321\001\002" +
    "\000\004\013\322\001\002\000\004\007\323\001\002\000" +
    "\042\006\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\037\uffa6" +
    "\040\uffa6\043\uffa6\045\uffa6\046\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\077\uffa6\100\uffa6\107\uffa6\001\002\000\022\003\045" +
    "\012\162\047\156\050\160\054\026\055\047\107\163\111" +
    "\131\001\002\000\004\013\326\001\002\000\004\005\uff8a" +
    "\001\002\000\004\005\330\001\002\000\042\006\266\027" +
    "\020\030\015\031\012\032\236\037\255\040\232\043\235" +
    "\045\234\046\246\051\241\052\247\053\245\077\240\100" +
    "\231\107\016\001\002\000\004\044\uff89\001\002\000\004" +
    "\044\333\001\002\000\004\005\334\001\002\000\042\006" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\037\uff88\040\uff88" +
    "\043\uff88\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88\077" +
    "\uff88\100\uff88\107\uff88\001\002\000\042\006\266\027\020" +
    "\030\015\031\012\032\236\037\255\040\232\043\235\045" +
    "\234\046\246\051\241\052\247\053\245\077\240\100\231" +
    "\107\016\001\002\000\042\006\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\037\uff87\040\uff87\043\uff87\045\uff87\046\uff87" +
    "\051\uff87\052\uff87\053\uff87\077\uff87\100\uff87\107\uff87\001" +
    "\002\000\004\107\340\001\002\000\004\013\341\001\002" +
    "\000\004\007\342\001\002\000\042\006\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\037\uffac\040\uffac\043\uffac\045\uffac" +
    "\046\uffac\051\uffac\052\uffac\053\uffac\077\uffac\100\uffac\107" +
    "\uffac\001\002\000\004\011\344\001\002\000\004\033\345" +
    "\001\002\000\004\041\346\001\002\000\006\107\151\110" +
    "\037\001\002\000\004\042\353\001\002\000\006\034\351" +
    "\042\uffc0\001\002\000\006\107\151\110\037\001\002\000" +
    "\004\042\uffbf\001\002\000\004\007\354\001\002\000\042" +
    "\006\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\037\uffc1\040" +
    "\uffc1\043\uffc1\045\uffc1\046\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\077\uffc1\100\uffc1\107\uffc1\001\002\000\004\011\356\001" +
    "\002\000\004\033\357\001\002\000\004\032\360\001\002" +
    "\000\004\012\361\001\002\000\004\107\362\001\002\000" +
    "\004\034\363\001\002\000\006\035\365\036\364\001\002" +
    "\000\004\034\uffb0\001\002\000\004\034\uffb1\001\002\000" +
    "\004\034\367\001\002\000\004\107\370\001\002\000\004" +
    "\013\371\001\002\000\004\007\372\001\002\000\042\006" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\037\uffc3\040\uffc3" +
    "\043\uffc3\045\uffc3\046\uffc3\051\uffc3\052\uffc3\053\uffc3\077" +
    "\uffc3\100\uffc3\107\uffc3\001\002\000\004\011\374\001\002" +
    "\000\004\033\375\001\002\000\004\040\376\001\002\000" +
    "\004\012\377\001\002\000\016\003\045\012\133\054\026" +
    "\055\047\107\134\111\131\001\002\000\004\013\u012a\001" +
    "\002\000\012\003\137\025\136\026\140\034\u0102\001\002" +
    "\000\016\003\045\012\133\054\026\055\047\107\134\111" +
    "\131\001\002\000\012\003\137\025\136\026\140\034\u0104" +
    "\001\002\000\016\003\045\012\133\054\026\055\047\107" +
    "\134\111\131\001\002\000\012\003\137\025\136\026\140" +
    "\034\u0106\001\002\000\016\003\045\012\133\054\026\055" +
    "\047\107\134\111\131\001\002\000\012\003\137\025\136" +
    "\026\140\034\u0108\001\002\000\016\003\045\012\133\054" +
    "\026\055\047\107\134\111\131\001\002\000\012\003\137" +
    "\025\136\026\140\034\u010a\001\002\000\016\003\045\012" +
    "\133\054\026\055\047\107\134\111\131\001\002\000\012" +
    "\003\137\025\136\026\140\034\u010c\001\002\000\016\003" +
    "\045\012\133\054\026\055\047\107\134\111\131\001\002" +
    "\000\012\003\137\025\136\026\140\034\u010e\001\002\000" +
    "\016\003\045\012\133\054\026\055\047\107\134\111\131" +
    "\001\002\000\012\003\137\025\136\026\140\034\u0110\001" +
    "\002\000\016\003\045\012\133\054\026\055\047\107\134" +
    "\111\131\001\002\000\012\003\137\025\136\026\140\034" +
    "\u0112\001\002\000\016\003\045\012\133\054\026\055\047" +
    "\107\134\111\131\001\002\000\012\003\137\025\136\026" +
    "\140\034\u0114\001\002\000\016\003\045\012\133\054\026" +
    "\055\047\107\134\111\131\001\002\000\012\003\137\025" +
    "\136\026\140\034\u0116\001\002\000\016\003\045\012\133" +
    "\054\026\055\047\107\134\111\131\001\002\000\012\003" +
    "\137\025\136\026\140\034\u0118\001\002\000\016\003\045" +
    "\012\133\054\026\055\047\107\134\111\131\001\002\000" +
    "\012\003\137\025\136\026\140\034\u011a\001\002\000\016" +
    "\003\045\012\133\054\026\055\047\107\134\111\131\001" +
    "\002\000\012\003\137\025\136\026\140\034\u011c\001\002" +
    "\000\016\003\045\012\133\054\026\055\047\107\134\111" +
    "\131\001\002\000\012\003\137\025\136\026\140\034\u011e" +
    "\001\002\000\016\003\045\012\133\054\026\055\047\107" +
    "\134\111\131\001\002\000\012\003\137\025\136\026\140" +
    "\034\u0120\001\002\000\016\003\045\012\133\054\026\055" +
    "\047\107\134\111\131\001\002\000\012\003\137\025\136" +
    "\026\140\034\u0122\001\002\000\016\003\045\012\133\054" +
    "\026\055\047\107\134\111\131\001\002\000\012\003\137" +
    "\025\136\026\140\034\u0124\001\002\000\016\003\045\012" +
    "\133\054\026\055\047\107\134\111\131\001\002\000\012" +
    "\003\137\025\136\026\140\034\u0126\001\002\000\016\003" +
    "\045\012\133\054\026\055\047\107\134\111\131\001\002" +
    "\000\012\003\137\025\136\026\140\034\u0128\001\002\000" +
    "\016\003\045\012\133\054\026\055\047\107\134\111\131" +
    "\001\002\000\012\003\137\013\uffbd\025\136\026\140\001" +
    "\002\000\004\007\u012b\001\002\000\042\006\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\037\uffbe\040\uffbe\043\uffbe\045" +
    "\uffbe\046\uffbe\051\uffbe\052\uffbe\053\uffbe\077\uffbe\100\uffbe" +
    "\107\uffbe\001\002\000\006\107\151\110\037\001\002\000" +
    "\004\013\u012e\001\002\000\004\007\u012f\001\002\000\042" +
    "\006\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\037\uffa8\040" +
    "\uffa8\043\uffa8\045\uffa8\046\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\077\uffa8\100\uffa8\107\uffa8\001\002\000\004\007\u0131\001" +
    "\002\000\042\006\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\037\ufff9\040\ufff9\043\ufff9\045\ufff9\046\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\077\ufff9\100\ufff9\107\ufff9\001\002\000\004" +
    "\002\000\001\002\000\042\006\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\037\ufffa\040\ufffa\043\ufffa\045\ufffa\046\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\077\ufffa\100\ufffa\107\ufffa\001" +
    "\002\000\014\006\013\027\020\030\015\031\012\107\016" +
    "\001\002\000\004\010\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\010\005\013" +
    "\006\007\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\021\005\013\006\007" +
    "\007\016\001\001\000\002\001\001\000\032\010\031\011" +
    "\040\012\041\013\045\037\023\046\042\047\047\051\037" +
    "\052\034\053\033\056\024\057\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\176" +
    "\011\040\012\041\013\200\037\023\046\042\047\047\051" +
    "\037\052\034\053\177\056\024\057\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\167\001\001\000\002\001\001\000\004" +
    "\015\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\037\023" +
    "\046\042\047\047\052\034\056\146\001\001\000\014\037" +
    "\023\046\042\047\047\052\034\056\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\023\046\042\047" +
    "\047\052\034\053\134\056\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\037\023\046\042\047\047\052" +
    "\034\056\144\001\001\000\014\037\023\046\042\047\047" +
    "\052\034\056\143\001\001\000\014\037\023\046\042\047" +
    "\047\052\034\056\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\151" +
    "\051\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\041\013\160" +
    "\037\023\046\042\047\047\052\034\053\156\056\024\057" +
    "\035\001\001\000\002\001\001\000\004\016\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\012\041\013" +
    "\164\037\023\046\042\047\047\052\034\053\163\056\024" +
    "\057\035\001\001\000\002\001\001\000\004\016\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\023\046\042\047\047\052\034\053\175\056" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\212\005" +
    "\013\006\007\007\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\004\223\005\227\006\216\007\250\020" +
    "\242\021\236\022\255\023\215\024\253\030\243\031\241" +
    "\032\256\033\251\035\225\036\217\040\222\041\224\042" +
    "\232\043\221\044\252\045\247\054\220\055\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u012f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\004" +
    "\305\005\227\006\216\007\250\020\242\021\236\022\255" +
    "\023\215\024\253\030\243\031\241\032\256\033\251\035" +
    "\225\036\217\040\222\041\224\042\232\043\221\044\252" +
    "\045\247\054\220\055\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\260\001\001\000\024\012\041\013" +
    "\261\037\023\046\042\047\047\052\034\053\156\056\024" +
    "\057\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\264\001\001\000\060\005\227\006\216\007\250" +
    "\017\266\020\242\021\236\022\255\023\215\024\253\030" +
    "\243\031\241\032\256\033\267\035\225\036\217\040\222" +
    "\041\224\042\232\043\221\044\252\045\247\054\220\055" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\005\227\006\216\007\250\017\270\020\242\021\236\022" +
    "\255\023\215\024\253\030\243\031\241\032\256\033\267" +
    "\035\225\036\217\040\222\041\224\042\232\043\221\044" +
    "\252\045\247\054\220\055\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\300\051\037\001\001\000\002\001\001\000\006\011" +
    "\302\051\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\012\041\013" +
    "\324\037\023\046\042\047\047\052\034\053\156\056\024" +
    "\057\035\001\001\000\002\001\001\000\004\060\326\001" +
    "\001\000\002\001\001\000\060\005\227\006\216\007\250" +
    "\017\330\020\242\021\236\022\255\023\215\024\253\030" +
    "\243\031\241\032\256\033\267\035\225\036\217\040\222" +
    "\041\224\042\232\043\221\044\252\045\247\054\220\055" +
    "\226\001\001\000\004\061\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\334\001\001\000\060\005" +
    "\227\006\216\007\250\017\335\020\242\021\236\022\255" +
    "\023\215\024\253\030\243\031\241\032\256\033\267\035" +
    "\225\036\217\040\222\041\224\042\232\043\221\044\252" +
    "\045\247\054\220\055\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\347\026\346\051\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\347\026\351\051" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\377\037\023\046\042\047\047\052\034\053\u0100\056" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\023\046\042\047\047\052\034\053\u0102\056\024\001" +
    "\001\000\002\001\001\000\016\037\023\046\042\047\047" +
    "\052\034\053\u0104\056\024\001\001\000\002\001\001\000" +
    "\016\037\023\046\042\047\047\052\034\053\u0106\056\024" +
    "\001\001\000\002\001\001\000\016\037\023\046\042\047" +
    "\047\052\034\053\u0108\056\024\001\001\000\002\001\001" +
    "\000\016\037\023\046\042\047\047\052\034\053\u010a\056" +
    "\024\001\001\000\002\001\001\000\016\037\023\046\042" +
    "\047\047\052\034\053\u010c\056\024\001\001\000\002\001" +
    "\001\000\016\037\023\046\042\047\047\052\034\053\u010e" +
    "\056\024\001\001\000\002\001\001\000\016\037\023\046" +
    "\042\047\047\052\034\053\u0110\056\024\001\001\000\002" +
    "\001\001\000\016\037\023\046\042\047\047\052\034\053" +
    "\u0112\056\024\001\001\000\002\001\001\000\016\037\023" +
    "\046\042\047\047\052\034\053\u0114\056\024\001\001\000" +
    "\002\001\001\000\016\037\023\046\042\047\047\052\034" +
    "\053\u0116\056\024\001\001\000\002\001\001\000\016\037" +
    "\023\046\042\047\047\052\034\053\u0118\056\024\001\001" +
    "\000\002\001\001\000\016\037\023\046\042\047\047\052" +
    "\034\053\u011a\056\024\001\001\000\002\001\001\000\016" +
    "\037\023\046\042\047\047\052\034\053\u011c\056\024\001" +
    "\001\000\002\001\001\000\016\037\023\046\042\047\047" +
    "\052\034\053\u011e\056\024\001\001\000\002\001\001\000" +
    "\016\037\023\046\042\047\047\052\034\053\u0120\056\024" +
    "\001\001\000\002\001\001\000\016\037\023\046\042\047" +
    "\047\052\034\053\u0122\056\024\001\001\000\002\001\001" +
    "\000\016\037\023\046\042\047\047\052\034\053\u0124\056" +
    "\024\001\001\000\002\001\001\000\016\037\023\046\042" +
    "\047\047\052\034\053\u0126\056\024\001\001\000\002\001" +
    "\001\000\016\037\023\046\042\047\047\052\034\053\u0128" +
    "\056\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\u012c\051\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\u0134\005\013\006\007\007\016\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Intermedio$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Intermedio$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Intermedio$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String iniet;
    String finet;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    EtiqRedir manejadoretiquetas;
    int fl;
    int op_relacional=0;
    int op_log=0;
    int tipoPrint=0;
    boolean esDAssig=false;

    public String generarSinTemp(String tipo, String op1,String op2){
    String codigo="";
    switch(tipo){
        case "ASIG": 
            codigo = Generador.gc(Generador.ASIG, op1, null, op2);
            break;

        }
        FCompiler.codigointermedio += codigo; 
        return op2;
    }
    
    public String generar(String tipo, String op1,String op2){
    String t="";
    String t2="";
    String codigo="";
    switch(tipo){
        case "PRINTLN":
            System.out.println("Entro a imprimir");        
                codigo = Generador.gc(Generador.PRINTLN, null, null, op2);     
            break;
        case "ADD_OP": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ADD_OP, op1, op2, t);
            break;
        case "SUBS_OPP": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.SUBS_OPP, op1, op2, t);
            break;
        case "OP_REL":
            switch(op_relacional){
                case 6: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.GREATER_OP, op1, op2, t);
                    break;
                case 2: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.GREATER_EQUAL_OP, op1, op2, t);
                    break;
                case 1: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.EQUAL_OP, op1, op2, t);
                    break;
                case 3: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.LESS_EQUAL_OP, op1, op2, t);
                    break;
                case 5: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.LESS_OP, op1, op2, t);
                    break;
                case 4: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.NOT_EQUAL_OP, op1, op2, t);
                    break;
                }
            break;
            
        case "OP_LOG":
            switch(op_log){
                case 1: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.AND, op1, op2, t);
                    break;
                case 2: 
                    t = Generador.nuevaTemp();
                    codigo = Generador.gc(Generador.OR, op1, op2, t);
                    break;
                }
            break;
        case "READ":
            t = Generador.nuevaTemp();
            System.out.println("estoy evaluando el tipo de recibir que se hara"+ tipoPrint);
            if(tipoPrint==1){
            codigo = Generador.gc(Generador.READSTRING, null, null, op2);}
            else{
                codigo = Generador.gc(Generador.READFEATVAL, null, null, op2);    
            }
            //codigo += Generador.gc(Generador.ASIG, op1, null, t);
            break;
        case "GETFEATURES":
            codigo = Generador.gc(Generador.GETFEATURES, null, null, op2);
            break;
            
       /* case "RECIBIR":
            codigo = Generador.gc(Generador.RECIBIR, null, null, op2);
            break;
        case "RECIBIR2":
            t = Generador.nuevaTemp();
            if(tipoPrint==0){
            codigo = Generador.gc(Generador.RECIBIR, null, null, op1);}
            else{
                if(tipoPrint==2){codigo = Generador.gc(Generador.RECIBIR3, null, null, op1);//Impresion de string
                    }else{
                codigo = Generador.gc(Generador.RECIBIR2, null, null, op1);
                }
            }
            codigo += Generador.gc(Generador.ASIG, op1, null, t);
            break;
        case "INCMAS":
              t = Generador.nuevaTemp();
              t2 = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ASIG, op1, null, t);
            codigo += Generador.gc(Generador.MAS, t, "1", t2);
            codigo += Generador.gc(Generador.ASIG, t2, null, op1);
            break;
        case "INCMENOS":
            t = Generador.nuevaTemp();
            t2 = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ASIG, op1, null, t);
            codigo += Generador.gc(Generador.MENOS, t, "1", t2);
            codigo += Generador.gc(Generador.ASIG, t2, null, op1);
            break;
        
        
        
        case "ASIG": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ASIG, op1, op2, t);
            break;
        case "ASIG_DSC": 
            t = Generador.nuevaTemp();
            codigo = Generador.gc(Generador.ASIG, op1, null, t);
            break;*/
        }
    FCompiler.codigointermedio += codigo; 
    return t;
    }

    public Intermedio(java_cup.runtime.Scanner s,ArrayList<Error1> m,int fdl) {
        super(s); 
        ManejadorDeErrores = m;
        fl = fdl;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Intermedio$actions {


void print(String msj)
   {System.out.println(msj);}

  private final Intermedio parser;

  /** Constructor */
  CUP$Intermedio$actions(Intermedio parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Intermedio$do_action(
    int                        CUP$Intermedio$act_num,
    java_cup.runtime.lr_parser CUP$Intermedio$parser,
    java.util.Stack            CUP$Intermedio$stack,
    int                        CUP$Intermedio$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Intermedio$result;

      /* select the action based on the action number */
      switch (CUP$Intermedio$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LOOPAUX ::= LOOP 
            {
              Object RESULT =null;
		
    String ini = Generador.nuevaEtiq();
    String fin = Generador.nuevaEtiq();
    System.out.println("ESTOY en el if aux"+ini+" etiquetia" +fin);
    RESULT = new EtiqRedir(ini,fin);

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("LOOPAUX",24, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LOOP_STR ::= LOOPAUX PARENTH1 NT$3 COND PARENTH2 CURLY_BR1 NT$4 BODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).value;
		
    String codigo = Generador.gc(Generador.GOTO, null, null, ((EtiqRedir)(et)).ini());
    codigo += Generador.gc(Generador.LABEL, null, null, ((EtiqRedir)(et)).fin());
    FCompiler.codigointermedio += codigo;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("LOOP_STR",30, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-5)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-5)).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-5)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;

    String codigo = Generador.gc(Generador.IF, lo.toString(), "false", ((EtiqRedir)(et)).fin());
    FCompiler.codigointermedio += codigo;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$3 ::= 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
 
    String codigo = Generador.gc(Generador.LABEL, null, null, ((EtiqRedir)(et)).ini());
    FCompiler.codigointermedio += codigo;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IFAUX ::= IF 
            {
              Object RESULT =null;
		
    String ini = Generador.nuevaEtiq();
    String fin = Generador.nuevaEtiq();
    System.out.println("ESTOy en el if aux"+ini+" etiquetia" +fin);
    RESULT = new EtiqRedir(ini,fin);

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("IFAUX",23, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IF_STR ::= IFAUX PARENTH1 COND PARENTH2 NT$0 CURLY_BR1 BODY NT$1 ELSE CURLY_BR1 NT$2 BODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		int ettleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).left;
		int ettright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).right;
		Object ett = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-9)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-9)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-9)).value;
		
    String codigo = Generador.gc(Generador.LABEL,null,null,((EtiqRedir)(ett)).fin());
    FCompiler.codigointermedio += codigo;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int ettleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-9)).left;
		int ettright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-9)).right;
		Object ett = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-9)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).value;

    String codigo = Generador.gc(Generador.GOTO,null,null,((EtiqRedir)(ett)).fin());
    int index = FCompiler.codigointermedio.lastIndexOf("L");
    String x = FCompiler.codigointermedio;
    FCompiler.codigointermedio= x.substring(0,index)+codigo+x.substring(index,x.length());

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int ettleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).left;
		int ettright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).right;
		Object ett = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).value;

    String codigo = Generador.gc(Generador.LABEL,null,null,((EtiqRedir)(ett)).ini());
    FCompiler.codigointermedio += codigo;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$0 ::= 
            {
              Object RESULT =null;
		int ettleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)).left;
		int ettright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)).right;
		Object ett = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;

    String codigo = Generador.gc(Generador.IF,lo.toString(),"false",((EtiqRedir)(ett)).ini());
    FCompiler.codigointermedio += codigo;
    System.out.println("ESTOy creando el if con el generador");

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CTRL_STR ::= IF_STR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CTRL_STR ::= LOOP_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FEATURE_WORD ::= SURVEILLANCE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FEATURE_WORD ::= STRESS PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FEATURE_WORD ::= STABILITY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FEATURE_WORD ::= SOCIABILITY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FEATURE_WORD ::= SENSITIVITY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FEATURE_WORD ::= SELFSUFFICIENCY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FEATURE_WORD ::= SELFCONTROL PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FEATURE_WORD ::= REASONING PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FEATURE_WORD ::= PRIVACY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FEATURE_WORD ::= PERFECTIONISM PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FEATURE_WORD ::= OPENNESSTOCHANGE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FEATURE_WORD ::= LIVELINESS PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FEATURE_WORD ::= INDEPENDENCE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FEATURE_WORD ::= HARDNESS PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FEATURE_WORD ::= DOMINANCE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FEATURE_WORD ::= DARE PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FEATURE_WORD ::= CARETOSTANDARDS PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FEATURE_WORD ::= ANXIETY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FEATURE_WORD ::= APPREHESION PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FEATURE_WORD ::= AFFABILITY PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FEATURE_WORD ::= ABSTRACTION PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
if(val!=null){
        String t= Generador.nuevaTemp();
        FCompiler.codigointermedio += Generador.gc(Generador.ASIG,"@"+val+"."+e,null,t);
        RESULT= t;
       }

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("GFEATURES",37, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		
int SumaFeaturesNodo1=FCompiler.ts.regresarSumaFeatures(i+"");
String t= Generador.nuevaTemp();
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,SumaFeaturesNodo1+"",null,"@"+i+".AMOUNTFEATURES");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,"@"+i+".AMOUNTFEATURES",null,t);
          
int SumaFeaturesNodo2=FCompiler.ts.regresarSumaFeatures(j+"");
String t2= Generador.nuevaTemp();
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,SumaFeaturesNodo2+"",null,"@"+j+".AMOUNTFEATURES");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,"@"+j+".AMOUNTFEATURES",null,t2);

RESULT = parser.generar("SUBS_OPP", t, t2);


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",36, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCT ::= GFEATURES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT =i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FUNCT",29, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCT ::= GSIMILITUDE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT =i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FUNCT",29, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
if(val!=null){
String codigo = Generador.gc(Generador.PRINTGRAPH,null,null,val.toString());
FCompiler.codigointermedio += codigo;
//String codigo = parser.generar("PRINTGRAPH", "", val.toString());
}


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("PGPH",35, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
if(val!=null){
String codigo = Generador.gc(Generador.GNGROUP,null,null,val.toString());
FCompiler.codigointermedio += codigo;
//String codigo = parser.generar("GNGROUP", "", val.toString());
}


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("GNGROUP",34, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
if(val!=null){String codigo = parser.generar("PRINTLN", "", val.toString());}


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("PLN",33, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OUTPUT ::= PGPH 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OUTPUT ::= GNGROUP 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OUTPUT ::= PLN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // READS ::= READSTRING PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
parser.tipoPrint=2;
if(val!=null){String codigo = parser.generar("READ","", val.toString());}

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("READS",32, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // READFEAT ::= READFEATVAL PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
parser.tipoPrint=1;
if(val!=null){String codigo = parser.generar("READ","", val.toString());}

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("READFEAT",31, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INPUT ::= READS 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INPUT",27, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INPUT ::= READFEAT 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INPUT",27, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MAXMIN ::= MIN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MAXMIN ::= MAX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTEN ::= CTRL_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTEN ::= DECLARE_BODY2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTEN ::= DATA_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTEN ::= OUTPUT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTEN ::= INPUT 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCES ::= SENTEN SENTENCES 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTENCES",26, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCES ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("SENTENCES",26, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BODY ::= SENTEN BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MAIN_BODY ::= SENTEN MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MAIN_BODY ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-40)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-40)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-40)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-38)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-38)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-38)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-36)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-36)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-36)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-34)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-34)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-34)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-32)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-32)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-32)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-30)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-30)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-30)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-28)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-28)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-28)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-26)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-26)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-26)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-24)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-24)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-24)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-22)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-22)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-22)).value;
		int e11left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-20)).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-20)).right;
		Object e11 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-20)).value;
		int e12left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-18)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-18)).right;
		Object e12 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-18)).value;
		int e13left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-16)).left;
		int e13right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-16)).right;
		Object e13 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-16)).value;
		int e14left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-14)).left;
		int e14right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-14)).right;
		Object e14 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-14)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-12)).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-12)).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-12)).value;
		int e16left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-10)).left;
		int e16right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-10)).right;
		Object e16 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-10)).value;
		int e17left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-8)).left;
		int e17right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-8)).right;
		Object e17 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-8)).value;
		int e18left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).left;
		int e18right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).right;
		Object e18 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).value;
		int e19left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).left;
		int e19right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).right;
		Object e19 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).value;
		int e20left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int e20right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e20 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int e21left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int e21right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e21 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
RESULT=e1+","+e2+","+e3+","+e4+","+e5+","+e6+","+e7+","+e8+","+e9+","+e10+","+e11+","+e12+","+e13+","+e14+","+e15+","+e16+","+e17+","+e18+","+e19+","+e20+","+e21;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-40)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
if(val!=null){
String valores[]=e.toString().split(",");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[0]+"",null,"@"+val+".Affability");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[1]+"",null,"@"+val+".Reasoning");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[2]+"",null,"@"+val+".Stability");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[3]+"",null,"@"+val+".Dominance");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[4]+"",null,"@"+val+".Liveliness");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[5]+"",null,"@"+val+".CareToStandards");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[6]+"",null,"@"+val+".Dare");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[7]+"",null,"@"+val+".Sensitivity");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[8]+"",null,"@"+val+".Surveillance");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[9]+"",null,"@"+val+".Abstraction");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[10]+"",null,"@"+val+".Privacy");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[11]+"",null,"@"+val+".apprehension");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[12]+"",null,"@"+val+".OpennessToChange");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[13]+"",null,"@"+val+".SelfSufficiency");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[14]+"",null,"@"+val+".Perfectionism");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[15]+"",null,"@"+val+".Tension");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[16]+"",null,"@"+val+".Sociability");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[17]+"",null,"@"+val+".Anxiety");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[18]+"",null,"@"+val+".Hardness");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[19]+"",null,"@"+val+".Independence");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[20]+"",null,"@"+val+".SelfControl");
            
}
RESULT=val;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-8)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARRAYVAL ::= STRINGVAL COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
RESULT=e+","+o;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARRAYVAL ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
if(val!=null){
String valores[]=e.toString().split(",");
System.out.println("tamaño"+valores.length);
    for(int f=0; f<=valores.length-1;f++){
       FCompiler.codigointermedio += Generador.gc(Generador.ASIG,valores[f]+"",null,"@"+val+".["+f+"]"); 
    }
}

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
if(val!=null){
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,"@"+j,null,"@"+val+".Features");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,e.toString(),null,"@"+val+".Name");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,d.toString(),null,"@"+val+".Job");
}

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-12)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-11)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		
if(val!=null){
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,"@"+j,null,"@"+val+".FEATURES");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,e+"",null,"@"+val+".MAXMIN");
FCompiler.codigointermedio += Generador.gc(Generador.ASIG,"@"+d,null,"@"+val+".JOBS");
}

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-12)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DATA_STR ::= GROUP_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_STR",43, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DATA_STR ::= FEATURES_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_STR",43, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DATA_STR ::= ARRAYSTRING_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_STR",43, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DATA_STR ::= NODE_STR 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_STR",43, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DEC ::= DATA_TYPE ID 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INTVAL ::= FUNCT 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    RESULT=g;
 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INTVAL",40, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INTVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          parser.valorActual=identificador.valor.toString();
          parser.valorActual=identificador.valor;
          RESULT=identificador.valor;


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INTVAL",40, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INTVAL ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		 RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("INTVAL",40, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // T ::= PARENTH1 EXPNUM PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		
        RESULT =i;
    
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("T",44, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // T ::= INTVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		 RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("T",44, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPNUM ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPNUM ::= EXPNUM SUBS_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPNUM ::= error SUBS_OP T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPNUM ::= EXPNUM ADD_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPNUM ::= EXPNUM error T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Addition/Substraction operator expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPNUM ::= error ADD_OP T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: numeric expression expected. Line: "+(eleft+1)+", column: "+eright+".")); 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPNUM ::= EXPNUM ADD_OP T 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
       System.out.println("ESTO ES LA PRUEBA DEL MAS INTERMEDIO"+E);
    RESULT = parser.generar("ADD_OP", e1.toString(), e2.toString());
    
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPNUM ::= EXPNUM SUBS_OP T 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    System.out.println("ESTO ES LA PRUEBA DEL MENOS INTERMEDIO"+E);
    RESULT = parser.generar("SUBS_OPP", e1.toString(), e2.toString());  
    
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPNUM ::= T 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        RESULT = e1;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // F ::= PARENTH1 COND PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		

RESULT=i; 


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F ::= EXPNUM OP_REL EXPNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		

RESULT = parser.generar("OP_REL", i.toString(), f.toString());


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F ::= BOOLEANVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		 

RESULT=i; 


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND ::= F 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		

RESULT=i;


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND ::= F OP_LOG COND 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    if(t.equals("%%")){
    parser.op_log=2;
    }else{
     parser.op_log=1;
    }
    RESULT = parser.generar("OP_LOG", i.toString(), f.toString());


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP_REL ::= GREATER_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=6;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_REL ::= LESS_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=5;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP_REL ::= NOT_EQUAL_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=4;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_REL ::= LESS_EQUAL_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=3;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_REL ::= GREATER_EQUAL_OP 
            {
              Object RESULT =null;
		
parser.op_relacional=2;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_REL ::= EQUAL_OP 
            {
              Object RESULT =null;
		 
parser.op_relacional=1;
 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_LOG ::= OR_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
RESULT=i;
//parser.op_log=2;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_LOG ::= AND_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
RESULT=i;
//parser.op_log=1;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_ARIT ::= SUBS_OP 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_ARIT ::= ADD_OP 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BOOLEANVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          parser.valorActual=identificador.valor.toString();
          parser.valorActual=identificador.valor;
          RESULT=identificador.valor;


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOLEANVAL ::= FALSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BOOLEANVAL ::= TRUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STRINGVALAUX ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          parser.valorActual=identificador.valor.toString();
          parser.valorActual=identificador.valor;
          RESULT=identificador.valor;


              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",39, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STRINGVALAUX ::= STRING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
        String sincomillas= f.replace('"','-');
        sincomillas=sincomillas.replaceAll("-","");
        RESULT=sincomillas;
        parser.valorActual= f;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",39, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRINGVAL ::= STRINGVALAUX ADD_OP STRINGVAL 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    if(s1!=null && s2 !=null){
        String t= Generador.nuevaTemp();
        FCompiler.codigointermedio += Generador.gc(Generador.ADD_OP,s1.toString(),s2.toString(),t);
        RESULT=t;
    }

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STRINGVAL ::= STRINGVALAUX 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    if(s1!=null){
        RESULT=s1.toString();
    }

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= COND 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= PARENTH1 EXP PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= EXPNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= FALSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= TRUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		RESULT=i;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		 RESULT=i; 
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		  
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          parser.valorActual=identificador.valor.toString();
          parser.valorActual=identificador.valor;
          RESULT=identificador.valor; 

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATA_TYPE ::= BOOLEAN_WORD 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATA_TYPE ::= INT_WORD 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATA_TYPE ::= STRING_WORD 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASSIG ::= ID ASSIG_OP EXP 
            {
              Object RESULT =null;
		int miIdleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).left;
		int miIdright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).right;
		String miId = (String)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.peek()).value;
		
    RESULT = parser.generarSinTemp("ASIG", v.toString(), miId.toString());
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARE_BODY2 ::= DATA_TYPE ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARE_BODY2 ::= ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARE_BODY2 ::= DEC SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARE_BODY ::= ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_BODY ::= DATA_TYPE ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_BODY ::= DEC SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARE_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          return CUP$Intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)).value;
		RESULT = start_val;
              CUP$Intermedio$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Intermedio$stack.elementAt(CUP$Intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$Intermedio$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Intermedio$parser.done_parsing();
          return CUP$Intermedio$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

