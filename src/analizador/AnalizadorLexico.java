/* The following code was generated by JFlex 1.6.1 */

/* --------------------Seccion de codigo de usuario---------------------- */
package analizador;

import java.util.ArrayList;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Cesar/OneDrive/Documents/NetBeansProjects/GPlusCompiler/src/analizador/alexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\2\0\1\3\22\0\1\4\1\55\1\12\2\11\1\57"+
    "\1\56\1\10\1\45\1\46\1\6\1\60\1\63\1\7\1\62\1\5"+
    "\12\2\1\0\1\61\1\54\1\44\1\53\1\10\1\0\1\24\1\20"+
    "\1\31\1\37\1\23\1\32\1\30\1\35\1\15\2\1\1\22\1\40"+
    "\1\16\1\21\1\34\1\1\1\27\1\26\1\17\1\42\1\41\1\43"+
    "\1\36\1\33\1\1\1\51\1\0\1\52\1\10\2\0\1\24\1\20"+
    "\1\31\1\37\1\23\1\32\1\30\1\35\1\15\2\1\1\22\1\40"+
    "\1\16\1\21\1\34\1\1\1\27\1\26\1\17\1\42\1\41\1\43"+
    "\1\36\1\33\1\1\1\47\1\1\1\50\43\0\1\11\6\0\1\10"+
    "\3\0\1\10\3\0\1\10\3\0\1\10\2\0\1\11\7\0\1\10"+
    "\1\0\1\11\2\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\1\11\1\11\3\0\1\11\2\0\1\10\4\0\1\11\1\0"+
    "\1\10\1\0\1\11\1\0\1\10\1\0\1\11\1\0\1\11\2\0"+
    "\1\10\3\0\1\11\1\0\1\10\1\10\62\0\2\14\115\0\1\25"+
    "\u1e9c\0\2\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udff2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\3\1"+
    "\10\2\1\1\11\2\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\3\1\1\17\1\20\1\21"+
    "\1\22\4\23\1\24\1\0\1\25\1\0\1\26\1\2"+
    "\1\26\5\2\1\0\10\2\4\0\20\2\1\0\2\2"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\35\1\0"+
    "\1\23\1\25\1\36\1\0\1\36\1\2\1\37\1\2"+
    "\1\40\3\2\1\0\2\2\1\0\2\2\1\0\4\2"+
    "\6\0\16\2\1\0\5\2\2\41\1\0\1\2\1\42"+
    "\1\0\1\43\1\0\1\2\1\44\1\45\2\2\1\0"+
    "\1\2\1\46\2\47\1\0\1\2\1\0\4\2\7\0"+
    "\7\2\1\0\3\2\1\0\5\2\1\0\2\2\2\0"+
    "\3\2\1\0\2\2\1\50\2\51\1\43\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\10\0\10\2"+
    "\1\0\1\2\1\0\3\2\1\0\2\2\1\52\2\2"+
    "\2\53\1\2\2\0\3\2\1\0\2\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\2\2\1\0\1\54\1\55\5\0\1\2\1\54"+
    "\1\55\5\2\1\0\1\2\1\0\3\2\1\0\5\2"+
    "\3\0\4\2\1\0\2\2\1\0\1\2\1\56\1\0"+
    "\1\2\1\0\1\2\2\57\1\0\1\2\1\0\1\2"+
    "\1\0\2\2\6\0\6\2\1\0\1\2\1\0\3\2"+
    "\1\0\2\2\1\0\3\2\1\60\1\0\1\61\1\60"+
    "\1\2\1\61\1\0\1\2\1\0\1\2\1\62\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\2\2\6\0\6\2\1\0\1\2\1\0"+
    "\3\2\1\0\2\2\1\0\1\2\2\63\1\0\1\2"+
    "\1\0\1\2\2\64\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\65\5\0\1\65\5\2\2\66"+
    "\1\0\3\2\1\0\2\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\67\1\0\1\2\1\0\1\2\2\70"+
    "\1\0\1\2\1\0\1\2\2\71\1\0\1\2\5\0"+
    "\5\2\2\72\2\2\1\0\2\2\1\0\1\2\1\0"+
    "\1\2\2\73\1\0\1\2\1\0\1\2\2\74\2\75"+
    "\1\0\1\2\1\76\1\77\1\0\1\100\1\0\1\76"+
    "\1\77\1\2\1\100\1\2\1\101\1\2\1\0\1\2"+
    "\2\102\1\0\1\2\1\0\1\2\2\103\1\0\1\2"+
    "\2\104\1\0\1\105\1\2\1\105\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\106\2\107\1\0\1\2\2\110\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\111\2\112\2\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\64\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\64\0\64\0\64\0\64\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\64\0\u0784\0\u0138\0\u07b8\0\64\0\u07ec\0\150\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0"+
    "\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\64\0\64\0\64\0\64"+
    "\0\u0138\0\u0138\0\u071c\0\u0fa4\0\u0fd8\0\u100c\0\64\0\64"+
    "\0\u1040\0\150\0\u1074\0\150\0\u10a8\0\150\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\64\0\150"+
    "\0\u18fc\0\u1930\0\150\0\u1964\0\u06e8\0\u1998\0\u19cc\0\150"+
    "\0\150\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\150\0\64\0\150"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc"+
    "\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c"+
    "\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c"+
    "\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc"+
    "\0\u22f0\0\u2324\0\150\0\64\0\150\0\64\0\u2358\0\u238c"+
    "\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c"+
    "\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc"+
    "\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c"+
    "\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c"+
    "\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\150\0\u2b10\0\u2b44\0\64"+
    "\0\150\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0"+
    "\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50"+
    "\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0"+
    "\0\u3024\0\u3058\0\64\0\64\0\u308c\0\u30c0\0\u30f4\0\u3128"+
    "\0\u315c\0\u3190\0\150\0\150\0\u31c4\0\u31f8\0\u322c\0\u3260"+
    "\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400"+
    "\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0"+
    "\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740"+
    "\0\u3774\0\150\0\u37a8\0\u37dc\0\u3810\0\u3844\0\64\0\150"+
    "\0\u3878\0\u38ac\0\u38e0\0\u3914\0\u3948\0\u397c\0\u39b0\0\u39e4"+
    "\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84"+
    "\0\u3bb8\0\u3bec\0\u3c20\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24"+
    "\0\u3d58\0\u3d8c\0\u3dc0\0\u3df4\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4"+
    "\0\64\0\u3ef8\0\64\0\150\0\u3f2c\0\150\0\u3f60\0\u3f94"+
    "\0\u3fc8\0\u3ffc\0\150\0\u4030\0\u4064\0\u4098\0\u40cc\0\u4100"+
    "\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204\0\u4238\0\u426c\0\u42a0"+
    "\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4\0\u43d8\0\u440c\0\u4440"+
    "\0\u4474\0\u44a8\0\u44dc\0\u4510\0\u4544\0\u4578\0\u45ac\0\u45e0"+
    "\0\u4614\0\u4648\0\u467c\0\u46b0\0\u46e4\0\u4718\0\u474c\0\64"+
    "\0\150\0\u4780\0\u47b4\0\u47e8\0\u481c\0\64\0\150\0\u4850"+
    "\0\u4884\0\u48b8\0\u48ec\0\u4920\0\u4954\0\u4988\0\u49bc\0\u49f0"+
    "\0\u4a24\0\u4a58\0\u4a8c\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c\0\64"+
    "\0\u4b90\0\u4bc4\0\u4bf8\0\u4c2c\0\u4c60\0\150\0\u4c94\0\u4cc8"+
    "\0\u4cfc\0\u4d30\0\u4d64\0\64\0\150\0\u4d98\0\u4dcc\0\u4e00"+
    "\0\u4e34\0\u4e68\0\u4e9c\0\u4ed0\0\u4f04\0\u4f38\0\u4f6c\0\u4fa0"+
    "\0\u4fd4\0\u5008\0\64\0\150\0\u503c\0\u5070\0\u50a4\0\u50d8"+
    "\0\64\0\150\0\u510c\0\u5140\0\u5174\0\u51a8\0\64\0\150"+
    "\0\u51dc\0\u5210\0\u5244\0\u5278\0\u52ac\0\u52e0\0\u5314\0\u5348"+
    "\0\u537c\0\u53b0\0\u53e4\0\u5418\0\64\0\150\0\u544c\0\u5480"+
    "\0\u54b4\0\u54e8\0\u551c\0\u5550\0\u5584\0\u55b8\0\u55ec\0\64"+
    "\0\150\0\u5620\0\u5654\0\u5688\0\u56bc\0\64\0\150\0\64"+
    "\0\150\0\u56f0\0\u5724\0\64\0\64\0\u5758\0\64\0\u578c"+
    "\0\150\0\150\0\u57c0\0\150\0\u57f4\0\150\0\u5828\0\u585c"+
    "\0\u5890\0\64\0\150\0\u58c4\0\u58f8\0\u592c\0\u5960\0\64"+
    "\0\150\0\u5994\0\u59c8\0\64\0\150\0\u59fc\0\64\0\u5a30"+
    "\0\150\0\u5a64\0\u5a98\0\u5acc\0\u5b00\0\u5b34\0\u5b68\0\u5b9c"+
    "\0\u5bd0\0\u5c04\0\u5c38\0\u5c6c\0\150\0\64\0\150\0\u5ca0"+
    "\0\u5cd4\0\64\0\150\0\u5d08\0\u5d3c\0\u5d70\0\u5da4\0\u5dd8"+
    "\0\u5e0c\0\u5e40\0\u5e74\0\64\0\150\0\64\0\150\0\64"+
    "\0\150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\2\1\7\1\2"+
    "\1\10\1\11\1\10\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\1\3\1\33\1\34"+
    "\3\3\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\65\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\16\3\11\0\3\10\5\0\1\10\1\4"+
    "\2\0\1\10\3\0\3\10\1\0\10\10\1\0\16\10"+
    "\11\0\3\10\5\0\2\55\1\0\1\56\1\57\1\60"+
    "\1\0\1\56\2\55\1\10\1\0\10\55\1\0\16\55"+
    "\11\56\3\55\1\56\12\0\1\61\55\0\2\10\2\0"+
    "\1\10\3\0\3\10\1\0\10\10\1\0\16\10\11\0"+
    "\3\10\5\0\2\11\1\0\1\62\1\10\3\0\1\10"+
    "\1\63\1\10\1\0\10\11\1\0\16\11\11\0\3\10"+
    "\22\0\1\64\13\0\1\65\32\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\66\6\3\1\0\4\3"+
    "\1\67\11\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\4\3\1\70\1\3\1\71\1\3"+
    "\1\0\16\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\1\3\1\72\14\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\4\3\1\73\3\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\6\3\1\74\7\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\75\1\76\3\3\1\77"+
    "\3\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\5\3\1\100\2\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\1\3\1\101\1\3\1\102\4\3\1\0"+
    "\1\3\1\103\2\3\1\104\1\3\1\105\7\3\11\0"+
    "\3\10\23\0\1\106\1\0\1\107\1\0\1\110\16\0"+
    "\1\111\22\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\112\1\3\1\113\1\3\1\114\1\3\1\0"+
    "\14\3\1\115\1\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\116\1\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\117\1\3\1\0\1\3\1\120"+
    "\14\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\7\3\1\121\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\6\3"+
    "\1\122\1\123\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\124\1\3"+
    "\1\0\1\3\1\125\14\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\126\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\4\3\1\127\1\3\1\130\1\131\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\132\1\133\6\3\1\134\1\0\16\3\11\0"+
    "\3\10\50\0\1\135\63\0\1\136\63\0\1\137\20\0"+
    "\2\10\2\0\1\10\3\0\3\10\1\0\10\10\1\0"+
    "\16\10\1\140\10\0\3\10\5\0\2\10\2\0\1\10"+
    "\3\0\3\10\1\0\10\10\1\0\16\10\11\0\1\10"+
    "\1\141\1\10\5\0\2\10\2\0\1\10\3\0\3\10"+
    "\1\0\10\10\1\0\16\10\11\0\2\10\1\142\5\0"+
    "\2\55\1\0\1\56\1\55\1\56\1\0\1\56\2\55"+
    "\1\10\1\0\10\55\1\0\16\55\11\56\3\55\1\56"+
    "\4\0\2\56\1\0\3\56\1\0\3\56\2\0\10\56"+
    "\1\0\33\56\4\0\2\143\1\0\1\144\1\143\1\144"+
    "\1\0\1\144\2\143\1\10\1\0\10\143\1\0\16\143"+
    "\11\144\3\143\1\144\3\0\1\145\2\60\1\145\2\60"+
    "\1\146\1\145\3\60\2\145\10\60\1\145\33\60\3\145"+
    "\1\0\2\62\1\0\1\62\5\0\1\147\2\0\10\62"+
    "\1\0\16\62\37\0\1\150\17\0\1\151\25\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\2\3\1\152\5\3"+
    "\1\0\11\3\1\153\4\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\2\3\1\154\5\3"+
    "\1\0\11\3\1\155\4\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\15\3"+
    "\1\156\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\14\3\1\157\1\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\4\3\1\160\3\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\161"+
    "\1\3\1\0\16\3\11\0\3\10\45\0\1\162\23\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\13\3\1\163\2\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\4\3\1\164\3\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\165\1\166\15\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\10\3\1\167\5\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\170\1\171"+
    "\15\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\1\3\1\172\14\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\4\3\1\173\11\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\6\3\1\174\7\3\11\0\3\10\30\0\1\175\2\0"+
    "\1\176\65\0\1\177\50\0\1\200\3\0\1\201\70\0"+
    "\1\202\35\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\203\1\0\1\3\1\204\14\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\3\3\1\205\12\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\206\3\3"+
    "\1\207\2\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\210\14\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\211\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\1\3\1\212\1\213\5\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\4\3"+
    "\1\214\3\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\215\14\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\216\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\5\3\1\217\2\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\1\3\1\220\14\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\221\1\222\7\3\1\0\16\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\1\3\1\223\14\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\12\3\1\224\3\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\3\3"+
    "\1\225\12\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\1\3\1\226\14\3"+
    "\11\0\3\10\22\0\1\227\46\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\230\6\3\1\0\16\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\231\1\232\7\3\1\0\10\3\1\233\5\3\11\0"+
    "\3\10\5\0\2\144\1\0\3\144\1\0\3\144\2\0"+
    "\10\144\1\0\33\144\3\0\6\145\1\234\56\145\2\60"+
    "\1\145\1\60\1\235\1\146\1\145\3\60\2\145\10\60"+
    "\1\145\33\60\3\145\23\0\1\236\41\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\237\1\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\240\1\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\241\1\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\5\3\1\242"+
    "\2\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\1\3\1\243\6\3\1\0"+
    "\16\3\11\0\3\10\27\0\1\244\41\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\245\1\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\6\3\1\246\7\3\11\0"+
    "\3\10\27\0\1\247\41\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\250\1\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\251"+
    "\1\252\7\3\1\0\16\3\11\0\3\10\23\0\1\253"+
    "\45\0\2\3\2\0\1\10\3\0\3\10\1\0\2\3"+
    "\1\254\5\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\255\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\7\3\1\256\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\1\3\1\257\14\3\11\0\3\10\24\0\1\260"+
    "\57\0\2\261\5\0\1\262\54\0\2\263\73\0\2\264"+
    "\67\0\1\265\72\0\1\266\23\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\3\3\1\267\4\3\1\0\16\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\261\1\270\5\3\1\271\1\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\263"+
    "\1\272\7\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\264\1\273"+
    "\15\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\4\3\1\274\11\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\13\3\1\275\2\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\276"+
    "\1\277\10\3\1\300\4\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\301\1\3"+
    "\1\0\16\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\302\1\303\3\3\1\304"+
    "\11\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\14\3\1\305\1\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\306\1\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\2\3\1\307"+
    "\5\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\310\1\311\15\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\4\3\1\312\11\3\11\0\3\10"+
    "\22\0\1\313\22\0\1\314\23\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\315\6\3\1\0\13\3"+
    "\1\316\2\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\11\3\1\317\4\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\320\1\321\7\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\5\3\1\322"+
    "\2\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\323\1\3\1\0"+
    "\16\3\11\0\3\10\22\0\1\324\46\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\1\3\1\325\6\3\1\0"+
    "\16\3\11\0\3\10\4\0\5\145\1\326\1\234\55\145"+
    "\34\0\1\327\30\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\6\3\1\330\7\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\6\3"+
    "\1\331\1\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\332\6\3"+
    "\1\0\16\3\11\0\3\10\26\0\1\333\42\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\5\3\1\334\2\3"+
    "\1\0\16\3\11\0\3\10\27\0\1\335\41\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\336\1\3"+
    "\1\0\16\3\11\0\3\10\33\0\1\337\35\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\340\14\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\5\3\1\341\10\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\3\3\1\342\4\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\6\3"+
    "\1\343\1\3\1\0\16\3\11\0\3\10\20\0\2\344"+
    "\64\0\1\345\72\0\2\346\61\0\1\347\53\0\2\350"+
    "\73\0\2\351\2\0\1\352\55\0\1\353\41\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\344\1\354\7\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\1\3\1\355\6\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\346\1\356\15\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\357\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\350\1\360\7\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\351\1\361\2\3\1\362\12\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\363"+
    "\1\3\1\0\16\3\11\0\3\10\25\0\1\364\43\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\4\3\1\365"+
    "\3\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\366\1\367\3\3"+
    "\1\370\11\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\1\3\1\371\14\3"+
    "\11\0\3\10\20\0\2\372\47\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\372\1\373\7\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\374\1\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\6\3\1\375\7\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\2\3\1\376\5\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\14\3\1\377\1\3\11\0"+
    "\3\10\27\0\1\u0100\41\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\u0101\1\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\u0102\1\3\1\0\16\3\11\0\3\10\23\0"+
    "\1\u0103\70\0\1\u0104\40\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\u0105\5\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\u0106\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u0107\6\3"+
    "\1\0\16\3\11\0\3\10\22\0\1\u0108\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u0109\6\3"+
    "\1\0\16\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\u010a\1\0\16\3\11\0"+
    "\3\10\27\0\1\u010b\41\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\u010c\1\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\u010d\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\u010e\1\3"+
    "\1\0\16\3\11\0\3\10\20\0\2\u010f\47\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u010f\1\u0110\7\3\1\0"+
    "\16\3\11\0\3\10\23\0\1\u0111\45\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\2\3\1\u0112\5\3\1\0"+
    "\16\3\11\0\3\10\30\0\1\u0113\40\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\7\3\1\u0114\1\0\16\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\u0115\1\u0116\15\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\u0117\1\u0118\7\3"+
    "\1\0\16\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\7\3\1\u0119\6\3"+
    "\11\0\3\10\26\0\1\u011a\71\0\1\u011b\60\0\2\u011c"+
    "\55\0\1\u011d\62\0\1\u011e\106\0\1\u011f\42\0\1\u0120"+
    "\56\0\2\u0121\47\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\5\3\1\u0122\2\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\2\3\1\u0123\13\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\u011c\1\u0124"+
    "\15\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\3\3\1\u0125\4\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\u0126\5\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\14\3\1\u0127\1\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\4\3\1\u0128\3\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u0121\1\u0129\7\3\1\0\16\3\11\0\3\10"+
    "\22\0\1\u012a\46\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\1\3\1\u012b\6\3\1\0\16\3\11\0\3\10"+
    "\23\0\1\u012c\45\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\2\3\1\u012d\5\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\6\3"+
    "\1\u012e\1\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\u012f\1\0"+
    "\16\3\11\0\3\10\44\0\1\u0130\24\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\12\3\1\u0131"+
    "\3\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\7\3\1\u0132\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\4\3"+
    "\1\u0133\3\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\u0134\14\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\3\3\1\u0135\12\3"+
    "\11\0\3\10\26\0\1\u0136\5\0\1\u0137\64\0\1\u0138"+
    "\33\0\2\3\2\0\1\10\3\0\3\10\1\0\5\3"+
    "\1\u0139\2\3\1\0\2\3\1\u013a\13\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\3\3\1\u013b\12\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\u013c\1\3"+
    "\1\0\16\3\11\0\3\10\30\0\1\u013d\40\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\u013e\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\1\3\1\u013f\14\3\11\0"+
    "\3\10\22\0\1\u0140\46\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\1\3\1\u0141\6\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\1\3\1\u0142\6\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\u0143"+
    "\1\u0144\15\3\11\0\3\10\22\0\1\u0145\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u0146\6\3"+
    "\1\0\16\3\11\0\3\10\37\0\1\u0147\31\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\5\3"+
    "\1\u0148\10\3\11\0\3\10\35\0\1\u0149\33\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\3\3"+
    "\1\u014a\12\3\11\0\3\10\23\0\1\u014b\45\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\2\3\1\u014c\5\3"+
    "\1\0\16\3\11\0\3\10\26\0\1\u014d\42\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\5\3\1\u014e\2\3"+
    "\1\0\16\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\u014f\1\3\1\0\16\3"+
    "\11\0\3\10\20\0\2\u0150\62\0\2\u0151\62\0\2\u0152"+
    "\100\0\1\u0153\47\0\1\u0154\67\0\1\u0155\42\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u0150\1\u0156\7\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u0151\1\u0157\7\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\u0152\1\u0158"+
    "\7\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\4\3\1\u0159"+
    "\11\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\1\3\1\u015a\6\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\5\3\1\u015b\2\3\1\0\16\3\11\0\3\10\20\0"+
    "\2\u015c\47\0\2\3\2\0\1\10\3\0\3\10\1\u015c"+
    "\1\u015d\7\3\1\0\16\3\11\0\3\10\33\0\1\u015e"+
    "\35\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\1\3\1\u015f\14\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\u0160\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\u0161\5\3\1\0\16\3\11\0"+
    "\3\10\20\0\2\u0162\47\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u0162\1\u0163\7\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\2\3"+
    "\1\u0164\5\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\u0165\1\u0166"+
    "\15\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\u0167\1\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\u0168\5\3\1\0\16\3\11\0\3\10\22\0"+
    "\1\u0169\74\0\1\u016a\67\0\1\u016b\31\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\1\3\1\u016c\6\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\1\3\1\u016d\14\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\5\3\1\u016e\10\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\u016f"+
    "\1\u0170\15\3\11\0\3\10\22\0\1\u0171\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u0172\6\3"+
    "\1\0\16\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\u0173\1\3\1\0\16\3"+
    "\11\0\3\10\43\0\1\u0174\25\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\11\3\1\u0175\4\3"+
    "\11\0\3\10\31\0\2\u0176\36\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\u0176\1\u0177\15\3\11\0"+
    "\3\10\27\0\1\u0178\41\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\u0179\1\3\1\0\16\3\11\0"+
    "\3\10\23\0\1\u017a\45\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\u017b\5\3\1\0\16\3\11\0"+
    "\3\10\33\0\1\u017c\35\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\1\3\1\u017d\14\3\11\0"+
    "\3\10\20\0\2\u017e\47\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u017e\1\u017f\7\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\1\3"+
    "\1\u0180\6\3\1\0\16\3\11\0\3\10\23\0\1\u0181"+
    "\66\0\1\u0182\102\0\1\u0183\54\0\1\u0184\50\0\1\u0185"+
    "\66\0\1\u0186\42\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\2\3\1\u0187\5\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\5\3"+
    "\1\u0188\2\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\13\3"+
    "\1\u0189\2\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\4\3\1\u018a\11\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\2\3\1\u018b\5\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\5\3"+
    "\1\u018c\2\3\1\0\16\3\11\0\3\10\22\0\1\u018d"+
    "\46\0\2\3\2\0\1\10\3\0\3\10\1\0\1\3"+
    "\1\u018e\6\3\1\0\16\3\11\0\3\10\20\0\2\u018f"+
    "\47\0\2\3\2\0\1\10\3\0\3\10\1\u018f\1\u0190"+
    "\7\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\2\3\1\u0191\5\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\u0192\1\3\1\0\16\3\11\0"+
    "\3\10\26\0\1\u0193\42\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\5\3\1\u0194\2\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\14\3\1\u0195\1\3\11\0\3\10\23\0"+
    "\1\u0196\45\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\u0197\5\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\u0198"+
    "\1\u0199\15\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\u019a\1\u019b\7\3\1\0\16\3\11\0"+
    "\3\10\30\0\1\u019c\40\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\7\3\1\u019d\1\0\16\3\11\0\3\10"+
    "\31\0\2\u019e\36\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\u019e\1\u019f\15\3\11\0\3\10\35\0"+
    "\1\u01a0\33\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\3\3\1\u01a1\12\3\11\0\3\10\27\0"+
    "\1\u01a2\41\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\u01a3\1\3\1\0\16\3\11\0\3\10\23\0"+
    "\1\u01a4\45\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\u01a5\5\3\1\0\16\3\11\0\3\10\31\0"+
    "\2\u01a6\36\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\u01a6\1\u01a7\15\3\11\0\3\10\20\0\2\u01a8"+
    "\47\0\2\3\2\0\1\10\3\0\3\10\1\u01a8\1\u01a9"+
    "\7\3\1\0\16\3\11\0\3\10\20\0\2\u01aa\47\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\u01aa\1\u01ab\7\3"+
    "\1\0\16\3\11\0\3\10\23\0\1\u01ac\45\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\2\3\1\u01ad\5\3"+
    "\1\0\16\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\u01ae\1\u01af\15\3\11\0"+
    "\3\10\37\0\1\u01b0\44\0\2\u01b1\62\0\2\u01b2\62\0"+
    "\2\u01b3\75\0\1\u01b4\60\0\1\u01b5\40\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\5\3\1\u01b6"+
    "\10\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u01b1\1\u01b7\7\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\u01b2\1\u01b8"+
    "\7\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\u01b3\1\u01b9\7\3\1\0\16\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\1\3\1\u01ba\14\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\7\3"+
    "\1\u01bb\1\0\16\3\11\0\3\10\34\0\1\u01bc\34\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\2\3\1\u01bd\13\3\11\0\3\10\22\0\1\u01be\46\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\1\3\1\u01bf"+
    "\6\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\13\3\1\u01c0"+
    "\2\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\2\3\1\u01c1\13\3\11\0"+
    "\3\10\20\0\2\u01c2\47\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u01c2\1\u01c3\7\3\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\1\3\1\u01c4\14\3\11\0\3\10\30\0\1\u01c5"+
    "\40\0\2\3\2\0\1\10\3\0\3\10\1\0\7\3"+
    "\1\u01c6\1\0\16\3\11\0\3\10\25\0\1\u01c7\43\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\4\3\1\u01c8"+
    "\3\3\1\0\16\3\11\0\3\10\40\0\1\u01c9\30\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\6\3\1\u01ca\7\3\11\0\3\10\27\0\1\u01cb\41\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\u01cc"+
    "\1\3\1\0\16\3\11\0\3\10\22\0\1\u01cd\46\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\1\3\1\u01ce"+
    "\6\3\1\0\16\3\11\0\3\10\25\0\1\u01cf\43\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\4\3\1\u01d0"+
    "\3\3\1\0\16\3\11\0\3\10\31\0\2\u01d1\36\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\u01d1"+
    "\1\u01d2\15\3\11\0\3\10\25\0\1\u01d3\43\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\4\3\1\u01d4\3\3"+
    "\1\0\16\3\11\0\3\10\22\0\1\u01d5\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u01d6\6\3"+
    "\1\0\16\3\11\0\3\10\37\0\1\u01d7\31\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\5\3"+
    "\1\u01d8\10\3\11\0\3\10\20\0\2\u01d9\47\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u01d9\1\u01da\7\3\1\0"+
    "\16\3\11\0\3\10\23\0\1\u01db\63\0\1\u01dc\75\0"+
    "\1\u01dd\53\0\1\u01de\60\0\1\u01df\46\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\2\3\1\u01e0\5\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\u01e1\5\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\3\3\1\u01e2\12\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\4\3\1\u01e3"+
    "\3\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\1\3\1\u01e4\6\3\1\0"+
    "\16\3\11\0\3\10\34\0\1\u01e5\34\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\2\3\1\u01e6"+
    "\13\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\7\3\1\u01e7\1\0\16\3\11\0\3\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\1\3\1\u01e8\14\3\11\0\3\10\23\0\1\u01e9"+
    "\45\0\2\3\2\0\1\10\3\0\3\10\1\0\2\3"+
    "\1\u01ea\5\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\u01eb\1\3"+
    "\1\0\16\3\11\0\3\10\22\0\1\u01ec\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u01ed\6\3"+
    "\1\0\16\3\11\0\3\10\22\0\1\u01ee\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u01ef\6\3"+
    "\1\0\16\3\11\0\3\10\41\0\1\u01f0\27\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\7\3"+
    "\1\u01f1\6\3\11\0\3\10\35\0\1\u01f2\33\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\3\3"+
    "\1\u01f3\12\3\11\0\3\10\35\0\1\u01f4\33\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\3\3"+
    "\1\u01f5\12\3\11\0\3\10\22\0\1\u01f6\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u01f7\6\3"+
    "\1\0\16\3\11\0\3\10\34\0\1\u01f8\34\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\2\3"+
    "\1\u01f9\13\3\11\0\3\10\25\0\1\u01fa\43\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\4\3\1\u01fb\3\3"+
    "\1\0\16\3\11\0\3\10\37\0\1\u01fc\63\0\1\u01fd"+
    "\44\0\2\u01fe\70\0\1\u01ff\72\0\1\u0200\33\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\5\3"+
    "\1\u0201\10\3\11\0\3\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\5\3\1\u0202\10\3"+
    "\11\0\3\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\u01fe\1\u0203\7\3\1\0\16\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\5\3\1\u0204"+
    "\2\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\3\3\1\u0205"+
    "\12\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\5\3\1\u0206\2\3\1\0\16\3\11\0"+
    "\3\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\4\3\1\u0207\3\3\1\0\16\3\11\0\3\10\46\0"+
    "\1\u0208\22\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\14\3\1\u0209\1\3\11\0\3\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\u020a"+
    "\1\u020b\15\3\11\0\3\10\43\0\1\u020c\25\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\11\3"+
    "\1\u020d\4\3\11\0\3\10\20\0\2\u020e\47\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u020e\1\u020f\7\3\1\0"+
    "\16\3\11\0\3\10\27\0\1\u0210\41\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\u0211\1\3\1\0"+
    "\16\3\11\0\3\10\41\0\1\u0212\27\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\7\3\1\u0213"+
    "\6\3\11\0\3\10\22\0\1\u0214\46\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\1\3\1\u0215\6\3\1\0"+
    "\16\3\11\0\3\10\27\0\1\u0216\63\0\1\u0217\41\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\u0218"+
    "\1\3\1\0\16\3\11\0\3\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\u0219\1\3\1\0"+
    "\16\3\11\0\3\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\14\3\1\u021a\1\3\11\0"+
    "\3\10\43\0\1\u021b\25\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\11\3\1\u021c\4\3\11\0"+
    "\3\10\30\0\1\u021d\40\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\7\3\1\u021e\1\0\16\3\11\0\3\10"+
    "\31\0\2\u021f\36\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\u021f\1\u0220\15\3\11\0\3\10\30\0"+
    "\1\u0221\40\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\u0222\1\0\16\3\11\0\3\10\22\0\1\u0223"+
    "\46\0\2\3\2\0\1\10\3\0\3\10\1\0\1\3"+
    "\1\u0224\6\3\1\0\16\3\11\0\3\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\6\3"+
    "\1\u0225\7\3\11\0\3\10\27\0\1\u0226\41\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\u0227\1\3"+
    "\1\0\16\3\11\0\3\10\33\0\1\u0228\35\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\u0229\14\3\11\0\3\10\44\0\1\u022a\24\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\12\3"+
    "\1\u022b\3\3\11\0\3\10\22\0\1\u022c\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u022d\6\3"+
    "\1\0\16\3\11\0\3\10\35\0\1\u022e\33\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\3\3"+
    "\1\u022f\12\3\11\0\3\10\43\0\1\u0230\25\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\11\3"+
    "\1\u0231\4\3\11\0\3\10\34\0\1\u0232\34\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\2\3"+
    "\1\u0233\13\3\11\0\3\10\37\0\1\u0234\31\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\5\3"+
    "\1\u0235\10\3\11\0\3\10\31\0\2\u0236\36\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\u0236\1\u0237"+
    "\15\3\11\0\3\10\27\0\1\u0238\41\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\u0239\1\3\1\0"+
    "\16\3\11\0\3\10\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\30\1\6\11\5\1\4\11"+
    "\4\1\1\11\1\0\1\1\1\0\1\11\7\1\1\0"+
    "\10\1\4\0\20\1\1\0\2\1\4\11\4\1\1\0"+
    "\1\1\2\11\1\0\10\1\1\0\2\1\1\0\2\1"+
    "\1\0\4\1\6\0\16\1\1\0\5\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\5\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\4\1\7\0\7\1"+
    "\1\0\3\1\1\0\5\1\1\0\2\1\2\0\3\1"+
    "\1\0\3\1\1\11\1\1\1\11\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\10\0\10\1\1\0"+
    "\1\1\1\0\3\1\1\0\5\1\1\11\2\1\2\0"+
    "\3\1\1\0\2\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\11\5\0\10\1\1\0\1\1\1\0\3\1\1\0"+
    "\5\1\3\0\4\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\6\0\6\1\1\0\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\3\1\1\11\1\0\1\11"+
    "\3\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\6\0\6\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\5\0\6\1\1\11\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\5\0\5\1\1\11\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\2\11\1\0\1\11\1\0\7\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\11\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexema;
int contador;
ArrayList<entradaTS> TablaSimbolos;
ArrayList<Error1> ManejadorDeErrores;

    /* Generamos un java_cup.Symbol para guardar el tipo de token encontrado*/
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado junto con su valor*/
    private Symbol symbol(int type,Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
  TablaSimbolos= new ArrayList<entradaTS>();
ManejadorDeErrores= new ArrayList<Error1>();
contador=0;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 338) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        //System.out.println("Fin del archivo de codigo");
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ManejadorDeErrores.add(new Error1("Lexico",yyline,yycolumn,yytext()));
return symbol(sym.ERRORLEX,yytext());
            }
          case 76: break;
          case 2: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext()+" ID")); 
return symbol(sym.ID,yytext());
            }
          case 77: break;
          case 3: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NUM,new Integer(yytext()));
            }
          case 78: break;
          case 4: 
            { /*IGNORE*/
            }
          case 79: break;
          case 5: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SUBS_OP,yytext());
            }
          case 80: break;
          case 6: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ASSIG_OP,yytext());
            }
          case 81: break;
          case 7: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PARENTH1,yytext());
            }
          case 82: break;
          case 8: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PARENTH2,yytext());
            }
          case 83: break;
          case 9: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CURLY_BR1,yytext());
            }
          case 84: break;
          case 10: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CURLY_BR2,yytext());
            }
          case 85: break;
          case 11: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BRACKET1,yytext());
            }
          case 86: break;
          case 12: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BRACKET2,yytext());
            }
          case 87: break;
          case 13: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GREATER_OP,yytext());
            }
          case 88: break;
          case 14: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LESS_OP,yytext());
            }
          case 89: break;
          case 15: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ADD_OP,yytext());
            }
          case 90: break;
          case 16: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SEMICOLON_SIGN,yytext());
            }
          case 91: break;
          case 17: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.POINT_SIGN,yytext());
            }
          case 92: break;
          case 18: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.COMMA_SIGN,yytext());
            }
          case 93: break;
          case 19: 
            { System.out.println("Comentss");/*IGNORE*/
            }
          case 94: break;
          case 20: 
            { System.out.println("Coment");/*IGNORE*/
            }
          case 95: break;
          case 21: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRING,yytext());
            }
          case 96: break;
          case 22: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.IF,yytext());
            }
          case 97: break;
          case 23: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.EQUAL_OP,yytext());
            }
          case 98: break;
          case 24: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GREATER_EQUAL_OP,yytext());
            }
          case 99: break;
          case 25: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LESS_EQUAL_OP,yytext());
            }
          case 100: break;
          case 26: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NOT_EQUAL_OP,yytext());
            }
          case 101: break;
          case 27: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.AND_OP,yytext());
            }
          case 102: break;
          case 28: 
            { System.out.println("OR_OP "+yytext());
TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.OR_OP,yytext());
            }
          case 103: break;
          case 29: 
            { System.out.println("Coments");/*IGNORE*/
            }
          case 104: break;
          case 30: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.INT_WORD,yytext());
            }
          case 105: break;
          case 31: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NOT,yytext());
            }
          case 106: break;
          case 32: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NEW,yytext());
            }
          case 107: break;
          case 33: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MIN,yytext());
            }
          case 108: break;
          case 34: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MAX,yytext());
            }
          case 109: break;
          case 35: 
            { System.out.println("Comentarios");
/*IGNORE*/
            }
          case 110: break;
          case 36: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NODE,yytext());
            }
          case 111: break;
          case 37: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.TRUE,yytext());
            }
          case 112: break;
          case 38: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LOOP,yytext());
            }
          case 113: break;
          case 39: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ELSE,yytext());
            }
          case 114: break;
          case 40: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DARE,yytext());
            }
          case 115: break;
          case 41: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MAIN,yytext());
            }
          case 116: break;
          case 42: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GROUP,yytext());
            }
          case 117: break;
          case 43: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.FALSE,yytext());
            }
          case 118: break;
          case 44: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRING_WORD,yytext());
            }
          case 119: break;
          case 45: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRESS,yytext());
            }
          case 120: break;
          case 46: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BOOLEAN_WORD,yytext());
            }
          case 121: break;
          case 47: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ANXIETY,yytext());
            }
          case 122: break;
          case 48: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRINTLN,yytext());
            }
          case 123: break;
          case 49: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRIVACY,yytext());
            }
          case 124: break;
          case 50: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DECLARE,yytext());
            }
          case 125: break;
          case 51: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.FEATURES,yytext());
            }
          case 126: break;
          case 52: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.HARDNESS,yytext());
            }
          case 127: break;
          case 53: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STABILITY,yytext());
            }
          case 128: break;
          case 54: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.REASONING,yytext());
            }
          case 129: break;
          case 55: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DOMINANCE,yytext());
            }
          case 130: break;
          case 56: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LIVELINESS,yytext());
            }
          case 131: break;
          case 57: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.AFFABILITY,yytext());
            }
          case 132: break;
          case 58: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.READSTRING,yytext());
            }
          case 133: break;
          case 59: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRINTGRAPH,yytext());
            }
          case 134: break;
          case 60: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ABSTRACTION,yytext());
            }
          case 135: break;
          case 61: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ARRAYSTRING,yytext());
            }
          case 136: break;
          case 62: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SOCIABILITY,yytext());
            }
          case 137: break;
          case 63: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SENSITIVITY,yytext());
            }
          case 138: break;
          case 64: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SELFCONTROL,yytext());
            }
          case 139: break;
          case 65: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.READFEATVAL,yytext());
            }
          case 140: break;
          case 66: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GETFEATURES,yytext());
            }
          case 141: break;
          case 67: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.INDEPENDENCE,yytext());
            }
          case 142: break;
          case 68: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.APPREHESION,yytext());
            }
          case 143: break;
          case 69: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SURVEILLANCE,yytext());
            }
          case 144: break;
          case 70: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GENERATEGROUP,yytext());
            }
          case 145: break;
          case 71: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GETSIMILITUDE,yytext());
            }
          case 146: break;
          case 72: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PERFECTIONISM,yytext());
            }
          case 147: break;
          case 73: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SELFSUFFICIENCY,yytext());
            }
          case 148: break;
          case 74: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CARETOSTANDARDS,yytext());
            }
          case 149: break;
          case 75: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.OPENNESSTOCHANGE,yytext());
            }
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
